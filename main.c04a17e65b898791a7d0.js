/*! For license information please see main.c04a17e65b898791a7d0.js.LICENSE.txt */
!function(){var e={679:function(e,t,n){"use strict";var i=n(864),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},s={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function l(e){return i.isMemo(e)?s:a[e.$$typeof]||r}a[i.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},a[i.Memo]=s;var c=Object.defineProperty,u=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,i){if("string"!=typeof n){if(p){var r=d(n);r&&r!==p&&e(t,r,i)}var s=u(n);h&&(s=s.concat(h(n)));for(var a=l(t),m=l(n),g=0;g<s.length;++g){var O=s[g];if(!(o[O]||i&&i[O]||m&&m[O]||a&&a[O])){var v=f(n,O);try{c(t,O,v)}catch(e){}}}}return t}},448:function(e,t,n){"use strict";var i=n(294),r=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,a={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(a[e]=t,e=0;e<t.length;e++)s.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},p={};function m(e,t,n,i,r,o,s){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=s}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var O=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,t,n,i){var r=g.hasOwnProperty(t)?g[t]:null;(null!==r?0!==r.type:i||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,i){if(null==t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,i)&&(n=null),i||null===r?function(e){return!!h.call(p,e)||!h.call(d,e)&&(f.test(e)?p[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,i=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(O,v);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(O,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(O,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),S=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),Q=Symbol.for("react.profiler"),T=Symbol.for("react.provider"),$=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),C=Symbol.for("react.suspense"),R=Symbol.for("react.suspense_list"),E=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var W=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var _,D=Object.assign;function z(e){if(void 0===_)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);_=t&&t[1]||""}return"\n"+_+e}var N=!1;function L(e,t){if(!e||N)return"";N=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var i=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){i=e}e.call(t.prototype)}else{try{throw Error()}catch(e){i=e}e()}}catch(t){if(t&&i&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),o=i.stack.split("\n"),s=r.length-1,a=o.length-1;1<=s&&0<=a&&r[s]!==o[a];)a--;for(;1<=s&&0<=a;s--,a--)if(r[s]!==o[a]){if(1!==s||1!==a)do{if(s--,0>--a||r[s]!==o[a]){var l="\n"+r[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=s&&0<=a);break}}}finally{N=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function j(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return L(e.type,!1);case 11:return L(e.type.render,!1);case 1:return L(e.type,!0);default:return""}}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case S:return"Portal";case Q:return"Profiler";case k:return"StrictMode";case C:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case $:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case E:return null!==(t=e.displayName||null)?t:X(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return X(e(t))}catch(e){}}return null}function Z(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return X(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function B(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){i=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function F(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=V(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function q(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function H(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function J(e,t){H(e,t);var n=U(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function K(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,i){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&i&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(i&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function oe(e,t){var n=U(t.value),i=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ae(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,he=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,i){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=me(n,t[n],i);"float"===n&&(n="cssFloat"),i?e.setProperty(n,r):e[n]=r}}Object.keys(de).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var Oe=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(Oe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,xe=null,ke=null;function Qe(e){if(e=yr(e)){if("function"!=typeof Se)throw Error(o(280));var t=e.stateNode;t&&(t=wr(t),Se(e.stateNode,e.type,t))}}function Te(e){xe?ke?ke.push(e):ke=[e]:xe=e}function $e(){if(xe){var e=xe,t=ke;if(ke=xe=null,Qe(e),t)for(e=0;e<t.length;e++)Qe(t[e])}}function Pe(e,t){return e(t)}function Ce(){}var Re=!1;function Ee(e,t,n){if(Re)return e(t,n);Re=!0;try{return Pe(e,t,n)}finally{Re=!1,(null!==xe||null!==ke)&&(Ce(),$e())}}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var i=wr(n);if(null===i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var We=!1;if(u)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){We=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ue){We=!1}function Ie(e,t,n,i,r,o,s,a,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var _e=!1,De=null,ze=!1,Ne=null,Le={onError:function(e){_e=!0,De=e}};function je(e,t,n,i,r,o,s,a,l){_e=!1,De=null,Ie.apply(Le,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Xe(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,i=t;;){var r=n.return;if(null===r)break;var s=r.alternate;if(null===s){if(null!==(i=r.return)){n=i;continue}break}if(r.child===s.child){for(s=r.child;s;){if(s===n)return Ue(r),e;if(s===i)return Ue(r),t;s=s.sibling}throw Error(o(188))}if(n.return!==i.return)n=r,i=s;else{for(var a=!1,l=r.child;l;){if(l===n){a=!0,n=r,i=s;break}if(l===i){a=!0,i=r,n=s;break}l=l.sibling}if(!a){for(l=s.child;l;){if(l===n){a=!0,n=s,i=r;break}if(l===i){a=!0,i=s,n=r;break}l=l.sibling}if(!a)throw Error(o(189))}}if(n.alternate!==i)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Be(e):null}function Be(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Be(e);if(null!==t)return t;e=e.sibling}return null}var Fe=r.unstable_scheduleCallback,Ge=r.unstable_cancelCallback,Ye=r.unstable_shouldYield,qe=r.unstable_requestPaint,He=r.unstable_now,Je=r.unstable_getCurrentPriorityLevel,Ke=r.unstable_ImmediatePriority,et=r.unstable_UserBlockingPriority,tt=r.unstable_NormalPriority,nt=r.unstable_LowPriority,it=r.unstable_IdlePriority,rt=null,ot=null,st=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(at(e)/lt|0)|0},at=Math.log,lt=Math.LN2,ct=64,ut=4194304;function ht(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var i=0,r=e.suspendedLanes,o=e.pingedLanes,s=268435455&n;if(0!==s){var a=s&~r;0!==a?i=ht(a):0!=(o&=s)&&(i=ht(o))}else 0!=(s=n&~r)?i=ht(s):0!==o&&(i=ht(o));if(0===i)return 0;if(0!==t&&t!==i&&0==(t&r)&&((r=i&-i)>=(o=t&-t)||16===r&&0!=(4194240&o)))return t;if(0!=(4&i)&&(i|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=i;0<t;)r=1<<(n=31-st(t)),i|=e[n],t&=~r;return i}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ot(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-st(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var i=31-st(n),r=1<<i;r&t|e[i]&t&&(e[i]|=t),n&=~r}}var yt=0;function bt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,St,xt,kt,Qt,Tt=!1,$t=[],Pt=null,Ct=null,Rt=null,Et=new Map,At=new Map,Wt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Ct=null;break;case"mouseover":case"mouseout":Rt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":At.delete(t.pointerId)}}function _t(e,t,n,i,r,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:i,nativeEvent:o,targetContainers:[r]},null!==t&&null!==(t=yr(t))&&St(t),e):(e.eventSystemFlags|=i,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function Dt(e){var t=vr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void Qt(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=yr(n))&&St(t),e.blockedOn=n,!1;var i=new(n=e.nativeEvent).constructor(n.type,n);be=i,n.target.dispatchEvent(i),be=null,t.shift()}return!0}function Nt(e,t,n){zt(e)&&n.delete(t)}function Lt(){Tt=!1,null!==Pt&&zt(Pt)&&(Pt=null),null!==Ct&&zt(Ct)&&(Ct=null),null!==Rt&&zt(Rt)&&(Rt=null),Et.forEach(Nt),At.forEach(Nt)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,Tt||(Tt=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Lt)))}function Xt(e){function t(t){return jt(t,e)}if(0<$t.length){jt($t[0],e);for(var n=1;n<$t.length;n++){var i=$t[n];i.blockedOn===e&&(i.blockedOn=null)}}for(null!==Pt&&jt(Pt,e),null!==Ct&&jt(Ct,e),null!==Rt&&jt(Rt,e),Et.forEach(t),At.forEach(t),n=0;n<Wt.length;n++)(i=Wt[n]).blockedOn===e&&(i.blockedOn=null);for(;0<Wt.length&&null===(n=Wt[0]).blockedOn;)Dt(n),null===n.blockedOn&&Wt.shift()}var Zt=b.ReactCurrentBatchConfig,Ut=!0;function Vt(e,t,n,i){var r=yt,o=Zt.transition;Zt.transition=null;try{yt=1,Ft(e,t,n,i)}finally{yt=r,Zt.transition=o}}function Bt(e,t,n,i){var r=yt,o=Zt.transition;Zt.transition=null;try{yt=4,Ft(e,t,n,i)}finally{yt=r,Zt.transition=o}}function Ft(e,t,n,i){if(Ut){var r=Yt(e,t,n,i);if(null===r)Ui(e,t,i,Gt,n),It(e,i);else if(function(e,t,n,i,r){switch(t){case"focusin":return Pt=_t(Pt,e,t,n,i,r),!0;case"dragenter":return Ct=_t(Ct,e,t,n,i,r),!0;case"mouseover":return Rt=_t(Rt,e,t,n,i,r),!0;case"pointerover":var o=r.pointerId;return Et.set(o,_t(Et.get(o)||null,e,t,n,i,r)),!0;case"gotpointercapture":return o=r.pointerId,At.set(o,_t(At.get(o)||null,e,t,n,i,r)),!0}return!1}(r,e,t,n,i))i.stopPropagation();else if(It(e,i),4&t&&-1<Mt.indexOf(e)){for(;null!==r;){var o=yr(r);if(null!==o&&wt(o),null===(o=Yt(e,t,n,i))&&Ui(e,t,i,Gt,n),o===r)break;r=o}null!==r&&i.stopPropagation()}else Ui(e,t,i,null,n)}}var Gt=null;function Yt(e,t,n,i){if(Gt=null,null!==(e=vr(e=we(i))))if(null===(t=Xe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ze(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ke:return 1;case et:return 4;case tt:case nt:return 16;case it:return 536870912;default:return 16}default:return 16}}var Ht=null,Jt=null,Kt=null;function en(){if(Kt)return Kt;var e,t,n=Jt,i=n.length,r="value"in Ht?Ht.value:Ht.textContent,o=r.length;for(e=0;e<i&&n[e]===r[e];e++);var s=i-e;for(t=1;t<=s&&n[i-t]===r[o-t];t++);return Kt=r.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,i,r,o){for(var s in this._reactName=t,this._targetInst=i,this.type=n,this.nativeEvent=r,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(r):r[s]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var sn,an,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(cn),hn=D({},cn,{view:0,detail:0}),fn=on(hn),dn=D({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Qn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(sn=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=sn=0,ln=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:an}}),pn=on(dn),mn=on(D({},dn,{dataTransfer:0})),gn=on(D({},hn,{relatedTarget:0})),On=on(D({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=D({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=on(vn),bn=on(D({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Qn(){return kn}var Tn=D({},hn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Qn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),$n=on(Tn),Pn=on(D({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=on(D({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Qn})),Rn=on(D({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),En=D({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=on(En),Wn=[9,13,27,32],Mn=u&&"CompositionEvent"in window,In=null;u&&"documentMode"in document&&(In=document.documentMode);var _n=u&&"TextEvent"in window&&!In,Dn=u&&(!Mn||In&&8<In&&11>=In),zn=String.fromCharCode(32),Nn=!1;function Ln(e,t){switch(e){case"keyup":return-1!==Wn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Xn=!1,Zn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Zn[e.type]:"textarea"===t}function Vn(e,t,n,i){Te(i),0<(t=Bi(t,"onChange")).length&&(n=new un("onChange","change",null,n,i),e.push({event:n,listeners:t}))}var Bn=null,Fn=null;function Gn(e){zi(e,0)}function Yn(e){if(F(br(e)))return e}function qn(e,t){if("change"===e)return t}var Hn=!1;if(u){var Jn;if(u){var Kn="oninput"in document;if(!Kn){var ei=document.createElement("div");ei.setAttribute("oninput","return;"),Kn="function"==typeof ei.oninput}Jn=Kn}else Jn=!1;Hn=Jn&&(!document.documentMode||9<document.documentMode)}function ti(){Bn&&(Bn.detachEvent("onpropertychange",ni),Fn=Bn=null)}function ni(e){if("value"===e.propertyName&&Yn(Fn)){var t=[];Vn(t,Fn,e,we(e)),Ee(Gn,t)}}function ii(e,t,n){"focusin"===e?(ti(),Fn=n,(Bn=t).attachEvent("onpropertychange",ni)):"focusout"===e&&ti()}function ri(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Fn)}function oi(e,t){if("click"===e)return Yn(t)}function si(e,t){if("input"===e||"change"===e)return Yn(t)}var ai="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function li(e,t){if(ai(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++){var r=n[i];if(!h.call(t,r)||!ai(e[r],t[r]))return!1}return!0}function ci(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ui(e,t){var n,i=ci(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=ci(i)}}function hi(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hi(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fi(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function di(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pi(e){var t=fi(),n=e.focusedElem,i=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&hi(n.ownerDocument.documentElement,n)){if(null!==i&&di(n))if(t=i.start,void 0===(e=i.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var r=n.textContent.length,o=Math.min(i.start,r);i=void 0===i.end?o:Math.min(i.end,r),!e.extend&&o>i&&(r=i,i=o,o=r),r=ui(n,o);var s=ui(n,i);r&&s&&(1!==e.rangeCount||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&((t=t.createRange()).setStart(r.node,r.offset),e.removeAllRanges(),o>i?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mi=u&&"documentMode"in document&&11>=document.documentMode,gi=null,Oi=null,vi=null,yi=!1;function bi(e,t,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yi||null==gi||gi!==G(i)||(i="selectionStart"in(i=gi)&&di(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},vi&&li(vi,i)||(vi=i,0<(i=Bi(Oi,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:i}),t.target=gi)))}function wi(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Si={animationend:wi("Animation","AnimationEnd"),animationiteration:wi("Animation","AnimationIteration"),animationstart:wi("Animation","AnimationStart"),transitionend:wi("Transition","TransitionEnd")},xi={},ki={};function Qi(e){if(xi[e])return xi[e];if(!Si[e])return e;var t,n=Si[e];for(t in n)if(n.hasOwnProperty(t)&&t in ki)return xi[e]=n[t];return e}u&&(ki=document.createElement("div").style,"AnimationEvent"in window||(delete Si.animationend.animation,delete Si.animationiteration.animation,delete Si.animationstart.animation),"TransitionEvent"in window||delete Si.transitionend.transition);var Ti=Qi("animationend"),$i=Qi("animationiteration"),Pi=Qi("animationstart"),Ci=Qi("transitionend"),Ri=new Map,Ei="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ai(e,t){Ri.set(e,t),l(t,[e])}for(var Wi=0;Wi<Ei.length;Wi++){var Mi=Ei[Wi];Ai(Mi.toLowerCase(),"on"+(Mi[0].toUpperCase()+Mi.slice(1)))}Ai(Ti,"onAnimationEnd"),Ai($i,"onAnimationIteration"),Ai(Pi,"onAnimationStart"),Ai("dblclick","onDoubleClick"),Ai("focusin","onFocus"),Ai("focusout","onBlur"),Ai(Ci,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ii="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_i=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ii));function Di(e,t,n){var i=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,i,r,s,a,l,c){if(je.apply(this,arguments),_e){if(!_e)throw Error(o(198));var u=De;_e=!1,De=null,ze||(ze=!0,Ne=u)}}(i,t,void 0,e),e.currentTarget=null}function zi(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var i=e[n],r=i.event;i=i.listeners;e:{var o=void 0;if(t)for(var s=i.length-1;0<=s;s--){var a=i[s],l=a.instance,c=a.currentTarget;if(a=a.listener,l!==o&&r.isPropagationStopped())break e;Di(r,a,c),o=l}else for(s=0;s<i.length;s++){if(l=(a=i[s]).instance,c=a.currentTarget,a=a.listener,l!==o&&r.isPropagationStopped())break e;Di(r,a,c),o=l}}}if(ze)throw e=Ne,ze=!1,Ne=null,e}function Ni(e,t){var n=t[mr];void 0===n&&(n=t[mr]=new Set);var i=e+"__bubble";n.has(i)||(Zi(t,e,2,!1),n.add(i))}function Li(e,t,n){var i=0;t&&(i|=4),Zi(n,e,i,t)}var ji="_reactListening"+Math.random().toString(36).slice(2);function Xi(e){if(!e[ji]){e[ji]=!0,s.forEach((function(t){"selectionchange"!==t&&(_i.has(t)||Li(t,!1,e),Li(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[ji]||(t[ji]=!0,Li("selectionchange",!1,t))}}function Zi(e,t,n,i){switch(qt(t)){case 1:var r=Vt;break;case 4:r=Bt;break;default:r=Ft}n=r.bind(null,t,n,e),r=void 0,!We||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),i?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function Ui(e,t,n,i,r){var o=i;if(0==(1&t)&&0==(2&t)&&null!==i)e:for(;;){if(null===i)return;var s=i.tag;if(3===s||4===s){var a=i.stateNode.containerInfo;if(a===r||8===a.nodeType&&a.parentNode===r)break;if(4===s)for(s=i.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;s=s.return}for(;null!==a;){if(null===(s=vr(a)))return;if(5===(l=s.tag)||6===l){i=o=s;continue e}a=a.parentNode}}i=i.return}Ee((function(){var i=o,r=we(n),s=[];e:{var a=Ri.get(e);if(void 0!==a){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=$n;break;case"focusin":c="focus",l=gn;break;case"focusout":c="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Cn;break;case Ti:case $i:case Pi:l=On;break;case Ci:l=Rn;break;case"scroll":l=fn;break;case"wheel":l=An;break;case"copy":case"cut":case"paste":l=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var u=0!=(4&t),h=!u&&"scroll"===e,f=u?null!==a?a+"Capture":null:a;u=[];for(var d,p=i;null!==p;){var m=(d=p).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==f&&null!=(m=Ae(p,f))&&u.push(Vi(p,m,d))),h)break;p=p.return}0<u.length&&(a=new l(a,c,null,n,r),s.push({event:a,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(a="mouseover"===e||"pointerover"===e)||n===be||!(c=n.relatedTarget||n.fromElement)||!vr(c)&&!c[pr])&&(l||a)&&(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?vr(c):null)&&(c!==(h=Xe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=pn,m="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Pn,m="onPointerLeave",f="onPointerEnter",p="pointer"),h=null==l?a:br(l),d=null==c?a:br(c),(a=new u(m,p+"leave",l,n,r)).target=h,a.relatedTarget=d,m=null,vr(r)===i&&((u=new u(f,p+"enter",c,n,r)).target=d,u.relatedTarget=h,m=u),h=m,l&&c)e:{for(f=c,p=0,d=u=l;d;d=Fi(d))p++;for(d=0,m=f;m;m=Fi(m))d++;for(;0<p-d;)u=Fi(u),p--;for(;0<d-p;)f=Fi(f),d--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break e;u=Fi(u),f=Fi(f)}u=null}else u=null;null!==l&&Gi(s,a,l,u,!1),null!==c&&null!==h&&Gi(s,h,c,u,!0)}if("select"===(l=(a=i?br(i):window).nodeName&&a.nodeName.toLowerCase())||"input"===l&&"file"===a.type)var g=qn;else if(Un(a))if(Hn)g=si;else{g=ri;var O=ii}else(l=a.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(g=oi);switch(g&&(g=g(e,i))?Vn(s,g,n,r):(O&&O(e,a,i),"focusout"===e&&(O=a._wrapperState)&&O.controlled&&"number"===a.type&&ee(a,"number",a.value)),O=i?br(i):window,e){case"focusin":(Un(O)||"true"===O.contentEditable)&&(gi=O,Oi=i,vi=null);break;case"focusout":vi=Oi=gi=null;break;case"mousedown":yi=!0;break;case"contextmenu":case"mouseup":case"dragend":yi=!1,bi(s,n,r);break;case"selectionchange":if(mi)break;case"keydown":case"keyup":bi(s,n,r)}var v;if(Mn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Xn?Ln(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Dn&&"ko"!==n.locale&&(Xn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Xn&&(v=en()):(Jt="value"in(Ht=r)?Ht.value:Ht.textContent,Xn=!0)),0<(O=Bi(i,y)).length&&(y=new bn(y,e,null,n,r),s.push({event:y,listeners:O}),(v||null!==(v=jn(n)))&&(y.data=v))),(v=_n?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Nn=!0,zn);case"textInput":return(e=t.data)===zn&&Nn?null:e;default:return null}}(e,n):function(e,t){if(Xn)return"compositionend"===e||!Mn&&Ln(e,t)?(e=en(),Kt=Jt=Ht=null,Xn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(i=Bi(i,"onBeforeInput")).length&&(r=new bn("onBeforeInput","beforeinput",null,n,r),s.push({event:r,listeners:i}),r.data=v)}zi(s,t)}))}function Vi(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Bi(e,t){for(var n=t+"Capture",i=[];null!==e;){var r=e,o=r.stateNode;5===r.tag&&null!==o&&(r=o,null!=(o=Ae(e,n))&&i.unshift(Vi(e,o,r)),null!=(o=Ae(e,t))&&i.push(Vi(e,o,r))),e=e.return}return i}function Fi(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gi(e,t,n,i,r){for(var o=t._reactName,s=[];null!==n&&n!==i;){var a=n,l=a.alternate,c=a.stateNode;if(null!==l&&l===i)break;5===a.tag&&null!==c&&(a=c,r?null!=(l=Ae(n,o))&&s.unshift(Vi(n,l,a)):r||null!=(l=Ae(n,o))&&s.push(Vi(n,l,a))),n=n.return}0!==s.length&&e.push({event:t,listeners:s})}var Yi=/\r\n?/g,qi=/\u0000|\uFFFD/g;function Hi(e){return("string"==typeof e?e:""+e).replace(Yi,"\n").replace(qi,"")}function Ji(e,t,n){if(t=Hi(t),Hi(e)!==t&&n)throw Error(o(425))}function Ki(){}var er=null,tr=null;function nr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ir="function"==typeof setTimeout?setTimeout:void 0,rr="function"==typeof clearTimeout?clearTimeout:void 0,or="function"==typeof Promise?Promise:void 0,sr="function"==typeof queueMicrotask?queueMicrotask:void 0!==or?function(e){return or.resolve(null).then(e).catch(ar)}:ir;function ar(e){setTimeout((function(){throw e}))}function lr(e,t){var n=t,i=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&8===r.nodeType)if("/$"===(n=r.data)){if(0===i)return e.removeChild(r),void Xt(t);i--}else"$"!==n&&"$?"!==n&&"$!"!==n||i++;n=r}while(n);Xt(t)}function cr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ur(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var hr=Math.random().toString(36).slice(2),fr="__reactFiber$"+hr,dr="__reactProps$"+hr,pr="__reactContainer$"+hr,mr="__reactEvents$"+hr,gr="__reactListeners$"+hr,Or="__reactHandles$"+hr;function vr(e){var t=e[fr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pr]||n[fr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ur(e);null!==e;){if(n=e[fr])return n;e=ur(e)}return t}n=(e=n).parentNode}return null}function yr(e){return!(e=e[fr]||e[pr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function br(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wr(e){return e[dr]||null}var Sr=[],xr=-1;function kr(e){return{current:e}}function Qr(e){0>xr||(e.current=Sr[xr],Sr[xr]=null,xr--)}function Tr(e,t){xr++,Sr[xr]=e.current,e.current=t}var $r={},Pr=kr($r),Cr=kr(!1),Rr=$r;function Er(e,t){var n=e.type.contextTypes;if(!n)return $r;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in n)o[r]=t[r];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ar(e){return null!=e.childContextTypes}function Wr(){Qr(Cr),Qr(Pr)}function Mr(e,t,n){if(Pr.current!==$r)throw Error(o(168));Tr(Pr,t),Tr(Cr,n)}function Ir(e,t,n){var i=e.stateNode;if(t=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var r in i=i.getChildContext())if(!(r in t))throw Error(o(108,Z(e)||"Unknown",r));return D({},n,i)}function _r(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||$r,Rr=Pr.current,Tr(Pr,e),Tr(Cr,Cr.current),!0}function Dr(e,t,n){var i=e.stateNode;if(!i)throw Error(o(169));n?(e=Ir(e,t,Rr),i.__reactInternalMemoizedMergedChildContext=e,Qr(Cr),Qr(Pr),Tr(Pr,e)):Qr(Cr),Tr(Cr,n)}var zr=null,Nr=!1,Lr=!1;function jr(e){null===zr?zr=[e]:zr.push(e)}function Xr(){if(!Lr&&null!==zr){Lr=!0;var e=0,t=yt;try{var n=zr;for(yt=1;e<n.length;e++){var i=n[e];do{i=i(!0)}while(null!==i)}zr=null,Nr=!1}catch(t){throw null!==zr&&(zr=zr.slice(e+1)),Fe(Ke,Xr),t}finally{yt=t,Lr=!1}}return null}var Zr=[],Ur=0,Vr=null,Br=0,Fr=[],Gr=0,Yr=null,qr=1,Hr="";function Jr(e,t){Zr[Ur++]=Br,Zr[Ur++]=Vr,Vr=e,Br=t}function Kr(e,t,n){Fr[Gr++]=qr,Fr[Gr++]=Hr,Fr[Gr++]=Yr,Yr=e;var i=qr;e=Hr;var r=32-st(i)-1;i&=~(1<<r),n+=1;var o=32-st(t)+r;if(30<o){var s=r-r%5;o=(i&(1<<s)-1).toString(32),i>>=s,r-=s,qr=1<<32-st(t)+r|n<<r|i,Hr=o+e}else qr=1<<o|n<<r|i,Hr=e}function eo(e){null!==e.return&&(Jr(e,1),Kr(e,1,0))}function to(e){for(;e===Vr;)Vr=Zr[--Ur],Zr[Ur]=null,Br=Zr[--Ur],Zr[Ur]=null;for(;e===Yr;)Yr=Fr[--Gr],Fr[Gr]=null,Hr=Fr[--Gr],Fr[Gr]=null,qr=Fr[--Gr],Fr[Gr]=null}var no=null,io=null,ro=!1,oo=null;function so(e,t){var n=Ec(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ao(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,io=cr(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,io=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yr?{id:qr,overflow:Hr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ec(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,io=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function co(e){if(ro){var t=io;if(t){var n=t;if(!ao(e,t)){if(lo(e))throw Error(o(418));t=cr(n.nextSibling);var i=no;t&&ao(e,t)?so(i,n):(e.flags=-4097&e.flags|2,ro=!1,no=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ro=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function ho(e){if(e!==no)return!1;if(!ro)return uo(e),ro=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nr(e.type,e.memoizedProps)),t&&(t=io)){if(lo(e))throw fo(),Error(o(418));for(;t;)so(e,t),t=cr(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){io=cr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}io=null}}else io=no?cr(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=io;e;)e=cr(e.nextSibling)}function po(){io=no=null,ro=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var go=b.ReactCurrentBatchConfig;function Oo(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var vo=kr(null),yo=null,bo=null,wo=null;function So(){wo=bo=yo=null}function xo(e){var t=vo.current;Qr(vo),e._currentValue=t}function ko(e,t,n){for(;null!==e;){var i=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==i&&(i.childLanes|=t)):null!==i&&(i.childLanes&t)!==t&&(i.childLanes|=t),e===n)break;e=e.return}}function Qo(e,t){yo=e,wo=bo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ba=!0),e.firstContext=null)}function To(e){var t=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:t,next:null},null===bo){if(null===yo)throw Error(o(308));bo=e,yo.dependencies={lanes:0,firstContext:e}}else bo=bo.next=e;return t}var $o=null;function Po(e){null===$o?$o=[e]:$o.push(e)}function Co(e,t,n,i){var r=t.interleaved;return null===r?(n.next=n,Po(t)):(n.next=r.next,r.next=n),t.interleaved=n,Ro(e,i)}function Ro(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Eo=!1;function Ao(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Wo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Io(e,t,n){var i=e.updateQueue;if(null===i)return null;if(i=i.shared,0!=(2&Pl)){var r=i.pending;return null===r?t.next=t:(t.next=r.next,r.next=t),i.pending=t,Ro(e,n)}return null===(r=i.interleaved)?(t.next=t,Po(i)):(t.next=r.next,r.next=t),i.interleaved=t,Ro(e,n)}function _o(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var i=t.lanes;n|=i&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Do(e,t){var n=e.updateQueue,i=e.alternate;if(null!==i&&n===(i=i.updateQueue)){var r=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?r=o=s:o=o.next=s,n=n.next}while(null!==n);null===o?r=o=t:o=o.next=t}else r=o=t;return n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:o,shared:i.shared,effects:i.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function zo(e,t,n,i){var r=e.updateQueue;Eo=!1;var o=r.firstBaseUpdate,s=r.lastBaseUpdate,a=r.shared.pending;if(null!==a){r.shared.pending=null;var l=a,c=l.next;l.next=null,null===s?o=c:s.next=c,s=l;var u=e.alternate;null!==u&&(a=(u=u.updateQueue).lastBaseUpdate)!==s&&(null===a?u.firstBaseUpdate=c:a.next=c,u.lastBaseUpdate=l)}if(null!==o){var h=r.baseState;for(s=0,u=c=l=null,a=o;;){var f=a.lane,d=a.eventTime;if((i&f)===f){null!==u&&(u=u.next={eventTime:d,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,m=a;switch(f=t,d=n,m.tag){case 1:if("function"==typeof(p=m.payload)){h=p.call(d,h,f);break e}h=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=m.payload)?p.call(d,h,f):p))break e;h=D({},h,f);break e;case 2:Eo=!0}}null!==a.callback&&0!==a.lane&&(e.flags|=64,null===(f=r.effects)?r.effects=[a]:f.push(a))}else d={eventTime:d,lane:f,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===u?(c=u=d,l=h):u=u.next=d,s|=f;if(null===(a=a.next)){if(null===(a=r.shared.pending))break;a=(f=a).next,f.next=null,r.lastBaseUpdate=f,r.shared.pending=null}}if(null===u&&(l=h),r.baseState=l,r.firstBaseUpdate=c,r.lastBaseUpdate=u,null!==(t=r.shared.interleaved)){r=t;do{s|=r.lane,r=r.next}while(r!==t)}else null===o&&(r.shared.lanes=0);_l|=s,e.lanes=s,e.memoizedState=h}}function No(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var i=e[t],r=i.callback;if(null!==r){if(i.callback=null,i=n,"function"!=typeof r)throw Error(o(191,r));r.call(i)}}}var Lo=(new i.Component).refs;function jo(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Xo={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var i=ec(),r=tc(e),o=Mo(i,r);o.payload=t,null!=n&&(o.callback=n),null!==(t=Io(e,o,r))&&(nc(t,e,r,i),_o(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var i=ec(),r=tc(e),o=Mo(i,r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Io(e,o,r))&&(nc(t,e,r,i),_o(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),i=tc(e),r=Mo(n,i);r.tag=2,null!=t&&(r.callback=t),null!==(t=Io(e,r,i))&&(nc(t,e,i,n),_o(t,e,i))}};function Zo(e,t,n,i,r,o,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,o,s):!(t.prototype&&t.prototype.isPureReactComponent&&li(n,i)&&li(r,o))}function Uo(e,t,n){var i=!1,r=$r,o=t.contextType;return"object"==typeof o&&null!==o?o=To(o):(r=Ar(t)?Rr:Pr.current,o=(i=null!=(i=t.contextTypes))?Er(e,r):$r),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Xo,e.stateNode=t,t._reactInternals=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=o),t}function Vo(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&Xo.enqueueReplaceState(t,t.state,null)}function Bo(e,t,n,i){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=Lo,Ao(e);var o=t.contextType;"object"==typeof o&&null!==o?r.context=To(o):(o=Ar(t)?Rr:Pr.current,r.context=Er(e,o)),r.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(jo(e,t,o,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&Xo.enqueueReplaceState(r,r.state,null),zo(e,n,r,i),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4194308)}function Fo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var i=n.stateNode}if(!i)throw Error(o(147,e));var r=i,s=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===s?t.ref:(t=function(e){var t=r.refs;t===Lo&&(t=r.refs={}),null===e?delete t[s]:t[s]=e},t._stringRef=s,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Yo(e){return(0,e._init)(e._payload)}function qo(e){function t(t,n){if(e){var i=t.deletions;null===i?(t.deletions=[n],t.flags|=16):i.push(n)}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Wc(e,t)).index=0,e.sibling=null,e}function s(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.flags|=2,n):i:(t.flags|=2,n):(t.flags|=1048576,n)}function a(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,i){return null===t||6!==t.tag?((t=Dc(n,e.mode,i)).return=e,t):((t=r(t,n)).return=e,t)}function c(e,t,n,i){var o=n.type;return o===x?h(e,t,n.props.children,i,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===A&&Yo(o)===t.type)?((i=r(t,n.props)).ref=Fo(e,t,n),i.return=e,i):((i=Mc(n.type,n.key,n.props,null,e.mode,i)).ref=Fo(e,t,n),i.return=e,i)}function u(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,i)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function h(e,t,n,i,o){return null===t||7!==t.tag?((t=Ic(n,e.mode,i,o)).return=e,t):((t=r(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Dc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Mc(t.type,t.key,t.props,null,e.mode,n)).ref=Fo(e,null,t),n.return=e,n;case S:return(t=zc(t,e.mode,n)).return=e,t;case A:return f(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=Ic(t,e.mode,n,null)).return=e,t;Go(e,t)}return null}function d(e,t,n,i){var r=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==r?null:l(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===r?c(e,t,n,i):null;case S:return n.key===r?u(e,t,n,i):null;case A:return d(e,t,(r=n._init)(n._payload),i)}if(te(n)||I(n))return null!==r?null:h(e,t,n,i,null);Go(e,n)}return null}function p(e,t,n,i,r){if("string"==typeof i&&""!==i||"number"==typeof i)return l(t,e=e.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case w:return c(t,e=e.get(null===i.key?n:i.key)||null,i,r);case S:return u(t,e=e.get(null===i.key?n:i.key)||null,i,r);case A:return p(e,t,n,(0,i._init)(i._payload),r)}if(te(i)||I(i))return h(t,e=e.get(n)||null,i,r,null);Go(t,i)}return null}function m(r,o,a,l){for(var c=null,u=null,h=o,m=o=0,g=null;null!==h&&m<a.length;m++){h.index>m?(g=h,h=null):g=h.sibling;var O=d(r,h,a[m],l);if(null===O){null===h&&(h=g);break}e&&h&&null===O.alternate&&t(r,h),o=s(O,o,m),null===u?c=O:u.sibling=O,u=O,h=g}if(m===a.length)return n(r,h),ro&&Jr(r,m),c;if(null===h){for(;m<a.length;m++)null!==(h=f(r,a[m],l))&&(o=s(h,o,m),null===u?c=h:u.sibling=h,u=h);return ro&&Jr(r,m),c}for(h=i(r,h);m<a.length;m++)null!==(g=p(h,r,m,a[m],l))&&(e&&null!==g.alternate&&h.delete(null===g.key?m:g.key),o=s(g,o,m),null===u?c=g:u.sibling=g,u=g);return e&&h.forEach((function(e){return t(r,e)})),ro&&Jr(r,m),c}function g(r,a,l,c){var u=I(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var h=u=null,m=a,g=a=0,O=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(O=m,m=null):O=m.sibling;var y=d(r,m,v.value,c);if(null===y){null===m&&(m=O);break}e&&m&&null===y.alternate&&t(r,m),a=s(y,a,g),null===h?u=y:h.sibling=y,h=y,m=O}if(v.done)return n(r,m),ro&&Jr(r,g),u;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=f(r,v.value,c))&&(a=s(v,a,g),null===h?u=v:h.sibling=v,h=v);return ro&&Jr(r,g),u}for(m=i(r,m);!v.done;g++,v=l.next())null!==(v=p(m,r,g,v.value,c))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),a=s(v,a,g),null===h?u=v:h.sibling=v,h=v);return e&&m.forEach((function(e){return t(r,e)})),ro&&Jr(r,g),u}return function e(i,o,s,l){if("object"==typeof s&&null!==s&&s.type===x&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case w:e:{for(var c=s.key,u=o;null!==u;){if(u.key===c){if((c=s.type)===x){if(7===u.tag){n(i,u.sibling),(o=r(u,s.props.children)).return=i,i=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===A&&Yo(c)===u.type){n(i,u.sibling),(o=r(u,s.props)).ref=Fo(i,u,s),o.return=i,i=o;break e}n(i,u);break}t(i,u),u=u.sibling}s.type===x?((o=Ic(s.props.children,i.mode,l,s.key)).return=i,i=o):((l=Mc(s.type,s.key,s.props,null,i.mode,l)).ref=Fo(i,o,s),l.return=i,i=l)}return a(i);case S:e:{for(u=s.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===s.containerInfo&&o.stateNode.implementation===s.implementation){n(i,o.sibling),(o=r(o,s.children||[])).return=i,i=o;break e}n(i,o);break}t(i,o),o=o.sibling}(o=zc(s,i.mode,l)).return=i,i=o}return a(i);case A:return e(i,o,(u=s._init)(s._payload),l)}if(te(s))return m(i,o,s,l);if(I(s))return g(i,o,s,l);Go(i,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==o&&6===o.tag?(n(i,o.sibling),(o=r(o,s)).return=i,i=o):(n(i,o),(o=Dc(s,i.mode,l)).return=i,i=o),a(i)):n(i,o)}}var Ho=qo(!0),Jo=qo(!1),Ko={},es=kr(Ko),ts=kr(Ko),ns=kr(Ko);function is(e){if(e===Ko)throw Error(o(174));return e}function rs(e,t){switch(Tr(ns,t),Tr(ts,e),Tr(es,Ko),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Qr(es),Tr(es,t)}function os(){Qr(es),Qr(ts),Qr(ns)}function ss(e){is(ns.current);var t=is(es.current),n=le(t,e.type);t!==n&&(Tr(ts,e),Tr(es,n))}function as(e){ts.current===e&&(Qr(es),Qr(ts))}var ls=kr(0);function cs(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var us=[];function hs(){for(var e=0;e<us.length;e++)us[e]._workInProgressVersionPrimary=null;us.length=0}var fs=b.ReactCurrentDispatcher,ds=b.ReactCurrentBatchConfig,ps=0,ms=null,gs=null,Os=null,vs=!1,ys=!1,bs=0,ws=0;function Ss(){throw Error(o(321))}function xs(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ai(e[n],t[n]))return!1;return!0}function ks(e,t,n,i,r,s){if(ps=s,ms=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fs.current=null===e||null===e.memoizedState?aa:la,e=n(i,r),ys){s=0;do{if(ys=!1,bs=0,25<=s)throw Error(o(301));s+=1,Os=gs=null,t.updateQueue=null,fs.current=ca,e=n(i,r)}while(ys)}if(fs.current=sa,t=null!==gs&&null!==gs.next,ps=0,Os=gs=ms=null,vs=!1,t)throw Error(o(300));return e}function Qs(){var e=0!==bs;return bs=0,e}function Ts(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Os?ms.memoizedState=Os=e:Os=Os.next=e,Os}function $s(){if(null===gs){var e=ms.alternate;e=null!==e?e.memoizedState:null}else e=gs.next;var t=null===Os?ms.memoizedState:Os.next;if(null!==t)Os=t,gs=e;else{if(null===e)throw Error(o(310));e={memoizedState:(gs=e).memoizedState,baseState:gs.baseState,baseQueue:gs.baseQueue,queue:gs.queue,next:null},null===Os?ms.memoizedState=Os=e:Os=Os.next=e}return Os}function Ps(e,t){return"function"==typeof t?t(e):t}function Cs(e){var t=$s(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var i=gs,r=i.baseQueue,s=n.pending;if(null!==s){if(null!==r){var a=r.next;r.next=s.next,s.next=a}i.baseQueue=r=s,n.pending=null}if(null!==r){s=r.next,i=i.baseState;var l=a=null,c=null,u=s;do{var h=u.lane;if((ps&h)===h)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),i=u.hasEagerState?u.eagerState:e(i,u.action);else{var f={lane:h,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=f,a=i):c=c.next=f,ms.lanes|=h,_l|=h}u=u.next}while(null!==u&&u!==s);null===c?a=i:c.next=l,ai(i,t.memoizedState)||(ba=!0),t.memoizedState=i,t.baseState=a,t.baseQueue=c,n.lastRenderedState=i}if(null!==(e=n.interleaved)){r=e;do{s=r.lane,ms.lanes|=s,_l|=s,r=r.next}while(r!==e)}else null===r&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Rs(e){var t=$s(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var i=n.dispatch,r=n.pending,s=t.memoizedState;if(null!==r){n.pending=null;var a=r=r.next;do{s=e(s,a.action),a=a.next}while(a!==r);ai(s,t.memoizedState)||(ba=!0),t.memoizedState=s,null===t.baseQueue&&(t.baseState=s),n.lastRenderedState=s}return[s,i]}function Es(){}function As(e,t){var n=ms,i=$s(),r=t(),s=!ai(i.memoizedState,r);if(s&&(i.memoizedState=r,ba=!0),i=i.queue,Us(Is.bind(null,n,i,e),[e]),i.getSnapshot!==t||s||null!==Os&&1&Os.memoizedState.tag){if(n.flags|=2048,Ns(9,Ms.bind(null,n,i,r,t),void 0,null),null===Cl)throw Error(o(349));0!=(30&ps)||Ws(n,t,r)}return r}function Ws(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ms.updateQueue)?(t={lastEffect:null,stores:null},ms.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ms(e,t,n,i){t.value=n,t.getSnapshot=i,_s(t)&&Ds(e)}function Is(e,t,n){return n((function(){_s(t)&&Ds(e)}))}function _s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ai(e,n)}catch(e){return!0}}function Ds(e){var t=Ro(e,1);null!==t&&nc(t,e,1,-1)}function zs(e){var t=Ts();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ps,lastRenderedState:e},t.queue=e,e=e.dispatch=na.bind(null,ms,e),[t.memoizedState,e]}function Ns(e,t,n,i){return e={tag:e,create:t,destroy:n,deps:i,next:null},null===(t=ms.updateQueue)?(t={lastEffect:null,stores:null},ms.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(i=n.next,n.next=e,e.next=i,t.lastEffect=e),e}function Ls(){return $s().memoizedState}function js(e,t,n,i){var r=Ts();ms.flags|=e,r.memoizedState=Ns(1|t,n,void 0,void 0===i?null:i)}function Xs(e,t,n,i){var r=$s();i=void 0===i?null:i;var o=void 0;if(null!==gs){var s=gs.memoizedState;if(o=s.destroy,null!==i&&xs(i,s.deps))return void(r.memoizedState=Ns(t,n,o,i))}ms.flags|=e,r.memoizedState=Ns(1|t,n,o,i)}function Zs(e,t){return js(8390656,8,e,t)}function Us(e,t){return Xs(2048,8,e,t)}function Vs(e,t){return Xs(4,2,e,t)}function Bs(e,t){return Xs(4,4,e,t)}function Fs(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gs(e,t,n){return n=null!=n?n.concat([e]):null,Xs(4,4,Fs.bind(null,t,e),n)}function Ys(){}function qs(e,t){var n=$s();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&xs(t,i[1])?i[0]:(n.memoizedState=[e,t],e)}function Hs(e,t){var n=$s();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&xs(t,i[1])?i[0]:(e=e(),n.memoizedState=[e,t],e)}function Js(e,t,n){return 0==(21&ps)?(e.baseState&&(e.baseState=!1,ba=!0),e.memoizedState=n):(ai(n,t)||(n=mt(),ms.lanes|=n,_l|=n,e.baseState=!0),t)}function Ks(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var i=ds.transition;ds.transition={};try{e(!1),t()}finally{yt=n,ds.transition=i}}function ea(){return $s().memoizedState}function ta(e,t,n){var i=tc(e);n={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null},ia(e)?ra(t,n):null!==(n=Co(e,t,n,i))&&(nc(n,e,i,ec()),oa(n,t,i))}function na(e,t,n){var i=tc(e),r={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null};if(ia(e))ra(t,r);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var s=t.lastRenderedState,a=o(s,n);if(r.hasEagerState=!0,r.eagerState=a,ai(a,s)){var l=t.interleaved;return null===l?(r.next=r,Po(t)):(r.next=l.next,l.next=r),void(t.interleaved=r)}}catch(e){}null!==(n=Co(e,t,r,i))&&(nc(n,e,i,r=ec()),oa(n,t,i))}}function ia(e){var t=e.alternate;return e===ms||null!==t&&t===ms}function ra(e,t){ys=vs=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function oa(e,t,n){if(0!=(4194240&n)){var i=t.lanes;n|=i&=e.pendingLanes,t.lanes=n,vt(e,n)}}var sa={readContext:To,useCallback:Ss,useContext:Ss,useEffect:Ss,useImperativeHandle:Ss,useInsertionEffect:Ss,useLayoutEffect:Ss,useMemo:Ss,useReducer:Ss,useRef:Ss,useState:Ss,useDebugValue:Ss,useDeferredValue:Ss,useTransition:Ss,useMutableSource:Ss,useSyncExternalStore:Ss,useId:Ss,unstable_isNewReconciler:!1},aa={readContext:To,useCallback:function(e,t){return Ts().memoizedState=[e,void 0===t?null:t],e},useContext:To,useEffect:Zs,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,js(4194308,4,Fs.bind(null,t,e),n)},useLayoutEffect:function(e,t){return js(4194308,4,e,t)},useInsertionEffect:function(e,t){return js(4,2,e,t)},useMemo:function(e,t){var n=Ts();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var i=Ts();return t=void 0!==n?n(t):t,i.memoizedState=i.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},i.queue=e,e=e.dispatch=ta.bind(null,ms,e),[i.memoizedState,e]},useRef:function(e){return e={current:e},Ts().memoizedState=e},useState:zs,useDebugValue:Ys,useDeferredValue:function(e){return Ts().memoizedState=e},useTransition:function(){var e=zs(!1),t=e[0];return e=Ks.bind(null,e[1]),Ts().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var i=ms,r=Ts();if(ro){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Cl)throw Error(o(349));0!=(30&ps)||Ws(i,t,n)}r.memoizedState=n;var s={value:n,getSnapshot:t};return r.queue=s,Zs(Is.bind(null,i,s,e),[e]),i.flags|=2048,Ns(9,Ms.bind(null,i,s,n,t),void 0,null),n},useId:function(){var e=Ts(),t=Cl.identifierPrefix;if(ro){var n=Hr;t=":"+t+"R"+(n=(qr&~(1<<32-st(qr)-1)).toString(32)+n),0<(n=bs++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ws++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},la={readContext:To,useCallback:qs,useContext:To,useEffect:Us,useImperativeHandle:Gs,useInsertionEffect:Vs,useLayoutEffect:Bs,useMemo:Hs,useReducer:Cs,useRef:Ls,useState:function(){return Cs(Ps)},useDebugValue:Ys,useDeferredValue:function(e){return Js($s(),gs.memoizedState,e)},useTransition:function(){return[Cs(Ps)[0],$s().memoizedState]},useMutableSource:Es,useSyncExternalStore:As,useId:ea,unstable_isNewReconciler:!1},ca={readContext:To,useCallback:qs,useContext:To,useEffect:Us,useImperativeHandle:Gs,useInsertionEffect:Vs,useLayoutEffect:Bs,useMemo:Hs,useReducer:Rs,useRef:Ls,useState:function(){return Rs(Ps)},useDebugValue:Ys,useDeferredValue:function(e){var t=$s();return null===gs?t.memoizedState=e:Js(t,gs.memoizedState,e)},useTransition:function(){return[Rs(Ps)[0],$s().memoizedState]},useMutableSource:Es,useSyncExternalStore:As,useId:ea,unstable_isNewReconciler:!1};function ua(e,t){try{var n="",i=t;do{n+=j(i),i=i.return}while(i);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r,digest:null}}function ha(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fa(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var da="function"==typeof WeakMap?WeakMap:Map;function pa(e,t,n){(n=Mo(-1,n)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){Ul||(Ul=!0,Vl=i),fa(0,t)},n}function ma(e,t,n){(n=Mo(-1,n)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var r=t.value;n.payload=function(){return i(r)},n.callback=function(){fa(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fa(0,t),"function"!=typeof i&&(null===Bl?Bl=new Set([this]):Bl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ga(e,t,n){var i=e.pingCache;if(null===i){i=e.pingCache=new da;var r=new Set;i.set(t,r)}else void 0===(r=i.get(t))&&(r=new Set,i.set(t,r));r.has(n)||(r.add(n),e=Qc.bind(null,e,t,n),t.then(e,e))}function Oa(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function va(e,t,n,i,r){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Mo(-1,1)).tag=2,Io(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=r,e)}var ya=b.ReactCurrentOwner,ba=!1;function wa(e,t,n,i){t.child=null===e?Jo(t,null,n,i):Ho(t,e.child,n,i)}function Sa(e,t,n,i,r){n=n.render;var o=t.ref;return Qo(t,r),i=ks(e,t,n,i,o,r),n=Qs(),null===e||ba?(ro&&n&&eo(t),t.flags|=1,wa(e,t,i,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Ua(e,t,r))}function xa(e,t,n,i,r){if(null===e){var o=n.type;return"function"!=typeof o||Ac(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Mc(n.type,null,i,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,ka(e,t,o,i,r))}if(o=e.child,0==(e.lanes&r)){var s=o.memoizedProps;if((n=null!==(n=n.compare)?n:li)(s,i)&&e.ref===t.ref)return Ua(e,t,r)}return t.flags|=1,(e=Wc(o,i)).ref=t.ref,e.return=t,t.child=e}function ka(e,t,n,i,r){if(null!==e){var o=e.memoizedProps;if(li(o,i)&&e.ref===t.ref){if(ba=!1,t.pendingProps=i=o,0==(e.lanes&r))return t.lanes=e.lanes,Ua(e,t,r);0!=(131072&e.flags)&&(ba=!0)}}return $a(e,t,n,i,r)}function Qa(e,t,n){var i=t.pendingProps,r=i.children,o=null!==e?e.memoizedState:null;if("hidden"===i.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Tr(Wl,Al),Al|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Tr(Wl,Al),Al|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=null!==o?o.baseLanes:n,Tr(Wl,Al),Al|=i}else null!==o?(i=o.baseLanes|n,t.memoizedState=null):i=n,Tr(Wl,Al),Al|=i;return wa(e,t,r,n),t.child}function Ta(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function $a(e,t,n,i,r){var o=Ar(n)?Rr:Pr.current;return o=Er(t,o),Qo(t,r),n=ks(e,t,n,i,o,r),i=Qs(),null===e||ba?(ro&&i&&eo(t),t.flags|=1,wa(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Ua(e,t,r))}function Pa(e,t,n,i,r){if(Ar(n)){var o=!0;_r(t)}else o=!1;if(Qo(t,r),null===t.stateNode)Za(e,t),Uo(t,n,i),Bo(t,n,i,r),i=!0;else if(null===e){var s=t.stateNode,a=t.memoizedProps;s.props=a;var l=s.context,c=n.contextType;c="object"==typeof c&&null!==c?To(c):Er(t,c=Ar(n)?Rr:Pr.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof s.getSnapshotBeforeUpdate;h||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==i||l!==c)&&Vo(t,s,i,c),Eo=!1;var f=t.memoizedState;s.state=f,zo(t,i,s,r),l=t.memoizedState,a!==i||f!==l||Cr.current||Eo?("function"==typeof u&&(jo(t,n,u,i),l=t.memoizedState),(a=Eo||Zo(t,n,a,i,f,l,c))?(h||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4194308)):("function"==typeof s.componentDidMount&&(t.flags|=4194308),t.memoizedProps=i,t.memoizedState=l),s.props=i,s.state=l,s.context=c,i=a):("function"==typeof s.componentDidMount&&(t.flags|=4194308),i=!1)}else{s=t.stateNode,Wo(e,t),a=t.memoizedProps,c=t.type===t.elementType?a:Oo(t.type,a),s.props=c,h=t.pendingProps,f=s.context,l="object"==typeof(l=n.contextType)&&null!==l?To(l):Er(t,l=Ar(n)?Rr:Pr.current);var d=n.getDerivedStateFromProps;(u="function"==typeof d||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==h||f!==l)&&Vo(t,s,i,l),Eo=!1,f=t.memoizedState,s.state=f,zo(t,i,s,r);var p=t.memoizedState;a!==h||f!==p||Cr.current||Eo?("function"==typeof d&&(jo(t,n,d,i),p=t.memoizedState),(c=Eo||Zo(t,n,c,i,f,p,l)||!1)?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(i,p,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof s.componentDidUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=i,t.memoizedState=p),s.props=i,s.state=p,s.context=l,i=c):("function"!=typeof s.componentDidUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),i=!1)}return Ca(e,t,n,i,o,r)}function Ca(e,t,n,i,r,o){Ta(e,t);var s=0!=(128&t.flags);if(!i&&!s)return r&&Dr(t,n,!1),Ua(e,t,o);i=t.stateNode,ya.current=t;var a=s&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.flags|=1,null!==e&&s?(t.child=Ho(t,e.child,null,o),t.child=Ho(t,null,a,o)):wa(e,t,a,o),t.memoizedState=i.state,r&&Dr(t,n,!0),t.child}function Ra(e){var t=e.stateNode;t.pendingContext?Mr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mr(0,t.context,!1),rs(e,t.containerInfo)}function Ea(e,t,n,i,r){return po(),mo(r),t.flags|=256,wa(e,t,n,i),t.child}var Aa,Wa,Ma,Ia={dehydrated:null,treeContext:null,retryLane:0};function _a(e){return{baseLanes:e,cachePool:null,transitions:null}}function Da(e,t,n){var i,r=t.pendingProps,s=ls.current,a=!1,l=0!=(128&t.flags);if((i=l)||(i=(null===e||null!==e.memoizedState)&&0!=(2&s)),i?(a=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(s|=1),Tr(ls,1&s),null===e)return co(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=r.children,e=r.fallback,a?(r=t.mode,a=t.child,l={mode:"hidden",children:l},0==(1&r)&&null!==a?(a.childLanes=0,a.pendingProps=l):a=_c(l,r,0,null),e=Ic(e,r,n,null),a.return=t,e.return=t,a.sibling=e,t.child=a,t.child.memoizedState=_a(n),t.memoizedState=Ia,e):za(t,l));if(null!==(s=e.memoizedState)&&null!==(i=s.dehydrated))return function(e,t,n,i,r,s,a){if(n)return 256&t.flags?(t.flags&=-257,Na(e,t,a,i=ha(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(s=i.fallback,r=t.mode,i=_c({mode:"visible",children:i.children},r,0,null),(s=Ic(s,r,a,null)).flags|=2,i.return=t,s.return=t,i.sibling=s,t.child=i,0!=(1&t.mode)&&Ho(t,e.child,null,a),t.child.memoizedState=_a(a),t.memoizedState=Ia,s);if(0==(1&t.mode))return Na(e,t,a,null);if("$!"===r.data){if(i=r.nextSibling&&r.nextSibling.dataset)var l=i.dgst;return i=l,Na(e,t,a,i=ha(s=Error(o(419)),i,void 0))}if(l=0!=(a&e.childLanes),ba||l){if(null!==(i=Cl)){switch(a&-a){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}0!==(r=0!=(r&(i.suspendedLanes|a))?0:r)&&r!==s.retryLane&&(s.retryLane=r,Ro(e,r),nc(i,e,r,-1))}return mc(),Na(e,t,a,i=ha(Error(o(421))))}return"$?"===r.data?(t.flags|=128,t.child=e.child,t=$c.bind(null,e),r._reactRetry=t,null):(e=s.treeContext,io=cr(r.nextSibling),no=t,ro=!0,oo=null,null!==e&&(Fr[Gr++]=qr,Fr[Gr++]=Hr,Fr[Gr++]=Yr,qr=e.id,Hr=e.overflow,Yr=t),(t=za(t,i.children)).flags|=4096,t)}(e,t,l,r,i,s,n);if(a){a=r.fallback,l=t.mode,i=(s=e.child).sibling;var c={mode:"hidden",children:r.children};return 0==(1&l)&&t.child!==s?((r=t.child).childLanes=0,r.pendingProps=c,t.deletions=null):(r=Wc(s,c)).subtreeFlags=14680064&s.subtreeFlags,null!==i?a=Wc(i,a):(a=Ic(a,l,n,null)).flags|=2,a.return=t,r.return=t,r.sibling=a,t.child=r,r=a,a=t.child,l=null===(l=e.child.memoizedState)?_a(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},a.memoizedState=l,a.childLanes=e.childLanes&~n,t.memoizedState=Ia,r}return e=(a=e.child).sibling,r=Wc(a,{mode:"visible",children:r.children}),0==(1&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function za(e,t){return(t=_c({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Na(e,t,n,i){return null!==i&&mo(i),Ho(t,e.child,null,n),(e=za(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function La(e,t,n){e.lanes|=t;var i=e.alternate;null!==i&&(i.lanes|=t),ko(e.return,t,n)}function ja(e,t,n,i,r){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=i,o.tail=n,o.tailMode=r)}function Xa(e,t,n){var i=t.pendingProps,r=i.revealOrder,o=i.tail;if(wa(e,t,i.children,n),0!=(2&(i=ls.current)))i=1&i|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&La(e,n,t);else if(19===e.tag)La(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(Tr(ls,i),0==(1&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===cs(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),ja(t,!1,r,n,o);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===cs(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}ja(t,!0,n,null,o);break;case"together":ja(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Za(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ua(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),_l|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Wc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Wc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Va(e,t){if(!ro)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?t||null===e.tail?e.tail=null:e.tail.sibling=null:i.sibling=null}}function Ba(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,i=0;if(t)for(var r=e.child;null!==r;)n|=r.lanes|r.childLanes,i|=14680064&r.subtreeFlags,i|=14680064&r.flags,r.return=e,r=r.sibling;else for(r=e.child;null!==r;)n|=r.lanes|r.childLanes,i|=r.subtreeFlags,i|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=i,e.childLanes=n,t}function Fa(e,t,n){var i=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ba(t),null;case 1:case 17:return Ar(t.type)&&Wr(),Ba(t),null;case 3:return i=t.stateNode,os(),Qr(Cr),Qr(Pr),hs(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==e&&null!==e.child||(ho(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(sc(oo),oo=null))),Ba(t),null;case 5:as(t);var r=is(ns.current);if(n=t.type,null!==e&&null!=t.stateNode)Wa(e,t,n,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!i){if(null===t.stateNode)throw Error(o(166));return Ba(t),null}if(e=is(es.current),ho(t)){i=t.stateNode,n=t.type;var s=t.memoizedProps;switch(i[fr]=t,i[dr]=s,e=0!=(1&t.mode),n){case"dialog":Ni("cancel",i),Ni("close",i);break;case"iframe":case"object":case"embed":Ni("load",i);break;case"video":case"audio":for(r=0;r<Ii.length;r++)Ni(Ii[r],i);break;case"source":Ni("error",i);break;case"img":case"image":case"link":Ni("error",i),Ni("load",i);break;case"details":Ni("toggle",i);break;case"input":q(i,s),Ni("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Ni("invalid",i);break;case"textarea":re(i,s),Ni("invalid",i)}for(var l in ve(n,s),r=null,s)if(s.hasOwnProperty(l)){var c=s[l];"children"===l?"string"==typeof c?i.textContent!==c&&(!0!==s.suppressHydrationWarning&&Ji(i.textContent,c,e),r=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(!0!==s.suppressHydrationWarning&&Ji(i.textContent,c,e),r=["children",""+c]):a.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Ni("scroll",i)}switch(n){case"input":B(i),K(i,s,!0);break;case"textarea":B(i),se(i);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(i.onclick=Ki)}i=r,t.updateQueue=i,null!==i&&(t.flags|=4)}else{l=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ae(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof i.is?e=l.createElement(n,{is:i.is}):(e=l.createElement(n),"select"===n&&(l=e,i.multiple?l.multiple=!0:i.size&&(l.size=i.size))):e=l.createElementNS(e,n),e[fr]=t,e[dr]=i,Aa(e,t),t.stateNode=e;e:{switch(l=ye(n,i),n){case"dialog":Ni("cancel",e),Ni("close",e),r=i;break;case"iframe":case"object":case"embed":Ni("load",e),r=i;break;case"video":case"audio":for(r=0;r<Ii.length;r++)Ni(Ii[r],e);r=i;break;case"source":Ni("error",e),r=i;break;case"img":case"image":case"link":Ni("error",e),Ni("load",e),r=i;break;case"details":Ni("toggle",e),r=i;break;case"input":q(e,i),r=Y(e,i),Ni("invalid",e);break;case"option":default:r=i;break;case"select":e._wrapperState={wasMultiple:!!i.multiple},r=D({},i,{value:void 0}),Ni("invalid",e);break;case"textarea":re(e,i),r=ie(e,i),Ni("invalid",e)}for(s in ve(n,r),c=r)if(c.hasOwnProperty(s)){var u=c[s];"style"===s?ge(e,u):"dangerouslySetInnerHTML"===s?null!=(u=u?u.__html:void 0)&&he(e,u):"children"===s?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(a.hasOwnProperty(s)?null!=u&&"onScroll"===s&&Ni("scroll",e):null!=u&&y(e,s,u,l))}switch(n){case"input":B(e),K(e,i,!1);break;case"textarea":B(e),se(e);break;case"option":null!=i.value&&e.setAttribute("value",""+U(i.value));break;case"select":e.multiple=!!i.multiple,null!=(s=i.value)?ne(e,!!i.multiple,s,!1):null!=i.defaultValue&&ne(e,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=Ki)}switch(n){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ba(t),null;case 6:if(e&&null!=t.stateNode)Ma(0,t,e.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(o(166));if(n=is(ns.current),is(es.current),ho(t)){if(i=t.stateNode,n=t.memoizedProps,i[fr]=t,(s=i.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Ji(i.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Ji(i.nodeValue,n,0!=(1&e.mode))}s&&(t.flags|=4)}else(i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[fr]=t,t.stateNode=i}return Ba(t),null;case 13:if(Qr(ls),i=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ro&&null!==io&&0!=(1&t.mode)&&0==(128&t.flags))fo(),po(),t.flags|=98560,s=!1;else if(s=ho(t),null!==i&&null!==i.dehydrated){if(null===e){if(!s)throw Error(o(318));if(!(s=null!==(s=t.memoizedState)?s.dehydrated:null))throw Error(o(317));s[fr]=t}else po(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ba(t),s=!1}else null!==oo&&(sc(oo),oo=null),s=!0;if(!s)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((i=null!==i)!=(null!==e&&null!==e.memoizedState)&&i&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ls.current)?0===Ml&&(Ml=3):mc())),null!==t.updateQueue&&(t.flags|=4),Ba(t),null);case 4:return os(),null===e&&Xi(t.stateNode.containerInfo),Ba(t),null;case 10:return xo(t.type._context),Ba(t),null;case 19:if(Qr(ls),null===(s=t.memoizedState))return Ba(t),null;if(i=0!=(128&t.flags),null===(l=s.rendering))if(i)Va(s,!1);else{if(0!==Ml||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=cs(e))){for(t.flags|=128,Va(s,!1),null!==(i=l.updateQueue)&&(t.updateQueue=i,t.flags|=4),t.subtreeFlags=0,i=n,n=t.child;null!==n;)e=i,(s=n).flags&=14680066,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Tr(ls,1&ls.current|2),t.child}e=e.sibling}null!==s.tail&&He()>Xl&&(t.flags|=128,i=!0,Va(s,!1),t.lanes=4194304)}else{if(!i)if(null!==(e=cs(l))){if(t.flags|=128,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Va(s,!0),null===s.tail&&"hidden"===s.tailMode&&!l.alternate&&!ro)return Ba(t),null}else 2*He()-s.renderingStartTime>Xl&&1073741824!==n&&(t.flags|=128,i=!0,Va(s,!1),t.lanes=4194304);s.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=s.last)?n.sibling=l:t.child=l,s.last=l)}return null!==s.tail?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=He(),t.sibling=null,n=ls.current,Tr(ls,i?1&n|2:1&n),t):(Ba(t),null);case 22:case 23:return hc(),i=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==i&&(t.flags|=8192),i&&0!=(1&t.mode)?0!=(1073741824&Al)&&(Ba(t),6&t.subtreeFlags&&(t.flags|=8192)):Ba(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ga(e,t){switch(to(t),t.tag){case 1:return Ar(t.type)&&Wr(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return os(),Qr(Cr),Qr(Pr),hs(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return as(t),null;case 13:if(Qr(ls),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));po()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Qr(ls),null;case 4:return os(),null;case 10:return xo(t.type._context),null;case 22:case 23:return hc(),null;default:return null}}Aa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wa=function(e,t,n,i){var r=e.memoizedProps;if(r!==i){e=t.stateNode,is(es.current);var o,s=null;switch(n){case"input":r=Y(e,r),i=Y(e,i),s=[];break;case"select":r=D({},r,{value:void 0}),i=D({},i,{value:void 0}),s=[];break;case"textarea":r=ie(e,r),i=ie(e,i),s=[];break;default:"function"!=typeof r.onClick&&"function"==typeof i.onClick&&(e.onclick=Ki)}for(u in ve(n,i),n=null,r)if(!i.hasOwnProperty(u)&&r.hasOwnProperty(u)&&null!=r[u])if("style"===u){var l=r[u];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(a.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in i){var c=i[u];if(l=null!=r?r[u]:void 0,i.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(s||(s=[]),s.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(s=s||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(a.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Ni("scroll",e),s||l===c||(s=[])):(s=s||[]).push(u,c))}n&&(s=s||[]).push("style",n);var u=s;(t.updateQueue=u)&&(t.flags|=4)}},Ma=function(e,t,n,i){n!==i&&(t.flags|=4)};var Ya=!1,qa=!1,Ha="function"==typeof WeakSet?WeakSet:Set,Ja=null;function Ka(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){kc(e,t,n)}}var tl=!1;function nl(e,t,n){var i=t.updateQueue;if(null!==(i=null!==i?i.lastEffect:null)){var r=i=i.next;do{if((r.tag&e)===e){var o=r.destroy;r.destroy=void 0,void 0!==o&&el(t,n,o)}r=r.next}while(r!==i)}}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var i=n.create;n.destroy=i()}n=n.next}while(n!==t)}}function rl(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fr],delete t[dr],delete t[mr],delete t[gr],delete t[Or]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function al(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var i=e.tag;if(5===i||6===i)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ki));else if(4!==i&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function cl(e,t,n){var i=e.tag;if(5===i||6===i)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==i&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var ul=null,hl=!1;function fl(e,t,n){for(n=n.child;null!==n;)dl(e,t,n),n=n.sibling}function dl(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(rt,n)}catch(e){}switch(n.tag){case 5:qa||Ka(n,t);case 6:var i=ul,r=hl;ul=null,fl(e,t,n),hl=r,null!==(ul=i)&&(hl?(e=ul,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ul.removeChild(n.stateNode));break;case 18:null!==ul&&(hl?(e=ul,n=n.stateNode,8===e.nodeType?lr(e.parentNode,n):1===e.nodeType&&lr(e,n),Xt(e)):lr(ul,n.stateNode));break;case 4:i=ul,r=hl,ul=n.stateNode.containerInfo,hl=!0,fl(e,t,n),ul=i,hl=r;break;case 0:case 11:case 14:case 15:if(!qa&&null!==(i=n.updateQueue)&&null!==(i=i.lastEffect)){r=i=i.next;do{var o=r,s=o.destroy;o=o.tag,void 0!==s&&(0!=(2&o)||0!=(4&o))&&el(n,t,s),r=r.next}while(r!==i)}fl(e,t,n);break;case 1:if(!qa&&(Ka(n,t),"function"==typeof(i=n.stateNode).componentWillUnmount))try{i.props=n.memoizedProps,i.state=n.memoizedState,i.componentWillUnmount()}catch(e){kc(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(qa=(i=qa)||null!==n.memoizedState,fl(e,t,n),qa=i):fl(e,t,n);break;default:fl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ha),t.forEach((function(t){var i=Pc.bind(null,e,t);n.has(t)||(n.add(t),t.then(i,i))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var i=0;i<n.length;i++){var r=n[i];try{var s=e,a=t,l=a;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,hl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,hl=!0;break e}l=l.return}if(null===ul)throw Error(o(160));dl(s,a,r),ul=null,hl=!1;var c=r.alternate;null!==c&&(c.return=null),r.return=null}catch(e){kc(r,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gl(t,e),t=t.sibling}function gl(e,t){var n=e.alternate,i=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),Ol(e),4&i){try{nl(3,e,e.return),il(3,e)}catch(t){kc(e,e.return,t)}try{nl(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:ml(t,e),Ol(e),512&i&&null!==n&&Ka(n,n.return);break;case 5:if(ml(t,e),Ol(e),512&i&&null!==n&&Ka(n,n.return),32&e.flags){var r=e.stateNode;try{fe(r,"")}catch(t){kc(e,e.return,t)}}if(4&i&&null!=(r=e.stateNode)){var s=e.memoizedProps,a=null!==n?n.memoizedProps:s,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===s.type&&null!=s.name&&H(r,s),ye(l,a);var u=ye(l,s);for(a=0;a<c.length;a+=2){var h=c[a],f=c[a+1];"style"===h?ge(r,f):"dangerouslySetInnerHTML"===h?he(r,f):"children"===h?fe(r,f):y(r,h,f,u)}switch(l){case"input":J(r,s);break;case"textarea":oe(r,s);break;case"select":var d=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!s.multiple;var p=s.value;null!=p?ne(r,!!s.multiple,p,!1):d!==!!s.multiple&&(null!=s.defaultValue?ne(r,!!s.multiple,s.defaultValue,!0):ne(r,!!s.multiple,s.multiple?[]:"",!1))}r[dr]=s}catch(t){kc(e,e.return,t)}}break;case 6:if(ml(t,e),Ol(e),4&i){if(null===e.stateNode)throw Error(o(162));r=e.stateNode,s=e.memoizedProps;try{r.nodeValue=s}catch(t){kc(e,e.return,t)}}break;case 3:if(ml(t,e),Ol(e),4&i&&null!==n&&n.memoizedState.isDehydrated)try{Xt(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:ml(t,e),Ol(e);break;case 13:ml(t,e),Ol(e),8192&(r=e.child).flags&&(s=null!==r.memoizedState,r.stateNode.isHidden=s,!s||null!==r.alternate&&null!==r.alternate.memoizedState||(jl=He())),4&i&&pl(e);break;case 22:if(h=null!==n&&null!==n.memoizedState,1&e.mode?(qa=(u=qa)||h,ml(t,e),qa=u):ml(t,e),Ol(e),8192&i){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!h&&0!=(1&e.mode))for(Ja=e,h=e.child;null!==h;){for(f=Ja=h;null!==Ja;){switch(p=(d=Ja).child,d.tag){case 0:case 11:case 14:case 15:nl(4,d,d.return);break;case 1:Ka(d,d.return);var m=d.stateNode;if("function"==typeof m.componentWillUnmount){i=d,n=d.return;try{t=i,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){kc(i,n,e)}}break;case 5:Ka(d,d.return);break;case 22:if(null!==d.memoizedState){wl(f);continue}}null!==p?(p.return=d,Ja=p):wl(f)}h=h.sibling}e:for(h=null,f=e;;){if(5===f.tag){if(null===h){h=f;try{r=f.stateNode,u?"function"==typeof(s=r.style).setProperty?s.setProperty("display","none","important"):s.display="none":(l=f.stateNode,a=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=me("display",a))}catch(t){kc(e,e.return,t)}}}else if(6===f.tag){if(null===h)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;h===f&&(h=null),f=f.return}h===f&&(h=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:ml(t,e),Ol(e),4&i&&pl(e);case 21:}}function Ol(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(sl(n)){var i=n;break e}n=n.return}throw Error(o(160))}switch(i.tag){case 5:var r=i.stateNode;32&i.flags&&(fe(r,""),i.flags&=-33),cl(e,al(e),r);break;case 3:case 4:var s=i.stateNode.containerInfo;ll(e,al(e),s);break;default:throw Error(o(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vl(e,t,n){Ja=e,yl(e,t,n)}function yl(e,t,n){for(var i=0!=(1&e.mode);null!==Ja;){var r=Ja,o=r.child;if(22===r.tag&&i){var s=null!==r.memoizedState||Ya;if(!s){var a=r.alternate,l=null!==a&&null!==a.memoizedState||qa;a=Ya;var c=qa;if(Ya=s,(qa=l)&&!c)for(Ja=r;null!==Ja;)l=(s=Ja).child,22===s.tag&&null!==s.memoizedState?Sl(r):null!==l?(l.return=s,Ja=l):Sl(r);for(;null!==o;)Ja=o,yl(o,t,n),o=o.sibling;Ja=r,Ya=a,qa=c}bl(e)}else 0!=(8772&r.subtreeFlags)&&null!==o?(o.return=r,Ja=o):bl(e)}}function bl(e){for(;null!==Ja;){var t=Ja;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:qa||il(5,t);break;case 1:var i=t.stateNode;if(4&t.flags&&!qa)if(null===n)i.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:Oo(t.type,n.memoizedProps);i.componentDidUpdate(r,n.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;null!==s&&No(t,s,i);break;case 3:var a=t.updateQueue;if(null!==a){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}No(t,a,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var h=u.memoizedState;if(null!==h){var f=h.dehydrated;null!==f&&Xt(f)}}}break;default:throw Error(o(163))}qa||512&t.flags&&rl(t)}catch(e){kc(t,t.return,e)}}if(t===e){Ja=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ja=n;break}Ja=t.return}}function wl(e){for(;null!==Ja;){var t=Ja;if(t===e){Ja=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ja=n;break}Ja=t.return}}function Sl(e){for(;null!==Ja;){var t=Ja;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{il(4,t)}catch(e){kc(t,n,e)}break;case 1:var i=t.stateNode;if("function"==typeof i.componentDidMount){var r=t.return;try{i.componentDidMount()}catch(e){kc(t,r,e)}}var o=t.return;try{rl(t)}catch(e){kc(t,o,e)}break;case 5:var s=t.return;try{rl(t)}catch(e){kc(t,s,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Ja=null;break}var a=t.sibling;if(null!==a){a.return=t.return,Ja=a;break}Ja=t.return}}var xl,kl=Math.ceil,Ql=b.ReactCurrentDispatcher,Tl=b.ReactCurrentOwner,$l=b.ReactCurrentBatchConfig,Pl=0,Cl=null,Rl=null,El=0,Al=0,Wl=kr(0),Ml=0,Il=null,_l=0,Dl=0,zl=0,Nl=null,Ll=null,jl=0,Xl=1/0,Zl=null,Ul=!1,Vl=null,Bl=null,Fl=!1,Gl=null,Yl=0,ql=0,Hl=null,Jl=-1,Kl=0;function ec(){return 0!=(6&Pl)?He():-1!==Jl?Jl:Jl=He()}function tc(e){return 0==(1&e.mode)?1:0!=(2&Pl)&&0!==El?El&-El:null!==go.transition?(0===Kl&&(Kl=mt()),Kl):0!==(e=yt)?e:e=void 0===(e=window.event)?16:qt(e.type)}function nc(e,t,n,i){if(50<ql)throw ql=0,Hl=null,Error(o(185));Ot(e,n,i),0!=(2&Pl)&&e===Cl||(e===Cl&&(0==(2&Pl)&&(Dl|=n),4===Ml&&ac(e,El)),ic(e,i),1===n&&0===Pl&&0==(1&t.mode)&&(Xl=He()+500,Nr&&Xr()))}function ic(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,i=e.pingedLanes,r=e.expirationTimes,o=e.pendingLanes;0<o;){var s=31-st(o),a=1<<s,l=r[s];-1===l?0!=(a&n)&&0==(a&i)||(r[s]=dt(a,t)):l<=t&&(e.expiredLanes|=a),o&=~a}}(e,t);var i=ft(e,e===Cl?El:0);if(0===i)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=i&-i,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Nr=!0,jr(e)}(lc.bind(null,e)):jr(lc.bind(null,e)),sr((function(){0==(6&Pl)&&Xr()})),n=null;else{switch(bt(i)){case 1:n=Ke;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=it}n=Cc(n,rc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rc(e,t){if(Jl=-1,Kl=0,0!=(6&Pl))throw Error(o(327));var n=e.callbackNode;if(Sc()&&e.callbackNode!==n)return null;var i=ft(e,e===Cl?El:0);if(0===i)return null;if(0!=(30&i)||0!=(i&e.expiredLanes)||t)t=gc(e,i);else{t=i;var r=Pl;Pl|=2;var s=pc();for(Cl===e&&El===t||(Zl=null,Xl=He()+500,fc(e,t));;)try{vc();break}catch(t){dc(e,t)}So(),Ql.current=s,Pl=r,null!==Rl?t=0:(Cl=null,El=0,t=Ml)}if(0!==t){if(2===t&&0!==(r=pt(e))&&(i=r,t=oc(e,r)),1===t)throw n=Il,fc(e,0),ac(e,i),ic(e,He()),n;if(6===t)ac(e,i);else{if(r=e.current.alternate,0==(30&i)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var i=0;i<n.length;i++){var r=n[i],o=r.getSnapshot;r=r.value;try{if(!ai(o(),r))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(r)&&(2===(t=gc(e,i))&&0!==(s=pt(e))&&(i=s,t=oc(e,s)),1===t))throw n=Il,fc(e,0),ac(e,i),ic(e,He()),n;switch(e.finishedWork=r,e.finishedLanes=i,t){case 0:case 1:throw Error(o(345));case 2:case 5:wc(e,Ll,Zl);break;case 3:if(ac(e,i),(130023424&i)===i&&10<(t=jl+500-He())){if(0!==ft(e,0))break;if(((r=e.suspendedLanes)&i)!==i){ec(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=ir(wc.bind(null,e,Ll,Zl),t);break}wc(e,Ll,Zl);break;case 4:if(ac(e,i),(4194240&i)===i)break;for(t=e.eventTimes,r=-1;0<i;){var a=31-st(i);s=1<<a,(a=t[a])>r&&(r=a),i&=~s}if(i=r,10<(i=(120>(i=He()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*kl(i/1960))-i)){e.timeoutHandle=ir(wc.bind(null,e,Ll,Zl),i);break}wc(e,Ll,Zl);break;default:throw Error(o(329))}}}return ic(e,He()),e.callbackNode===n?rc.bind(null,e):null}function oc(e,t){var n=Nl;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=gc(e,t))&&(t=Ll,Ll=n,null!==t&&sc(t)),e}function sc(e){null===Ll?Ll=e:Ll.push.apply(Ll,e)}function ac(e,t){for(t&=~zl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-st(t),i=1<<n;e[n]=-1,t&=~i}}function lc(e){if(0!=(6&Pl))throw Error(o(327));Sc();var t=ft(e,0);if(0==(1&t))return ic(e,He()),null;var n=gc(e,t);if(0!==e.tag&&2===n){var i=pt(e);0!==i&&(t=i,n=oc(e,i))}if(1===n)throw n=Il,fc(e,0),ac(e,t),ic(e,He()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wc(e,Ll,Zl),ic(e,He()),null}function cc(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Xl=He()+500,Nr&&Xr())}}function uc(e){null!==Gl&&0===Gl.tag&&0==(6&Pl)&&Sc();var t=Pl;Pl|=1;var n=$l.transition,i=yt;try{if($l.transition=null,yt=1,e)return e()}finally{yt=i,$l.transition=n,0==(6&(Pl=t))&&Xr()}}function hc(){Al=Wl.current,Qr(Wl)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,rr(n)),null!==Rl)for(n=Rl.return;null!==n;){var i=n;switch(to(i),i.tag){case 1:null!=(i=i.type.childContextTypes)&&Wr();break;case 3:os(),Qr(Cr),Qr(Pr),hs();break;case 5:as(i);break;case 4:os();break;case 13:case 19:Qr(ls);break;case 10:xo(i.type._context);break;case 22:case 23:hc()}n=n.return}if(Cl=e,Rl=e=Wc(e.current,null),El=Al=t,Ml=0,Il=null,zl=Dl=_l=0,Ll=Nl=null,null!==$o){for(t=0;t<$o.length;t++)if(null!==(i=(n=$o[t]).interleaved)){n.interleaved=null;var r=i.next,o=n.pending;if(null!==o){var s=o.next;o.next=r,i.next=s}n.pending=i}$o=null}return e}function dc(e,t){for(;;){var n=Rl;try{if(So(),fs.current=sa,vs){for(var i=ms.memoizedState;null!==i;){var r=i.queue;null!==r&&(r.pending=null),i=i.next}vs=!1}if(ps=0,Os=gs=ms=null,ys=!1,bs=0,Tl.current=null,null===n||null===n.return){Ml=1,Il=t,Rl=null;break}e:{var s=e,a=n.return,l=n,c=t;if(t=El,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,h=l,f=h.tag;if(0==(1&h.mode)&&(0===f||11===f||15===f)){var d=h.alternate;d?(h.updateQueue=d.updateQueue,h.memoizedState=d.memoizedState,h.lanes=d.lanes):(h.updateQueue=null,h.memoizedState=null)}var p=Oa(a);if(null!==p){p.flags&=-257,va(p,a,l,0,t),1&p.mode&&ga(s,u,t),c=u;var m=(t=p).updateQueue;if(null===m){var g=new Set;g.add(c),t.updateQueue=g}else m.add(c);break e}if(0==(1&t)){ga(s,u,t),mc();break e}c=Error(o(426))}else if(ro&&1&l.mode){var O=Oa(a);if(null!==O){0==(65536&O.flags)&&(O.flags|=256),va(O,a,l,0,t),mo(ua(c,l));break e}}s=c=ua(c,l),4!==Ml&&(Ml=2),null===Nl?Nl=[s]:Nl.push(s),s=a;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,Do(s,pa(0,c,t));break e;case 1:l=c;var v=s.type,y=s.stateNode;if(0==(128&s.flags)&&("function"==typeof v.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Bl||!Bl.has(y)))){s.flags|=65536,t&=-t,s.lanes|=t,Do(s,ma(s,l,t));break e}}s=s.return}while(null!==s)}bc(n)}catch(e){t=e,Rl===n&&null!==n&&(Rl=n=n.return);continue}break}}function pc(){var e=Ql.current;return Ql.current=sa,null===e?sa:e}function mc(){0!==Ml&&3!==Ml&&2!==Ml||(Ml=4),null===Cl||0==(268435455&_l)&&0==(268435455&Dl)||ac(Cl,El)}function gc(e,t){var n=Pl;Pl|=2;var i=pc();for(Cl===e&&El===t||(Zl=null,fc(e,t));;)try{Oc();break}catch(t){dc(e,t)}if(So(),Pl=n,Ql.current=i,null!==Rl)throw Error(o(261));return Cl=null,El=0,Ml}function Oc(){for(;null!==Rl;)yc(Rl)}function vc(){for(;null!==Rl&&!Ye();)yc(Rl)}function yc(e){var t=xl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?bc(e):Rl=t,Tl.current=null}function bc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Fa(n,t,Al)))return void(Rl=n)}else{if(null!==(n=Ga(n,t)))return n.flags&=32767,void(Rl=n);if(null===e)return Ml=6,void(Rl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Rl=t);Rl=t=e}while(null!==t);0===Ml&&(Ml=5)}function wc(e,t,n){var i=yt,r=$l.transition;try{$l.transition=null,yt=1,function(e,t,n,i){do{Sc()}while(null!==Gl);if(0!=(6&Pl))throw Error(o(327));n=e.finishedWork;var r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var s=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var i=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-st(n),o=1<<r;t[r]=0,i[r]=-1,e[r]=-1,n&=~o}}(e,s),e===Cl&&(Rl=Cl=null,El=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Fl||(Fl=!0,Cc(tt,(function(){return Sc(),null}))),s=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||s){s=$l.transition,$l.transition=null;var a=yt;yt=1;var l=Pl;Pl|=4,Tl.current=null,function(e,t){if(er=Ut,di(e=fi())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var i=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(i&&0!==i.rangeCount){n=i.anchorNode;var r=i.anchorOffset,s=i.focusNode;i=i.focusOffset;try{n.nodeType,s.nodeType}catch(e){n=null;break e}var a=0,l=-1,c=-1,u=0,h=0,f=e,d=null;t:for(;;){for(var p;f!==n||0!==r&&3!==f.nodeType||(l=a+r),f!==s||0!==i&&3!==f.nodeType||(c=a+i),3===f.nodeType&&(a+=f.nodeValue.length),null!==(p=f.firstChild);)d=f,f=p;for(;;){if(f===e)break t;if(d===n&&++u===r&&(l=a),d===s&&++h===i&&(c=a),null!==(p=f.nextSibling))break;d=(f=d).parentNode}f=p}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(tr={focusedElem:e,selectionRange:n},Ut=!1,Ja=t;null!==Ja;)if(e=(t=Ja).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ja=e;else for(;null!==Ja;){t=Ja;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,O=m.memoizedState,v=t.stateNode,y=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:Oo(t.type,g),O);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ja=e;break}Ja=t.return}m=tl,tl=!1}(e,n),gl(n,e),pi(tr),Ut=!!er,tr=er=null,e.current=n,vl(n,e,r),qe(),Pl=l,yt=a,$l.transition=s}else e.current=n;if(Fl&&(Fl=!1,Gl=e,Yl=r),0===(s=e.pendingLanes)&&(Bl=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(rt,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ic(e,He()),null!==t)for(i=e.onRecoverableError,n=0;n<t.length;n++)i((r=t[n]).value,{componentStack:r.stack,digest:r.digest});if(Ul)throw Ul=!1,e=Vl,Vl=null,e;0!=(1&Yl)&&0!==e.tag&&Sc(),0!=(1&(s=e.pendingLanes))?e===Hl?ql++:(ql=0,Hl=e):ql=0,Xr()}(e,t,n,i)}finally{$l.transition=r,yt=i}return null}function Sc(){if(null!==Gl){var e=bt(Yl),t=$l.transition,n=yt;try{if($l.transition=null,yt=16>e?16:e,null===Gl)var i=!1;else{if(e=Gl,Gl=null,Yl=0,0!=(6&Pl))throw Error(o(331));var r=Pl;for(Pl|=4,Ja=e.current;null!==Ja;){var s=Ja,a=s.child;if(0!=(16&Ja.flags)){var l=s.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Ja=u;null!==Ja;){var h=Ja;switch(h.tag){case 0:case 11:case 15:nl(8,h,s)}var f=h.child;if(null!==f)f.return=h,Ja=f;else for(;null!==Ja;){var d=(h=Ja).sibling,p=h.return;if(ol(h),h===u){Ja=null;break}if(null!==d){d.return=p,Ja=d;break}Ja=p}}}var m=s.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var O=g.sibling;g.sibling=null,g=O}while(null!==g)}}Ja=s}}if(0!=(2064&s.subtreeFlags)&&null!==a)a.return=s,Ja=a;else e:for(;null!==Ja;){if(0!=(2048&(s=Ja).flags))switch(s.tag){case 0:case 11:case 15:nl(9,s,s.return)}var v=s.sibling;if(null!==v){v.return=s.return,Ja=v;break e}Ja=s.return}}var y=e.current;for(Ja=y;null!==Ja;){var b=(a=Ja).child;if(0!=(2064&a.subtreeFlags)&&null!==b)b.return=a,Ja=b;else e:for(a=y;null!==Ja;){if(0!=(2048&(l=Ja).flags))try{switch(l.tag){case 0:case 11:case 15:il(9,l)}}catch(e){kc(l,l.return,e)}if(l===a){Ja=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Ja=w;break e}Ja=l.return}}if(Pl=r,Xr(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(rt,e)}catch(e){}i=!0}return i}finally{yt=n,$l.transition=t}}return!1}function xc(e,t,n){e=Io(e,t=pa(0,t=ua(n,t),1),1),t=ec(),null!==e&&(Ot(e,1,t),ic(e,t))}function kc(e,t,n){if(3===e.tag)xc(e,e,n);else for(;null!==t;){if(3===t.tag){xc(t,e,n);break}if(1===t.tag){var i=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===Bl||!Bl.has(i))){t=Io(t,e=ma(t,e=ua(n,e),1),1),e=ec(),null!==t&&(Ot(t,1,e),ic(t,e));break}}t=t.return}}function Qc(e,t,n){var i=e.pingCache;null!==i&&i.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Cl===e&&(El&n)===n&&(4===Ml||3===Ml&&(130023424&El)===El&&500>He()-jl?fc(e,0):zl|=n),ic(e,t)}function Tc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=ec();null!==(e=Ro(e,t))&&(Ot(e,t,n),ic(e,n))}function $c(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Tc(e,n)}function Pc(e,t){var n=0;switch(e.tag){case 13:var i=e.stateNode,r=e.memoizedState;null!==r&&(n=r.retryLane);break;case 19:i=e.stateNode;break;default:throw Error(o(314))}null!==i&&i.delete(t),Tc(e,n)}function Cc(e,t){return Fe(e,t)}function Rc(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ec(e,t,n,i){return new Rc(e,t,n,i)}function Ac(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Wc(e,t){var n=e.alternate;return null===n?((n=Ec(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Mc(e,t,n,i,r,s){var a=2;if(i=e,"function"==typeof e)Ac(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case x:return Ic(n.children,r,s,t);case k:a=8,r|=8;break;case Q:return(e=Ec(12,n,t,2|r)).elementType=Q,e.lanes=s,e;case C:return(e=Ec(13,n,t,r)).elementType=C,e.lanes=s,e;case R:return(e=Ec(19,n,t,r)).elementType=R,e.lanes=s,e;case W:return _c(n,r,s,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:a=10;break e;case $:a=9;break e;case P:a=11;break e;case E:a=14;break e;case A:a=16,i=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ec(a,n,t,r)).elementType=e,t.type=i,t.lanes=s,t}function Ic(e,t,n,i){return(e=Ec(7,e,i,t)).lanes=n,e}function _c(e,t,n,i){return(e=Ec(22,e,i,t)).elementType=W,e.lanes=n,e.stateNode={isHidden:!1},e}function Dc(e,t,n){return(e=Ec(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=Ec(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nc(e,t,n,i,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=i,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Lc(e,t,n,i,r,o,s,a,l){return e=new Nc(e,t,n,a,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ec(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:i,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ao(o),e}function jc(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}function Xc(e){if(!e)return $r;e:{if(Xe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ar(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ar(n))return Ir(e,n,t)}return t}function Zc(e,t,n,i,r,o,s,a,l){return(e=Lc(n,i,!0,e,0,o,0,a,l)).context=Xc(null),n=e.current,(o=Mo(i=ec(),r=tc(n))).callback=null!=t?t:null,Io(n,o,r),e.current.lanes=r,Ot(e,r,i),ic(e,i),e}function Uc(e,t,n,i){var r=t.current,o=ec(),s=tc(r);return n=Xc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Mo(o,s)).payload={element:e},null!==(i=void 0===i?null:i)&&(t.callback=i),null!==(e=Io(r,t,s))&&(nc(e,r,s,o),_o(e,r,s)),s}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Bc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Fc(e,t){Bc(e,t),(e=e.alternate)&&Bc(e,t)}xl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Cr.current)ba=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ba=!1,function(e,t,n){switch(t.tag){case 3:Ra(t),po();break;case 5:ss(t);break;case 1:Ar(t.type)&&_r(t);break;case 4:rs(t,t.stateNode.containerInfo);break;case 10:var i=t.type._context,r=t.memoizedProps.value;Tr(vo,i._currentValue),i._currentValue=r;break;case 13:if(null!==(i=t.memoizedState))return null!==i.dehydrated?(Tr(ls,1&ls.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Da(e,t,n):(Tr(ls,1&ls.current),null!==(e=Ua(e,t,n))?e.sibling:null);Tr(ls,1&ls.current);break;case 19:if(i=0!=(n&t.childLanes),0!=(128&e.flags)){if(i)return Xa(e,t,n);t.flags|=128}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),Tr(ls,ls.current),i)break;return null;case 22:case 23:return t.lanes=0,Qa(e,t,n)}return Ua(e,t,n)}(e,t,n);ba=0!=(131072&e.flags)}else ba=!1,ro&&0!=(1048576&t.flags)&&Kr(t,Br,t.index);switch(t.lanes=0,t.tag){case 2:var i=t.type;Za(e,t),e=t.pendingProps;var r=Er(t,Pr.current);Qo(t,n),r=ks(null,t,i,e,r,n);var s=Qs();return t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ar(i)?(s=!0,_r(t)):s=!1,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,Ao(t),r.updater=Xo,t.stateNode=r,r._reactInternals=t,Bo(t,i,e,n),t=Ca(null,t,i,!0,s,n)):(t.tag=0,ro&&s&&eo(t),wa(null,t,r,n),t=t.child),t;case 16:i=t.elementType;e:{switch(Za(e,t),e=t.pendingProps,i=(r=i._init)(i._payload),t.type=i,r=t.tag=function(e){if("function"==typeof e)return Ac(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===E)return 14}return 2}(i),e=Oo(i,e),r){case 0:t=$a(null,t,i,e,n);break e;case 1:t=Pa(null,t,i,e,n);break e;case 11:t=Sa(null,t,i,e,n);break e;case 14:t=xa(null,t,i,Oo(i.type,e),n);break e}throw Error(o(306,i,""))}return t;case 0:return i=t.type,r=t.pendingProps,$a(e,t,i,r=t.elementType===i?r:Oo(i,r),n);case 1:return i=t.type,r=t.pendingProps,Pa(e,t,i,r=t.elementType===i?r:Oo(i,r),n);case 3:e:{if(Ra(t),null===e)throw Error(o(387));i=t.pendingProps,r=(s=t.memoizedState).element,Wo(e,t),zo(t,i,null,n);var a=t.memoizedState;if(i=a.element,s.isDehydrated){if(s={element:i,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=s,t.memoizedState=s,256&t.flags){t=Ea(e,t,i,n,r=ua(Error(o(423)),t));break e}if(i!==r){t=Ea(e,t,i,n,r=ua(Error(o(424)),t));break e}for(io=cr(t.stateNode.containerInfo.firstChild),no=t,ro=!0,oo=null,n=Jo(t,null,i,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(po(),i===r){t=Ua(e,t,n);break e}wa(e,t,i,n)}t=t.child}return t;case 5:return ss(t),null===e&&co(t),i=t.type,r=t.pendingProps,s=null!==e?e.memoizedProps:null,a=r.children,nr(i,r)?a=null:null!==s&&nr(i,s)&&(t.flags|=32),Ta(e,t),wa(e,t,a,n),t.child;case 6:return null===e&&co(t),null;case 13:return Da(e,t,n);case 4:return rs(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Ho(t,null,i,n):wa(e,t,i,n),t.child;case 11:return i=t.type,r=t.pendingProps,Sa(e,t,i,r=t.elementType===i?r:Oo(i,r),n);case 7:return wa(e,t,t.pendingProps,n),t.child;case 8:case 12:return wa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(i=t.type._context,r=t.pendingProps,s=t.memoizedProps,a=r.value,Tr(vo,i._currentValue),i._currentValue=a,null!==s)if(ai(s.value,a)){if(s.children===r.children&&!Cr.current){t=Ua(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var l=s.dependencies;if(null!==l){a=s.child;for(var c=l.firstContext;null!==c;){if(c.context===i){if(1===s.tag){(c=Mo(-1,n&-n)).tag=2;var u=s.updateQueue;if(null!==u){var h=(u=u.shared).pending;null===h?c.next=c:(c.next=h.next,h.next=c),u.pending=c}}s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ko(s.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===s.tag)a=s.type===t.type?null:s.child;else if(18===s.tag){if(null===(a=s.return))throw Error(o(341));a.lanes|=n,null!==(l=a.alternate)&&(l.lanes|=n),ko(a,n,t),a=s.sibling}else a=s.child;if(null!==a)a.return=s;else for(a=s;null!==a;){if(a===t){a=null;break}if(null!==(s=a.sibling)){s.return=a.return,a=s;break}a=a.return}s=a}wa(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,i=t.pendingProps.children,Qo(t,n),i=i(r=To(r)),t.flags|=1,wa(e,t,i,n),t.child;case 14:return r=Oo(i=t.type,t.pendingProps),xa(e,t,i,r=Oo(i.type,r),n);case 15:return ka(e,t,t.type,t.pendingProps,n);case 17:return i=t.type,r=t.pendingProps,r=t.elementType===i?r:Oo(i,r),Za(e,t),t.tag=1,Ar(i)?(e=!0,_r(t)):e=!1,Qo(t,n),Uo(t,i,r),Bo(t,i,r,n),Ca(null,t,i,!0,e,n);case 19:return Xa(e,t,n);case 22:return Qa(e,t,n)}throw Error(o(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function qc(e){this._internalRoot=e}function Hc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Kc(){}function eu(e,t,n,i,r){var o=n._reactRootContainer;if(o){var s=o;if("function"==typeof r){var a=r;r=function(){var e=Vc(s);a.call(e)}}Uc(t,s,e,r)}else s=function(e,t,n,i,r){if(r){if("function"==typeof i){var o=i;i=function(){var e=Vc(s);o.call(e)}}var s=Zc(t,i,e,0,null,!1,0,"",Kc);return e._reactRootContainer=s,e[pr]=s.current,Xi(8===e.nodeType?e.parentNode:e),uc(),s}for(;r=e.lastChild;)e.removeChild(r);if("function"==typeof i){var a=i;i=function(){var e=Vc(l);a.call(e)}}var l=Lc(e,0,!1,null,0,!1,0,"",Kc);return e._reactRootContainer=l,e[pr]=l.current,Xi(8===e.nodeType?e.parentNode:e),uc((function(){Uc(t,l,n,i)})),l}(n,t,e,r,i);return Vc(s)}qc.prototype.render=Yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Uc(e,t,null,null)},qc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Uc(null,e,null,null)})),t[pr]=null}},qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Wt.length&&0!==t&&t<Wt[n].priority;n++);Wt.splice(n,0,e),0===n&&Dt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ht(t.pendingLanes);0!==n&&(vt(t,1|n),ic(t,He()),0==(6&Pl)&&(Xl=He()+500,Xr()))}break;case 13:uc((function(){var t=Ro(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Fc(e,1)}},St=function(e){if(13===e.tag){var t=Ro(e,134217728);null!==t&&nc(t,e,134217728,ec()),Fc(e,134217728)}},xt=function(e){if(13===e.tag){var t=tc(e),n=Ro(e,t);null!==n&&nc(n,e,t,ec()),Fc(e,t)}},kt=function(){return yt},Qt=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var r=wr(i);if(!r)throw Error(o(90));F(i),J(i,r)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=cc,Ce=uc;var tu={usingClientEntryPoint:!1,Events:[yr,br,wr,Te,$e,cc]},nu={findFiberByHostInstance:vr,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},iu={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{rt=ru.inject(iu),ot=ru}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Hc(t))throw Error(o(200));return jc(e,t,null,n)},t.createRoot=function(e,t){if(!Hc(e))throw Error(o(299));var n=!1,i="",r=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(r=t.onRecoverableError)),t=Lc(e,1,!1,null,0,n,0,i,r),e[pr]=t.current,Xi(8===e.nodeType?e.parentNode:e),new Yc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(o(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Hc(e))throw Error(o(405));var i=null!=n&&n.hydratedSources||null,r=!1,s="",a=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(s=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),t=Zc(t,null,e,1,null!=n?n:null,r,0,s,a),e[pr]=t.current,Xi(e),i)for(e=0;e<i.length;e++)r=(r=(n=i[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new qc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(o(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[pr]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,i){if(!Jc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,t,n,!1,i)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var i=n(935);t.createRoot=i.createRoot,t.hydrateRoot=i.hydrateRoot},935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,i=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,s=n?Symbol.for("react.strict_mode"):60108,a=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,O=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,b=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case u:case h:case o:case a:case s:case d:return e;default:switch(e=e&&e.$$typeof){case c:case f:case g:case m:case l:return e;default:return t}}case r:return t}}}function S(e){return w(e)===h}t.AsyncMode=u,t.ConcurrentMode=h,t.ContextConsumer=c,t.ContextProvider=l,t.Element=i,t.ForwardRef=f,t.Fragment=o,t.Lazy=g,t.Memo=m,t.Portal=r,t.Profiler=a,t.StrictMode=s,t.Suspense=d,t.isAsyncMode=function(e){return S(e)||w(e)===u},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return w(e)===f},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===r},t.isProfiler=function(e){return w(e)===a},t.isStrictMode=function(e){return w(e)===s},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===h||e===a||e===s||e===d||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===f||e.$$typeof===v||e.$$typeof===y||e.$$typeof===b||e.$$typeof===O)},t.typeOf=w},864:function(e,t,n){"use strict";e.exports=n(921)},408:function(e,t){"use strict";var n=Symbol.for("react.element"),i=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),h=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),d=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function O(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}O.prototype.isReactComponent={},O.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},O.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=O.prototype;var b=y.prototype=new v;b.constructor=y,m(b,O.prototype),b.isPureReactComponent=!0;var w=Array.isArray,S=Object.prototype.hasOwnProperty,x={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function Q(e,t,i){var r,o={},s=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(s=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=i;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:n,type:e,key:s,ref:a,props:o,_owner:x.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var $=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,o,s){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var l=!1;if(null===e)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case i:l=!0}}if(l)return s=s(l=e),e=""===o?"."+P(l,0):o,w(s)?(r="",null!=e&&(r=e.replace($,"$&/")+"/"),C(s,t,r,"",(function(e){return e}))):null!=s&&(T(s)&&(s=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,r+(!s.key||l&&l.key===s.key?"":(""+s.key).replace($,"$&/")+"/")+e)),t.push(s)),1;if(l=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var u=o+P(a=e[c],c);l+=C(a,t,r,u,s)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(a=e.next()).done;)l+=C(a=a.value,t,r,u=o+P(a,c++),s);else if("object"===a)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function R(e,t,n){if(null==e)return e;var i=[],r=0;return C(e,i,"","",(function(e){return t.call(n,e,r++)})),i}function E(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},W={transition:null},M={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:W,ReactCurrentOwner:x};t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!T(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=O,t.Fragment=r,t.Profiler=s,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,i){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=m({},e.props),o=e.key,s=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,a=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)S.call(t,c)&&!k.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=i;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];r.children=l}return{$$typeof:n,type:e.type,key:o,ref:s,props:r,_owner:a}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=Q,t.createFactory=function(e){var t=Q.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:E}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=W.transition;W.transition={};try{e()}finally{W.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.2.0"},294:function(e,t,n){"use strict";e.exports=n(408)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var i=n-1>>>1,r=e[i];if(!(0<o(r,t)))break e;e[i]=t,e[n]=r,n=i}}function i(e){return 0===e.length?null:e[0]}function r(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var i=0,r=e.length,s=r>>>1;i<s;){var a=2*(i+1)-1,l=e[a],c=a+1,u=e[c];if(0>o(l,n))c<r&&0>o(u,l)?(e[i]=u,e[c]=n,i=c):(e[i]=l,e[a]=n,i=a);else{if(!(c<r&&0>o(u,n)))break e;e[i]=u,e[c]=n,i=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var a=Date,l=a.now();t.unstable_now=function(){return a.now()-l}}var c=[],u=[],h=1,f=null,d=3,p=!1,m=!1,g=!1,O="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=i(u);null!==t;){if(null===t.callback)r(u);else{if(!(t.startTime<=e))break;r(u),t.sortIndex=t.expirationTime,n(c,t)}t=i(u)}}function w(e){if(g=!1,b(e),!m)if(null!==i(c))m=!0,W(S);else{var t=i(u);null!==t&&M(w,t.startTime-e)}}function S(e,n){m=!1,g&&(g=!1,v(T),T=-1),p=!0;var o=d;try{for(b(n),f=i(c);null!==f&&(!(f.expirationTime>n)||e&&!C());){var s=f.callback;if("function"==typeof s){f.callback=null,d=f.priorityLevel;var a=s(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof a?f.callback=a:f===i(c)&&r(c),b(n)}else r(c);f=i(c)}if(null!==f)var l=!0;else{var h=i(u);null!==h&&M(w,h.startTime-n),l=!1}return l}finally{f=null,d=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,k=!1,Q=null,T=-1,$=5,P=-1;function C(){return!(t.unstable_now()-P<$)}function R(){if(null!==Q){var e=t.unstable_now();P=e;var n=!0;try{n=Q(!0,e)}finally{n?x():(k=!1,Q=null)}}else k=!1}if("function"==typeof y)x=function(){y(R)};else if("undefined"!=typeof MessageChannel){var E=new MessageChannel,A=E.port2;E.port1.onmessage=R,x=function(){A.postMessage(null)}}else x=function(){O(R,0)};function W(e){Q=e,k||(k=!0,x())}function M(e,n){T=O((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||p||(m=!0,W(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):$=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return i(c)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,r,o){var s=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?s+o:s,e){case 1:var a=-1;break;case 2:a=250;break;case 5:a=1073741823;break;case 4:a=1e4;break;default:a=5e3}return e={id:h++,callback:r,priorityLevel:e,startTime:o,expirationTime:a=o+a,sortIndex:-1},o>s?(e.sortIndex=o,n(u,e),null===i(c)&&e===i(u)&&(g?(v(T),T=-1):g=!0,M(w,o-s))):(e.sortIndex=a,n(c,e),m||p||(m=!0,W(S))),e},t.unstable_shouldYield=C,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},840:function(e,t,n){"use strict";e.exports=n(53)},774:function(e){e.exports=function(e,t,n,i){var r=n?n.call(i,e,t):void 0;if(void 0!==r)return!!r;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),s=Object.keys(t);if(o.length!==s.length)return!1;for(var a=Object.prototype.hasOwnProperty.bind(t),l=0;l<o.length;l++){var c=o[l];if(!a(c))return!1;var u=e[c],h=t[c];if(!1===(r=n?n.call(i,u,h,c):void 0)||void 0===r&&u!==h)return!1}return!0}},804:function(e,t,n){"use strict";n.r(t),n.d(t,{ServerStyleSheet:function(){return Le},StyleSheetConsumer:function(){return re},StyleSheetContext:function(){return ie},StyleSheetManager:function(){return ue},ThemeConsumer:function(){return Ae},ThemeContext:function(){return Ee},ThemeProvider:function(){return We},__PRIVATE__:function(){return Ze},createGlobalStyle:function(){return ze},css:function(){return be},default:function(){return Ue},isStyledComponent:function(){return b},keyframes:function(){return Ne},useTheme:function(){return Xe},version:function(){return S},withTheme:function(){return je}});var i=n(864),r=n(294),o=n(774),s=n.n(o),a=function(e){function t(e,i,l,c,f){for(var d,p,m,g,b,S=0,x=0,k=0,Q=0,T=0,A=0,M=m=d=0,_=0,D=0,z=0,N=0,L=l.length,j=L-1,X="",Z="",U="",V="";_<L;){if(p=l.charCodeAt(_),_===j&&0!==x+Q+k+S&&(0!==x&&(p=47===x?10:47),Q=k=S=0,L++,j++),0===x+Q+k+S){if(_===j&&(0<D&&(X=X.replace(h,"")),0<X.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:X+=l.charAt(_)}p=59}switch(p){case 123:for(d=(X=X.trim()).charCodeAt(0),m=1,N=++_;_<L;){switch(p=l.charCodeAt(_)){case 123:m++;break;case 125:m--;break;case 47:switch(p=l.charCodeAt(_+1)){case 42:case 47:e:{for(M=_+1;M<j;++M)switch(l.charCodeAt(M)){case 47:if(42===p&&42===l.charCodeAt(M-1)&&_+2!==M){_=M+1;break e}break;case 10:if(47===p){_=M+1;break e}}_=M}}break;case 91:p++;case 40:p++;case 34:case 39:for(;_++<j&&l.charCodeAt(_)!==p;);}if(0===m)break;_++}if(m=l.substring(N,_),0===d&&(d=(X=X.replace(u,"").trim()).charCodeAt(0)),64===d){switch(0<D&&(X=X.replace(h,"")),p=X.charCodeAt(1)){case 100:case 109:case 115:case 45:D=i;break;default:D=E}if(N=(m=t(i,D,m,p,f+1)).length,0<W&&(b=a(3,m,D=n(E,X,z),i,P,$,N,p,f,c),X=D.join(""),void 0!==b&&0===(N=(m=b.trim()).length)&&(p=0,m="")),0<N)switch(p){case 115:X=X.replace(w,s);case 100:case 109:case 45:m=X+"{"+m+"}";break;case 107:m=(X=X.replace(O,"$1 $2"))+"{"+m+"}",m=1===R||2===R&&o("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=X+m,112===c&&(Z+=m,m="")}else m=""}else m=t(i,n(i,X,z),m,c,f+1);U+=m,m=z=D=M=d=0,X="",p=l.charCodeAt(++_);break;case 125:case 59:if(1<(N=(X=(0<D?X.replace(h,""):X).trim()).length))switch(0===M&&(d=X.charCodeAt(0),45===d||96<d&&123>d)&&(N=(X=X.replace(" ",":")).length),0<W&&void 0!==(b=a(1,X,i,e,P,$,Z.length,c,f,c))&&0===(N=(X=b.trim()).length)&&(X="\0\0"),d=X.charCodeAt(0),p=X.charCodeAt(1),d){case 0:break;case 64:if(105===p||99===p){V+=X+l.charAt(_);break}default:58!==X.charCodeAt(N-1)&&(Z+=r(X,d,p,X.charCodeAt(2)))}z=D=M=d=0,X="",p=l.charCodeAt(++_)}}switch(p){case 13:case 10:47===x?x=0:0===1+d&&107!==c&&0<X.length&&(D=1,X+="\0"),0<W*I&&a(0,X,i,e,P,$,Z.length,c,f,c),$=1,P++;break;case 59:case 125:if(0===x+Q+k+S){$++;break}default:switch($++,g=l.charAt(_),p){case 9:case 32:if(0===Q+S+x)switch(T){case 44:case 58:case 9:case 32:g="";break;default:32!==p&&(g=" ")}break;case 0:g="\\0";break;case 12:g="\\f";break;case 11:g="\\v";break;case 38:0===Q+x+S&&(D=z=1,g="\f"+g);break;case 108:if(0===Q+x+S+C&&0<M)switch(_-M){case 2:112===T&&58===l.charCodeAt(_-3)&&(C=T);case 8:111===A&&(C=A)}break;case 58:0===Q+x+S&&(M=_);break;case 44:0===x+k+Q+S&&(D=1,g+="\r");break;case 34:case 39:0===x&&(Q=Q===p?0:0===Q?p:Q);break;case 91:0===Q+x+k&&S++;break;case 93:0===Q+x+k&&S--;break;case 41:0===Q+x+S&&k--;break;case 40:0===Q+x+S&&(0===d&&(2*T+3*A==533||(d=1)),k++);break;case 64:0===x+k+Q+S+M+m&&(m=1);break;case 42:case 47:if(!(0<Q+S+k))switch(x){case 0:switch(2*p+3*l.charCodeAt(_+1)){case 235:x=47;break;case 220:N=_,x=42}break;case 42:47===p&&42===T&&N+2!==_&&(33===l.charCodeAt(N+2)&&(Z+=l.substring(N,_+1)),g="",x=0)}}0===x&&(X+=g)}A=T,T=p,_++}if(0<(N=Z.length)){if(D=i,0<W&&void 0!==(b=a(2,Z,D,e,P,$,N,c,f,c))&&0===(Z=b).length)return V+Z+U;if(Z=D.join(",")+"{"+Z+"}",0!=R*C){switch(2!==R||o(Z,2)||(C=0),C){case 111:Z=Z.replace(y,":-moz-$1")+Z;break;case 112:Z=Z.replace(v,"::-webkit-input-$1")+Z.replace(v,"::-moz-$1")+Z.replace(v,":-ms-input-$1")+Z}C=0}}return V+Z+U}function n(e,t,n){var r=t.trim().split(m);t=r;var o=r.length,s=e.length;switch(s){case 0:case 1:var a=0;for(e=0===s?"":e[0]+" ";a<o;++a)t[a]=i(e,t[a],n).trim();break;default:var l=a=0;for(t=[];a<o;++a)for(var c=0;c<s;++c)t[l++]=i(e[c]+" ",r[a],n).trim()}return t}function i(e,t,n){var i=t.charCodeAt(0);switch(33>i&&(i=(t=t.trim()).charCodeAt(0)),i){case 38:return t.replace(g,"$1"+e.trim());case 58:return e.trim()+t.replace(g,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,i){var s=e+";",a=2*t+3*n+4*i;if(944===a){e=s.indexOf(":",9)+1;var l=s.substring(e,s.length-1).trim();return l=s.substring(0,e).trim()+l+";",1===R||2===R&&o(l,1)?"-webkit-"+l+l:l}if(0===R||2===R&&!o(s,1))return s;switch(a){case 1015:return 97===s.charCodeAt(10)?"-webkit-"+s+s:s;case 951:return 116===s.charCodeAt(3)?"-webkit-"+s+s:s;case 963:return 110===s.charCodeAt(5)?"-webkit-"+s+s:s;case 1009:if(100!==s.charCodeAt(4))break;case 969:case 942:return"-webkit-"+s+s;case 978:return"-webkit-"+s+"-moz-"+s+s;case 1019:case 983:return"-webkit-"+s+"-moz-"+s+"-ms-"+s+s;case 883:if(45===s.charCodeAt(8))return"-webkit-"+s+s;if(0<s.indexOf("image-set(",11))return s.replace(T,"$1-webkit-$2")+s;break;case 932:if(45===s.charCodeAt(4))switch(s.charCodeAt(5)){case 103:return"-webkit-box-"+s.replace("-grow","")+"-webkit-"+s+"-ms-"+s.replace("grow","positive")+s;case 115:return"-webkit-"+s+"-ms-"+s.replace("shrink","negative")+s;case 98:return"-webkit-"+s+"-ms-"+s.replace("basis","preferred-size")+s}return"-webkit-"+s+"-ms-"+s+s;case 964:return"-webkit-"+s+"-ms-flex-"+s+s;case 1023:if(99!==s.charCodeAt(8))break;return"-webkit-box-pack"+(l=s.substring(s.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+s+"-ms-flex-pack"+l+s;case 1005:return d.test(s)?s.replace(f,":-webkit-")+s.replace(f,":-moz-")+s:s;case 1e3:switch(t=(l=s.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=s.replace(b,"tb");break;case 232:l=s.replace(b,"tb-rl");break;case 220:l=s.replace(b,"lr");break;default:return s}return"-webkit-"+s+"-ms-"+l+s;case 1017:if(-1===s.indexOf("sticky",9))break;case 975:switch(t=(s=e).length-10,a=(l=(33===s.charCodeAt(t)?s.substring(0,t):s).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:s=s.replace(l,"-webkit-"+l)+";"+s;break;case 207:case 102:s=s.replace(l,"-webkit-"+(102<a?"inline-":"")+"box")+";"+s.replace(l,"-webkit-"+l)+";"+s.replace(l,"-ms-"+l+"box")+";"+s}return s+";";case 938:if(45===s.charCodeAt(5))switch(s.charCodeAt(6)){case 105:return l=s.replace("-items",""),"-webkit-"+s+"-webkit-box-"+l+"-ms-flex-"+l+s;case 115:return"-webkit-"+s+"-ms-flex-item-"+s.replace(x,"")+s;default:return"-webkit-"+s+"-ms-flex-line-pack"+s.replace("align-content","").replace(x,"")+s}break;case 973:case 989:if(45!==s.charCodeAt(3)||122===s.charCodeAt(4))break;case 931:case 953:if(!0===Q.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,i).replace(":fill-available",":stretch"):s.replace(l,"-webkit-"+l)+s.replace(l,"-moz-"+l.replace("fill-",""))+s;break;case 962:if(s="-webkit-"+s+(102===s.charCodeAt(5)?"-ms-"+s:"")+s,211===n+i&&105===s.charCodeAt(13)&&0<s.indexOf("transform",10))return s.substring(0,s.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+s}return s}function o(e,t){var n=e.indexOf(1===t?":":"{"),i=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),M(2!==t?i:i.replace(k,"$1"),n,t)}function s(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(S," or ($1)").substring(4):"("+t+")"}function a(e,t,n,i,r,o,s,a,l,u){for(var h,f=0,d=t;f<W;++f)switch(h=A[f].call(c,e,d,n,i,r,o,s,a,l,u)){case void 0:case!1:case!0:case null:break;default:d=h}if(d!==t)return d}function l(e){return void 0!==(e=e.prefix)&&(M=null,e?"function"!=typeof e?R=1:(R=2,M=e):R=0),l}function c(e,n){var i=e;if(33>i.charCodeAt(0)&&(i=i.trim()),i=[i],0<W){var r=a(-1,n,i,i,P,$,0,0,0,0);void 0!==r&&"string"==typeof r&&(n=r)}var o=t(E,i,n,0,0);return 0<W&&void 0!==(r=a(-2,o,i,i,P,$,o.length,0,0,0))&&(o=r),C=0,$=P=1,o}var u=/^\0+/g,h=/[\0\r\f]/g,f=/: */g,d=/zoo|gra/,p=/([,: ])(transform)/g,m=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,O=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,S=/([\s\S]*?);/g,x=/-self|flex-/g,k=/[^]*?(:[rp][el]a[\w-]+)[^]*/,Q=/stretch|:\s*\w+\-(?:conte|avail)/,T=/([^-])(image-set\()/,$=1,P=1,C=0,R=1,E=[],A=[],W=0,M=null,I=0;return c.use=function e(t){switch(t){case void 0:case null:W=A.length=0;break;default:if("function"==typeof t)A[W++]=t;else if("object"==typeof t)for(var n=0,i=t.length;n<i;++n)e(t[n]);else I=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},l={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},c=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,u=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=(n=e,c.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91)),t[e];var n}}(),h=n(679),f=n.n(h);function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var p=function(e,t){for(var n=[e[0]],i=0,r=t.length;i<r;i+=1)n.push(t[i],e[i+1]);return n},m=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,i.typeOf)(e)},g=Object.freeze([]),O=Object.freeze({});function v(e){return"function"==typeof e}function y(e){return e.displayName||e.name||"Component"}function b(e){return e&&"string"==typeof e.styledComponentId}var w="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",S="5.3.5",x="undefined"!=typeof window&&"HTMLElement"in window,k=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),Q={};function T(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var $=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,i=n.length,r=i;e>=r;)(r<<=1)<0&&T(16,""+e);this.groupSizes=new Uint32Array(r),this.groupSizes.set(n),this.length=r;for(var o=i;o<r;o++)this.groupSizes[o]=0}for(var s=this.indexOfGroup(e+1),a=0,l=t.length;a<l;a++)this.tag.insertRule(s,t[a])&&(this.groupSizes[e]++,s++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),i=n+t;this.groupSizes[e]=0;for(var r=n;r<i;r++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],i=this.indexOfGroup(e),r=i+n,o=i;o<r;o++)t+=this.tag.getRule(o)+"/*!sc*/\n";return t},e}(),P=new Map,C=new Map,R=1,E=function(e){if(P.has(e))return P.get(e);for(;C.has(R);)R++;var t=R++;return P.set(e,t),C.set(t,e),t},A=function(e){return C.get(e)},W=function(e,t){t>=R&&(R=t+1),P.set(e,t),C.set(t,e)},M="style["+w+'][data-styled-version="5.3.5"]',I=new RegExp("^"+w+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),_=function(e,t,n){for(var i,r=n.split(","),o=0,s=r.length;o<s;o++)(i=r[o])&&e.registerName(t,i)},D=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),i=[],r=0,o=n.length;r<o;r++){var s=n[r].trim();if(s){var a=s.match(I);if(a){var l=0|parseInt(a[1],10),c=a[2];0!==l&&(W(c,l),_(e,c,a[3]),e.getTag().insertRules(l,i)),i.length=0}else i.push(s)}}},z=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},N=function(e){var t=document.head,n=e||t,i=document.createElement("style"),r=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var i=t[n];if(i&&1===i.nodeType&&i.hasAttribute(w))return i}}(n),o=void 0!==r?r.nextSibling:null;i.setAttribute(w,"active"),i.setAttribute("data-styled-version","5.3.5");var s=z();return s&&i.setAttribute("nonce",s),n.insertBefore(i,o),i},L=function(){function e(e){var t=this.element=N(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,i=t.length;n<i;n++){var r=t[n];if(r.ownerNode===e)return r}T(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),j=function(){function e(e){var t=this.element=N(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),i=this.nodes[e];return this.element.insertBefore(n,i||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),X=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Z=x,U={isServer:!x,useCSSOMInjection:!k},V=function(){function e(e,t,n){void 0===e&&(e=O),void 0===t&&(t={}),this.options=d({},U,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&x&&Z&&(Z=!1,function(e){for(var t=document.querySelectorAll(M),n=0,i=t.length;n<i;n++){var r=t[n];r&&"active"!==r.getAttribute(w)&&(D(e,r),r.parentNode&&r.parentNode.removeChild(r))}}(this))}e.registerId=function(e){return E(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(d({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,i=t.useCSSOMInjection,r=t.target,e=n?new X(r):i?new L(r):new j(r),new $(e)));var e,t,n,i,r},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(E(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(E(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(E(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,i="",r=0;r<n;r++){var o=A(r);if(void 0!==o){var s=e.names.get(o),a=t.getGroup(r);if(s&&a&&s.size){var l=w+".g"+r+'[id="'+o+'"]',c="";void 0!==s&&s.forEach((function(e){e.length>0&&(c+=e+",")})),i+=""+a+l+'{content:"'+c+'"}/*!sc*/\n'}}}return i}(this)},e}(),B=/(a)(d)/gi,F=function(e){return String.fromCharCode(e+(e>25?39:97))};function G(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=F(t%52)+n;return(F(t%52)+n).replace(B,"$1-$2")}var Y=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},q=function(e){return Y(5381,e)};function H(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(v(n)&&!b(n))return!1}return!0}var J=q("5.3.5"),K=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&H(e),this.componentId=t,this.baseHash=Y(J,t),this.baseStyle=n,V.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var i=this.componentId,r=[];if(this.baseStyle&&r.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(i,this.staticRulesId))r.push(this.staticRulesId);else{var o=ve(this.rules,e,t,n).join(""),s=G(Y(this.baseHash,o)>>>0);if(!t.hasNameForId(i,s)){var a=n(o,"."+s,void 0,i);t.insertRules(i,s,a)}r.push(s),this.staticRulesId=s}else{for(var l=this.rules.length,c=Y(this.baseHash,n.hash),u="",h=0;h<l;h++){var f=this.rules[h];if("string"==typeof f)u+=f;else if(f){var d=ve(f,e,t,n),p=Array.isArray(d)?d.join(""):d;c=Y(c,p+h),u+=p}}if(u){var m=G(c>>>0);if(!t.hasNameForId(i,m)){var g=n(u,"."+m,void 0,i);t.insertRules(i,m,g)}r.push(m)}}return r.join(" ")},e}(),ee=/^\s*\/\/.*$/gm,te=[":","[",".","#"];function ne(e){var t,n,i,r,o=void 0===e?O:e,s=o.options,l=void 0===s?O:s,c=o.plugins,u=void 0===c?g:c,h=new a(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,i,r,o,s,a,l,c,u,h){switch(n){case 1:if(0===u&&64===i.charCodeAt(0))return e(i+";"),"";break;case 2:if(0===c)return i+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(r[0]+i),"";default:return i+(0===h?"/*|*/":"")}case-2:i.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,i,o){return 0===i&&-1!==te.indexOf(o[n.length])||o.match(r)?e:"."+t};function m(e,o,s,a){void 0===a&&(a="&");var l=e.replace(ee,""),c=o&&s?s+" "+o+" { "+l+" }":l;return t=a,n=o,i=new RegExp("\\"+n+"\\b","g"),r=new RegExp("(\\"+n+"\\b){2,}"),h(s||!o?"":o,c)}return h.use([].concat(u,[function(e,t,r){2===e&&r.length&&r[0].lastIndexOf(n)>0&&(r[0]=r[0].replace(i,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||T(15),Y(e,t.name)}),5381).toString():"",m}var ie=r.createContext(),re=ie.Consumer,oe=r.createContext(),se=(oe.Consumer,new V),ae=ne();function le(){return(0,r.useContext)(ie)||se}function ce(){return(0,r.useContext)(oe)||ae}function ue(e){var t=(0,r.useState)(e.stylisPlugins),n=t[0],i=t[1],o=le(),a=(0,r.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,r.useMemo)((function(){return ne({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,r.useEffect)((function(){s()(n,e.stylisPlugins)||i(e.stylisPlugins)}),[e.stylisPlugins]),r.createElement(ie.Provider,{value:a},r.createElement(oe.Provider,{value:l},e.children))}var he=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=ae);var i=n.name+t.hash;e.hasNameForId(n.id,i)||e.insertRules(n.id,i,t(n.rules,i,"@keyframes"))},this.toString=function(){return T(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ae),this.name+e.hash},e}(),fe=/([A-Z])/,de=/([A-Z])/g,pe=/^ms-/,me=function(e){return"-"+e.toLowerCase()};function ge(e){return fe.test(e)?e.replace(de,me).replace(pe,"-ms-"):e}var Oe=function(e){return null==e||!1===e||""===e};function ve(e,t,n,i){if(Array.isArray(e)){for(var r,o=[],s=0,a=e.length;s<a;s+=1)""!==(r=ve(e[s],t,n,i))&&(Array.isArray(r)?o.push.apply(o,r):o.push(r));return o}return Oe(e)?"":b(e)?"."+e.styledComponentId:v(e)?"function"!=typeof(c=e)||c.prototype&&c.prototype.isReactComponent||!t?e:ve(e(t),t,n,i):e instanceof he?n?(e.inject(n,i),e.getName(i)):e:m(e)?function e(t,n){var i,r,o=[];for(var s in t)t.hasOwnProperty(s)&&!Oe(t[s])&&(Array.isArray(t[s])&&t[s].isCss||v(t[s])?o.push(ge(s)+":",t[s],";"):m(t[s])?o.push.apply(o,e(t[s],s)):o.push(ge(s)+": "+(i=s,(null==(r=t[s])||"boolean"==typeof r||""===r?"":"number"!=typeof r||0===r||i in l?String(r).trim():r+"px")+";")));return n?[n+" {"].concat(o,["}"]):o}(e):e.toString();var c}var ye=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function be(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return v(e)||m(e)?ye(ve(p(g,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:ye(ve(p(e,n)))}new Set;var we=function(e,t,n){return void 0===n&&(n=O),e.theme!==n.theme&&e.theme||t||n.theme},Se=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,xe=/(^-|-$)/g;function ke(e){return e.replace(Se,"-").replace(xe,"")}var Qe=function(e){return G(q(e)>>>0)};function Te(e){return"string"==typeof e&&!0}var $e=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Pe=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Ce(e,t,n){var i=e[n];$e(t)&&$e(i)?Re(i,t):e[n]=t}function Re(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];for(var r=0,o=n;r<o.length;r++){var s=o[r];if($e(s))for(var a in s)Pe(a)&&Ce(e,s[a],a)}return e}var Ee=r.createContext(),Ae=Ee.Consumer;function We(e){var t=(0,r.useContext)(Ee),n=(0,r.useMemo)((function(){return function(e,t){return e?v(e)?e(t):Array.isArray(e)||"object"!=typeof e?T(8):t?d({},t,{},e):e:T(14)}(e.theme,t)}),[e.theme,t]);return e.children?r.createElement(Ee.Provider,{value:n},e.children):null}var Me={};function Ie(e,t,n){var i=b(e),o=!Te(e),s=t.attrs,a=void 0===s?g:s,l=t.componentId,c=void 0===l?function(e,t){var n="string"!=typeof e?"sc":ke(e);Me[n]=(Me[n]||0)+1;var i=n+"-"+Qe("5.3.5"+n+Me[n]);return t?t+"-"+i:i}(t.displayName,t.parentComponentId):l,h=t.displayName,p=void 0===h?function(e){return Te(e)?"styled."+e:"Styled("+y(e)+")"}(e):h,m=t.displayName&&t.componentId?ke(t.displayName)+"-"+t.componentId:t.componentId||c,w=i&&e.attrs?Array.prototype.concat(e.attrs,a).filter(Boolean):a,S=t.shouldForwardProp;i&&e.shouldForwardProp&&(S=t.shouldForwardProp?function(n,i,r){return e.shouldForwardProp(n,i,r)&&t.shouldForwardProp(n,i,r)}:e.shouldForwardProp);var x,k=new K(n,m,i?e.componentStyle:void 0),Q=k.isStatic&&0===a.length,T=function(e,t){return function(e,t,n,i){var o=e.attrs,s=e.componentStyle,a=e.defaultProps,l=e.foldedComponentIds,c=e.shouldForwardProp,h=e.styledComponentId,f=e.target,p=function(e,t,n){void 0===e&&(e=O);var i=d({},t,{theme:e}),r={};return n.forEach((function(e){var t,n,o,s=e;for(t in v(s)&&(s=s(i)),s)i[t]=r[t]="className"===t?(n=r[t],o=s[t],n&&o?n+" "+o:n||o):s[t]})),[i,r]}(we(t,(0,r.useContext)(Ee),a)||O,t,o),m=p[0],g=p[1],y=function(e,t,n,i){var r=le(),o=ce();return t?e.generateAndInjectStyles(O,r,o):e.generateAndInjectStyles(n,r,o)}(s,i,m),b=n,w=g.$as||t.$as||g.as||t.as||f,S=Te(w),x=g!==t?d({},t,{},g):t,k={};for(var Q in x)"$"!==Q[0]&&"as"!==Q&&("forwardedAs"===Q?k.as=x[Q]:(c?c(Q,u,w):!S||u(Q))&&(k[Q]=x[Q]));return t.style&&g.style!==t.style&&(k.style=d({},t.style,{},g.style)),k.className=Array.prototype.concat(l,h,y!==h?y:null,t.className,g.className).filter(Boolean).join(" "),k.ref=b,(0,r.createElement)(w,k)}(x,e,t,Q)};return T.displayName=p,(x=r.forwardRef(T)).attrs=w,x.componentStyle=k,x.displayName=p,x.shouldForwardProp=S,x.foldedComponentIds=i?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):g,x.styledComponentId=m,x.target=i?e.target:e,x.withComponent=function(e){var i=t.componentId,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(t,["componentId"]),o=i&&i+"-"+(Te(e)?e:ke(y(e)));return Ie(e,d({},r,{attrs:w,componentId:o}),n)},Object.defineProperty(x,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=i?Re({},e.defaultProps,t):t}}),x.toString=function(){return"."+x.styledComponentId},o&&f()(x,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),x}var _e=function(e){return function e(t,n,r){if(void 0===r&&(r=O),!(0,i.isValidElementType)(n))return T(1,String(n));var o=function(){return t(n,r,be.apply(void 0,arguments))};return o.withConfig=function(i){return e(t,n,d({},r,{},i))},o.attrs=function(i){return e(t,n,d({},r,{attrs:Array.prototype.concat(r.attrs,i).filter(Boolean)}))},o}(Ie,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){_e[e]=_e(e)}));var De=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=H(e),V.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,i){var r=i(ve(this.rules,t,n,i).join(""),""),o=this.componentId+e;n.insertRules(o,o,r)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,i){e>2&&V.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,i)},e}();function ze(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var o=be.apply(void 0,[e].concat(n)),s="sc-global-"+Qe(JSON.stringify(o)),a=new De(o,s);function l(e){var t=le(),n=ce(),i=(0,r.useContext)(Ee),o=(0,r.useRef)(t.allocateGSInstance(s)).current;return t.server&&c(o,e,t,i,n),(0,r.useLayoutEffect)((function(){if(!t.server)return c(o,e,t,i,n),function(){return a.removeStyles(o,t)}}),[o,e,t,i,n]),null}function c(e,t,n,i,r){if(a.isStatic)a.renderStyles(e,Q,n,r);else{var o=d({},t,{theme:we(t,i,l.defaultProps)});a.renderStyles(e,o,n,r)}}return r.memo(l)}function Ne(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var r=be.apply(void 0,[e].concat(n)).join(""),o=Qe(r);return new he(o,r)}var Le=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=z();return"<style "+[n&&'nonce="'+n+'"',w+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?T(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return T(2);var n=((t={})[w]="",t["data-styled-version"]="5.3.5",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),i=z();return i&&(n.nonce=i),[r.createElement("style",d({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new V({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?T(2):r.createElement(ue,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return T(3)},e}(),je=function(e){var t=r.forwardRef((function(t,n){var i=(0,r.useContext)(Ee),o=e.defaultProps,s=we(t,i,o);return r.createElement(e,d({},t,{theme:s,ref:n}))}));return f()(t,e),t.displayName="WithTheme("+y(e)+")",t},Xe=function(){return(0,r.useContext)(Ee)},Ze={StyleSheet:V,masterSheet:se},Ue=_e},957:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t},s=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const l=o(n(294)),c=a(n(804)),u=n(973),h=n(814),f=n(463),d=n(503),p=c.default.div`
  display: flex;
  width: 100%;
`,m=c.default.div`
  display: flex;
  flex-direction: row;
  width: 100%;
`,g=c.default.div`
  display: flex;
  flex-direction: column;
  width: 50%;
  height: 98vh;
`,O=c.default.div`
  height: 50%;
  border: 1px solid black;
  border-radius: 5px;
  margin: 0 0 15px 0;
  padding: 10px 0;
`,v=c.default.div`
  font-size: larger;
  font-weight: bold;
  text-align: center;
`,y=c.default.div`
  border: 4px dashed gray;
  border-radius: 5px;
  margin-left: 10px;
  height: 100%;
`;t.App=()=>{const[e,t]=(0,l.useState)(""),[n]=(0,l.useState)((0,d.parseParams)());return n.token?((0,l.useEffect)((()=>{s(void 0,void 0,void 0,(function*(){const e=yield(0,f.getOnfidoToken)(n.token);t(e)})).catch(console.error)}),[]),l.default.createElement(p,null,l.default.createElement(m,null,l.default.createElement(g,null,l.default.createElement(O,null,l.default.createElement(v,null,"Steps selection (Will be added soon)")),l.default.createElement(O,null,l.default.createElement(v,null,"SDK init code"),l.default.createElement(u.Editor,{onClick:t=>{t=t.replace("TOKEN_HERE",e),(0,h.createIFrame)(n,t)}}))),l.default.createElement(g,null,l.default.createElement(y,{id:"iframe-container"}))))):l.default.createElement(p,null,"Please set the onfido sdk ?token= parameter in the URL")}},973:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Editor=void 0;const a=o(n(294)),l=n(91),c=n(956),u=s(n(804)),h=n(40),f=n(642),d=n(561),p=u.default.div`
  display: flex;
  flex-direction: column;
  height: 97%;
  justify-content: space-between;
  padding: 5px 10px;
`,m=u.default.button`
  background-color: #4caf50; /* Green */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  border-radius: 5px;

  &:hover {
    cursor: pointer;
    background-color: #8caf50; /* Green */
    color: gray;
  }
`;t.Editor=({onClick:e})=>{const t=(0,a.useRef)(null),n=(0,a.useRef)(null);return(0,a.useEffect)((()=>{n.current=new l.EditorView({state:h.EditorState.create({doc:"Onfido.init({\n  useModal: false,\n  token: 'TOKEN_HERE', // don't set this, it will be set for you\n  useMemoryHistory: true, // fix for iframe issue, necessary for now\n  onComplete: function (data) {\n    // callback for when everything is complete\n    console.log('everything is complete')\n  },\n  steps: ['welcome', 'document', 'face', 'complete'],\n})",extensions:[l.basicSetup,(0,c.javascript)(),f.keymap.of(d.defaultKeymap)]}),parent:t.current})}),[t]),a.default.createElement(p,null,a.default.createElement("div",{ref:t}),a.default.createElement(m,{onClick:()=>{const t=n.current.state.doc.toJSON().join("\n").trimEnd();e(t)}},"RUN"))}},814:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createIFrame=void 0,t.createIFrame=(e,t)=>{const n=document.querySelector("#iframe-container");for(;n.childNodes.length;)n.childNodes[0].remove();const i=document.createElement("iframe");i.setAttribute("width","100%"),i.setAttribute("height","100%"),i.setAttribute("style","height: 98vh; border-width: inherit; border-style: none;"),i.setAttribute("allow","camera *;microphone *"),i.referrerPolicy="no-referrer",i.src="",n.appendChild(i);const r=i.contentDocument,o=r.createElement("div");o.id="onfido-mount",r.body.appendChild(o);const s=r.createElement("link");s.rel="stylesheet",s.href=`${e.basePath}/style.css`;const a=r.createElement("script");a.src=`${e.basePath}/onfido.min.js`,a.onload=()=>{const e=r.createElement("script");e.text=t,r.head.appendChild(e)},r.head.appendChild(s),r.head.appendChild(a)}},463:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getOnfidoToken=void 0,t.getOnfidoToken=e=>n(void 0,void 0,void 0,(function*(){var t=new Request("https://token-factory.onfido.com/sdk_token?");t.headers.append("Authorization","BASIC "+e);const n=yield fetch(t);return(yield n.json()).message}))},629:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(294)),o=n(745),s=n(804),a=n(957),l=s.createGlobalStyle`
  *, *:before, *:after {
    box-sizing: border-box;
  }
`,c=document.getElementById("root");(0,o.createRoot)(c).render(r.default.createElement(r.default.Fragment,null,r.default.createElement(l,null),r.default.createElement(a.App,null)))},503:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseParams=void 0,t.parseParams=()=>{const e=new URL(window.location.href).searchParams;return{token:(e.get("token")||"").toUpperCase(),basePath:e.get("basePath")||"https://assets.onfido.com/web-sdk-releases/8.1.0"}}},526:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(40),r=n(642),o=n(729);class s{constructor(e,t,n){this.state=e,this.pos=t,this.explicit=n,this.abortListeners=[]}tokenBefore(e){let t=o.syntaxTree(this.state).resolveInner(this.pos,-1);for(;t&&e.indexOf(t.name)<0;)t=t.parent;return t?{from:t.from,to:this.pos,text:this.state.sliceDoc(t.from,this.pos),type:t.type}:null}matchBefore(e){let t=this.state.doc.lineAt(this.pos),n=Math.max(t.from,this.pos-250),i=t.text.slice(n-t.from,this.pos-t.from),r=i.search(h(e,!1));return r<0?null:{from:n+r,to:this.pos,text:i.slice(r)}}get aborted(){return null==this.abortListeners}addEventListener(e,t){"abort"==e&&this.abortListeners&&this.abortListeners.push(t)}}function a(e){let t=Object.keys(e).join(""),n=/\w/.test(t);return n&&(t=t.replace(/\w/g,"")),`[${n?"\\w":""}${t.replace(/[^\w\s]/g,"\\$&")}]`}function l(e){let t=e.map((e=>"string"==typeof e?{label:e}:e)),[n,i]=t.every((e=>/^\w+$/.test(e.label)))?[/\w*$/,/\w+$/]:function(e){let t=Object.create(null),n=Object.create(null);for(let{label:i}of e){t[i[0]]=!0;for(let e=1;e<i.length;e++)n[i[e]]=!0}let i=a(t)+a(n)+"*$";return[new RegExp("^"+i),new RegExp(i)]}(t);return e=>{let r=e.matchBefore(i);return r||e.explicit?{from:r?r.from:e.pos,options:t,validFor:n}:null}}class c{constructor(e,t,n){this.completion=e,this.source=t,this.match=n}}function u(e){return e.selection.main.head}function h(e,t){var n;let{source:i}=e,r=t&&"^"!=i[0],o="$"!=i[i.length-1];return r||o?new RegExp(`${r?"^":""}(?:${i})${o?"$":""}`,null!==(n=e.flags)&&void 0!==n?n:e.ignoreCase?"i":""):e}const f=i.Annotation.define();function d(e,t,n,r){return Object.assign(Object.assign({},e.changeByRange((o=>{if(o==e.selection.main)return{changes:{from:n,to:r,insert:t},range:i.EditorSelection.cursor(n+t.length)};let s=r-n;return!o.empty||s&&e.sliceDoc(o.from-s,o.from)!=e.sliceDoc(n,r)?{range:o}:{changes:{from:o.from-s,to:o.from,insert:t},range:i.EditorSelection.cursor(o.from-s+t.length)}}))),{userEvent:"input.complete"})}function p(e,t){const n=t.completion.apply||t.completion.label;let i=t.source;"string"==typeof n?e.dispatch(d(e.state,n,i.from,i.to)):n(e,t.completion,i.from,i.to)}const m=new WeakMap;function g(e){if(!Array.isArray(e))return e;let t=m.get(e);return t||m.set(e,t=l(e)),t}class O{constructor(e){this.pattern=e,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[];for(let t=0;t<e.length;){let n=i.codePointAt(e,t),r=i.codePointSize(n);this.chars.push(n);let o=e.slice(t,t+r),s=o.toUpperCase();this.folded.push(i.codePointAt(s==o?o.toLowerCase():s,0)),t+=r}this.astral=e.length!=this.chars.length}match(e){if(0==this.pattern.length)return[0];if(e.length<this.pattern.length)return null;let{chars:t,folded:n,any:r,precise:o,byWord:s}=this;if(1==t.length){let r=i.codePointAt(e,0);return r==t[0]?[0,0,i.codePointSize(r)]:r==n[0]?[-200,0,i.codePointSize(r)]:null}let a=e.indexOf(this.pattern);if(0==a)return[0,0,this.pattern.length];let l=t.length,c=0;if(a<0){for(let o=0,s=Math.min(e.length,200);o<s&&c<l;){let s=i.codePointAt(e,o);s!=t[c]&&s!=n[c]||(r[c++]=o),o+=i.codePointSize(s)}if(c<l)return null}let u=0,h=0,f=!1,d=0,p=-1,m=-1,g=/[a-z]/.test(e),O=!0;for(let r=0,c=Math.min(e.length,200),v=0;r<c&&h<l;){let c=i.codePointAt(e,r);a<0&&(u<l&&c==t[u]&&(o[u++]=r),d<l&&(c==t[d]||c==n[d]?(0==d&&(p=r),m=r+1,d++):d=0));let y,b=c<255?c>=48&&c<=57||c>=97&&c<=122?2:c>=65&&c<=90?1:0:(y=i.fromCodePoint(c))!=y.toLowerCase()?1:y!=y.toUpperCase()?2:0;(!r||1==b&&g||0==v&&0!=b)&&(t[h]==c||n[h]==c&&(f=!0)?s[h++]=r:s.length&&(O=!1)),v=b,r+=i.codePointSize(c)}return h==l&&0==s[0]&&O?this.result((f?-200:0)-100,s,e):d==l&&0==p?[-200-e.length,0,m]:a>-1?[-700-e.length,a,a+this.pattern.length]:d==l?[-900-e.length,p,m]:h==l?this.result((f?-200:0)-100-700+(O?0:-1100),s,e):2==t.length?null:this.result((r[0]?-700:0)-200-1100,r,e)}result(e,t,n){let r=[e-n.length],o=1;for(let e of t){let t=e+(this.astral?i.codePointSize(i.codePointAt(n,e)):1);o>1&&r[o-1]==e?r[o-1]=t:(r[o++]=e,r[o++]=t)}return r}}const v=i.Facet.define({combine:e=>i.combineConfig(e,{activateOnTyping:!0,override:null,closeOnBlur:!0,maxRenderedOptions:100,defaultKeymap:!0,optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[]},{defaultKeymap:(e,t)=>e&&t,closeOnBlur:(e,t)=>e&&t,icons:(e,t)=>e&&t,optionClass:(e,t)=>n=>function(e,t){return e?t?e+" "+t:e:t}(e(n),t(n)),addToOptions:(e,t)=>e.concat(t)})});function y(e,t,n){if(e<=n)return{from:0,to:e};if(t<=e>>1){let e=Math.floor(t/n);return{from:e*n,to:(e+1)*n}}let i=Math.floor((e-t)/n);return{from:e-(i+1)*n,to:e-i*n}}class b{constructor(e,t){this.view=e,this.stateField=t,this.info=null,this.placeInfo={read:()=>this.measureInfo(),write:e=>this.positionInfo(e),key:this};let n=e.state.field(t),{options:i,selected:r}=n.open,o=e.state.facet(v);this.optionContent=function(e){let t=e.addToOptions.slice();return e.icons&&t.push({render(e){let t=document.createElement("div");return t.classList.add("cm-completionIcon"),e.type&&t.classList.add(...e.type.split(/\s+/g).map((e=>"cm-completionIcon-"+e))),t.setAttribute("aria-hidden","true"),t},position:20}),t.push({render(e,t,n){let i=document.createElement("span");i.className="cm-completionLabel";let{label:r}=e,o=0;for(let e=1;e<n.length;){let t=n[e++],s=n[e++];t>o&&i.appendChild(document.createTextNode(r.slice(o,t)));let a=i.appendChild(document.createElement("span"));a.appendChild(document.createTextNode(r.slice(t,s))),a.className="cm-completionMatchedText",o=s}return o<r.length&&i.appendChild(document.createTextNode(r.slice(o))),i},position:50},{render(e){if(!e.detail)return null;let t=document.createElement("span");return t.className="cm-completionDetail",t.textContent=e.detail,t},position:80}),t.sort(((e,t)=>e.position-t.position)).map((e=>e.render))}(o),this.optionClass=o.optionClass,this.range=y(i.length,r,o.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.dom.addEventListener("mousedown",(t=>{for(let n,r=t.target;r&&r!=this.dom;r=r.parentNode)if("LI"==r.nodeName&&(n=/-(\d+)$/.exec(r.id))&&+n[1]<i.length)return p(e,i[+n[1]]),void t.preventDefault()})),this.list=this.dom.appendChild(this.createListBox(i,n.id,this.range)),this.list.addEventListener("scroll",(()=>{this.info&&this.view.requestMeasure(this.placeInfo)}))}mount(){this.updateSel()}update(e){e.state.field(this.stateField)!=e.startState.field(this.stateField)&&this.updateSel()}positioned(){this.info&&this.view.requestMeasure(this.placeInfo)}updateSel(){let e=this.view.state.field(this.stateField),t=e.open;if((t.selected<this.range.from||t.selected>=this.range.to)&&(this.range=y(t.options.length,t.selected,this.view.state.facet(v).maxRenderedOptions),this.list.remove(),this.list=this.dom.appendChild(this.createListBox(t.options,e.id,this.range)),this.list.addEventListener("scroll",(()=>{this.info&&this.view.requestMeasure(this.placeInfo)}))),this.updateSelectedOption(t.selected)){this.info&&(this.info.remove(),this.info=null);let{completion:n}=t.options[t.selected],{info:i}=n;if(!i)return;let o="string"==typeof i?document.createTextNode(i):i(n);if(!o)return;"then"in o?o.then((t=>{t&&this.view.state.field(this.stateField,!1)==e&&this.addInfoPane(t)})).catch((e=>r.logException(this.view.state,e,"completion info"))):this.addInfoPane(o)}}addInfoPane(e){let t=this.info=document.createElement("div");t.className="cm-tooltip cm-completionInfo",t.appendChild(e),this.dom.appendChild(t),this.view.requestMeasure(this.placeInfo)}updateSelectedOption(e){let t=null;for(let n=this.list.firstChild,i=this.range.from;n;n=n.nextSibling,i++)i==e?n.hasAttribute("aria-selected")||(n.setAttribute("aria-selected","true"),t=n):n.hasAttribute("aria-selected")&&n.removeAttribute("aria-selected");return t&&function(e,t){let n=e.getBoundingClientRect(),i=t.getBoundingClientRect();i.top<n.top?e.scrollTop-=n.top-i.top:i.bottom>n.bottom&&(e.scrollTop+=i.bottom-n.bottom)}(this.list,t),t}measureInfo(){let e=this.dom.querySelector("[aria-selected]");if(!e||!this.info)return null;let t=this.dom.getBoundingClientRect(),n=this.info.getBoundingClientRect(),i=e.getBoundingClientRect();if(i.top>Math.min(innerHeight,t.bottom)-10||i.bottom<Math.max(0,t.top)+10)return null;let o=Math.max(0,Math.min(i.top,innerHeight-n.height))-t.top,s=this.view.textDirection==r.Direction.RTL,a=t.left,l=innerWidth-t.right;return s&&a<Math.min(n.width,l)?s=!1:!s&&l<Math.min(n.width,a)&&(s=!0),{top:o,left:s}}positionInfo(e){this.info&&(this.info.style.top=(e?e.top:-1e6)+"px",e&&(this.info.classList.toggle("cm-completionInfo-left",e.left),this.info.classList.toggle("cm-completionInfo-right",!e.left)))}createListBox(e,t,n){const i=document.createElement("ul");i.id=t,i.setAttribute("role","listbox"),i.setAttribute("aria-expanded","true"),i.setAttribute("aria-label",this.view.state.phrase("Completions"));for(let r=n.from;r<n.to;r++){let{completion:n,match:o}=e[r];const s=i.appendChild(document.createElement("li"));s.id=t+"-"+r,s.setAttribute("role","option");let a=this.optionClass(n);a&&(s.className=a);for(let e of this.optionContent){let t=e(n,this.view.state,o);t&&s.appendChild(t)}}return n.from&&i.classList.add("cm-completionListIncompleteTop"),n.to<e.length&&i.classList.add("cm-completionListIncompleteBottom"),i}}function w(e){return 100*(e.boost||0)+(e.apply?10:0)+(e.info?5:0)+(e.type?1:0)}class S{constructor(e,t,n,i,r){this.options=e,this.attrs=t,this.tooltip=n,this.timestamp=i,this.selected=r}setSelected(e,t){return e==this.selected||e>=this.options.length?this:new S(this.options,Q(t,e),this.tooltip,this.timestamp,e)}static build(e,t,n,i,r){let o=function(e,t){let n=[],i=0;for(let r of e)if(r.hasResult())if(!1===r.result.filter){let e=r.result.getMatch;for(let t of r.result.options){let o=[1e9-i++];if(e)for(let n of e(t))o.push(n);n.push(new c(t,r,o))}}else{let e,i=new O(t.sliceDoc(r.from,r.to));for(let t of r.result.options)(e=i.match(t.label))&&(null!=t.boost&&(e[0]+=t.boost),n.push(new c(t,r,e)))}let r=[],o=null;for(let e of n.sort($))!o||o.label!=e.completion.label||o.detail!=e.completion.detail||null!=o.type&&null!=e.completion.type&&o.type!=e.completion.type||o.apply!=e.completion.apply?r.push(e):w(e.completion)>w(o)&&(r[r.length-1]=e),o=e.completion;return r}(e,t);if(!o.length)return null;let s=0;if(i&&i.selected){let e=i.options[i.selected].completion;for(let t=0;t<o.length;t++)if(o[t].completion==e){s=t;break}}return new S(o,Q(n,s),{pos:e.reduce(((e,t)=>t.hasResult()?Math.min(e,t.from):e),1e8),create:(a=I,e=>new b(e,a)),above:r.aboveCursor},i?i.timestamp:Date.now(),s);var a}map(e){return new S(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:e.mapPos(this.tooltip.pos)}),this.timestamp,this.selected)}}class x{constructor(e,t,n){this.active=e,this.id=t,this.open=n}static start(){return new x(T,"cm-ac-"+Math.floor(2e6*Math.random()).toString(36),null)}update(e){let{state:t}=e,n=t.facet(v),i=(n.override||t.languageDataAt("autocomplete",u(t)).map(g)).map((t=>(this.active.find((e=>e.source==t))||new C(t,this.active.some((e=>0!=e.state))?1:0)).update(e,n)));i.length==this.active.length&&i.every(((e,t)=>e==this.active[t]))&&(i=this.active);let r=e.selection||i.some((t=>t.hasResult()&&e.changes.touchesRange(t.from,t.to)))||!function(e,t){if(e==t)return!0;for(let n=0,i=0;;){for(;n<e.length&&!e[n].hasResult;)n++;for(;i<t.length&&!t[i].hasResult;)i++;let r=n==e.length,o=i==t.length;if(r||o)return r==o;if(e[n++].result!=t[i++].result)return!1}}(i,this.active)?S.build(i,t,this.id,this.open,n):this.open&&e.docChanged?this.open.map(e.changes):this.open;!r&&i.every((e=>1!=e.state))&&i.some((e=>e.hasResult()))&&(i=i.map((e=>e.hasResult()?new C(e.source,0):e)));for(let t of e.effects)t.is(M)&&(r=r&&r.setSelected(t.value,this.id));return i==this.active&&r==this.open?this:new x(i,this.id,r)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:k}}const k={"aria-autocomplete":"list"};function Q(e,t){return{"aria-autocomplete":"list","aria-haspopup":"listbox","aria-activedescendant":e+"-"+t,"aria-controls":e}}const T=[];function $(e,t){return t.match[0]-e.match[0]||e.completion.label.localeCompare(t.completion.label)}function P(e){return e.isUserEvent("input.type")?"input":e.isUserEvent("delete.backward")?"delete":null}class C{constructor(e,t,n=-1){this.source=e,this.state=t,this.explicitPos=n}hasResult(){return!1}update(e,t){let n=P(e),i=this;n?i=i.handleUserEvent(e,n,t):e.docChanged?i=i.handleChange(e):e.selection&&0!=i.state&&(i=new C(i.source,0));for(let t of e.effects)if(t.is(E))i=new C(i.source,1,t.value?u(e.state):-1);else if(t.is(A))i=new C(i.source,0);else if(t.is(W))for(let e of t.value)e.source==i.source&&(i=e);return i}handleUserEvent(e,t,n){return"delete"!=t&&n.activateOnTyping?new C(this.source,1):this.map(e.changes)}handleChange(e){return e.changes.touchesRange(u(e.startState))?new C(this.source,0):this.map(e.changes)}map(e){return e.empty||this.explicitPos<0?this:new C(this.source,this.state,e.mapPos(this.explicitPos))}}class R extends C{constructor(e,t,n,i,r){super(e,2,t),this.result=n,this.from=i,this.to=r}hasResult(){return!0}handleUserEvent(e,t,n){var i;let r=e.changes.mapPos(this.from),o=e.changes.mapPos(this.to,1),a=u(e.state);if((this.explicitPos<0?a<=r:a<this.from)||a>o||"delete"==t&&u(e.startState)==this.from)return new C(this.source,"input"==t&&n.activateOnTyping?1:0);let l,c=this.explicitPos<0?-1:e.changes.mapPos(this.explicitPos);return function(e,t,n,i){if(!e)return!1;let r=t.sliceDoc(n,i);return"function"==typeof e?e(r,n,i,t):h(e,!0).test(r)}(this.result.validFor,e.state,r,o)?new R(this.source,c,this.result,r,o):this.result.update&&(l=this.result.update(this.result,r,o,new s(e.state,a,c>=0)))?new R(this.source,c,l,l.from,null!==(i=l.to)&&void 0!==i?i:u(e.state)):new C(this.source,1,c)}handleChange(e){return e.changes.touchesRange(this.from,this.to)?new C(this.source,0):this.map(e.changes)}map(e){return e.empty?this:new R(this.source,this.explicitPos<0?-1:e.mapPos(this.explicitPos),this.result,e.mapPos(this.from),e.mapPos(this.to,1))}}const E=i.StateEffect.define(),A=i.StateEffect.define(),W=i.StateEffect.define({map:(e,t)=>e.map((e=>e.map(t)))}),M=i.StateEffect.define(),I=i.StateField.define({create:()=>x.start(),update:(e,t)=>e.update(t),provide:e=>[r.showTooltip.from(e,(e=>e.tooltip)),r.EditorView.contentAttributes.from(e,(e=>e.attrs))]});function _(e,t="option"){return n=>{let i=n.state.field(I,!1);if(!i||!i.open||Date.now()-i.open.timestamp<75)return!1;let o,s=1;"page"==t&&(o=r.getTooltip(n,i.open.tooltip))&&(s=Math.max(2,Math.floor(o.dom.offsetHeight/o.dom.querySelector("li").offsetHeight)-1));let a=i.open.selected+s*(e?1:-1),{length:l}=i.open.options;return a<0?a="page"==t?0:l-1:a>=l&&(a="page"==t?l-1:0),n.dispatch({effects:M.of(a)}),!0}}const D=e=>{let t=e.state.field(I,!1);return!(e.state.readOnly||!t||!t.open||Date.now()-t.open.timestamp<75||(p(e,t.open.options[t.open.selected]),0))},z=e=>!!e.state.field(I,!1)&&(e.dispatch({effects:E.of(!0)}),!0),N=e=>{let t=e.state.field(I,!1);return!(!t||!t.active.some((e=>0!=e.state))||(e.dispatch({effects:A.of(null)}),0))};class L{constructor(e,t){this.active=e,this.context=t,this.time=Date.now(),this.updates=[],this.done=void 0}}const j=r.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.composing=0;for(let t of e.state.field(I).active)1==t.state&&this.startQuery(t)}update(e){let t=e.state.field(I);if(!e.selectionSet&&!e.docChanged&&e.startState.field(I)==t)return;let n=e.transactions.some((e=>(e.selection||e.docChanged)&&!P(e)));for(let t=0;t<this.running.length;t++){let i=this.running[t];if(n||i.updates.length+e.transactions.length>50&&Date.now()-i.time>1e3){for(let e of i.context.abortListeners)try{e()}catch(e){r.logException(this.view.state,e)}i.context.abortListeners=null,this.running.splice(t--,1)}else i.updates.push(...e.transactions)}if(this.debounceUpdate>-1&&clearTimeout(this.debounceUpdate),this.debounceUpdate=t.active.some((e=>1==e.state&&!this.running.some((t=>t.active.source==e.source))))?setTimeout((()=>this.startUpdate()),50):-1,0!=this.composing)for(let t of e.transactions)"input"==P(t)?this.composing=2:2==this.composing&&t.selection&&(this.composing=3)}startUpdate(){this.debounceUpdate=-1;let{state:e}=this.view,t=e.field(I);for(let e of t.active)1!=e.state||this.running.some((t=>t.active.source==e.source))||this.startQuery(e)}startQuery(e){let{state:t}=this.view,n=u(t),i=new s(t,n,e.explicitPos==n),o=new L(e,i);this.running.push(o),Promise.resolve(e.source(i)).then((e=>{o.context.aborted||(o.done=e||null,this.scheduleAccept())}),(e=>{this.view.dispatch({effects:A.of(null)}),r.logException(this.view.state,e)}))}scheduleAccept(){this.running.every((e=>void 0!==e.done))?this.accept():this.debounceAccept<0&&(this.debounceAccept=setTimeout((()=>this.accept()),50))}accept(){var e;this.debounceAccept>-1&&clearTimeout(this.debounceAccept),this.debounceAccept=-1;let t=[],n=this.view.state.facet(v);for(let i=0;i<this.running.length;i++){let r=this.running[i];if(void 0===r.done)continue;if(this.running.splice(i--,1),r.done){let i=new R(r.active.source,r.active.explicitPos,r.done,r.done.from,null!==(e=r.done.to)&&void 0!==e?e:u(r.updates.length?r.updates[0].startState:this.view.state));for(let e of r.updates)i=i.update(e,n);if(i.hasResult()){t.push(i);continue}}let o=this.view.state.field(I).active.find((e=>e.source==r.active.source));if(o&&1==o.state)if(null==r.done){let e=new C(r.active.source,0);for(let t of r.updates)e=e.update(t,n);1!=e.state&&t.push(e)}else this.startQuery(o)}t.length&&this.view.dispatch({effects:W.of(t)})}},{eventHandlers:{blur(){let e=this.view.state.field(I,!1);e&&e.tooltip&&this.view.state.facet(v).closeOnBlur&&this.view.dispatch({effects:A.of(null)})},compositionstart(){this.composing=1},compositionend(){3==this.composing&&setTimeout((()=>this.view.dispatch({effects:E.of(!1)})),20),this.composing=0}}}),X=r.EditorView.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",listStyle:"none",margin:0,padding:0,"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer",padding:"1px 3px",lineHeight:1.2}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#17c",color:"white"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:'"···"',opacity:.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"300px"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'ƒ'"}},".cm-completionIcon-class":{"&:after":{content:"'○'"}},".cm-completionIcon-interface":{"&:after":{content:"'◌'"}},".cm-completionIcon-variable":{"&:after":{content:"'𝑥'"}},".cm-completionIcon-constant":{"&:after":{content:"'𝐶'"}},".cm-completionIcon-type":{"&:after":{content:"'𝑡'"}},".cm-completionIcon-enum":{"&:after":{content:"'∪'"}},".cm-completionIcon-property":{"&:after":{content:"'□'"}},".cm-completionIcon-keyword":{"&:after":{content:"'🔑︎'"}},".cm-completionIcon-namespace":{"&:after":{content:"'▢'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});class Z{constructor(e,t,n,i){this.field=e,this.line=t,this.from=n,this.to=i}}class U{constructor(e,t,n){this.field=e,this.from=t,this.to=n}map(e){let t=e.mapPos(this.from,-1,i.MapMode.TrackDel),n=e.mapPos(this.to,1,i.MapMode.TrackDel);return null==t||null==n?null:new U(this.field,t,n)}}class V{constructor(e,t){this.lines=e,this.fieldPositions=t}instantiate(e,t){let n=[],i=[t],r=e.doc.lineAt(t),s=/^\s*/.exec(r.text)[0];for(let r of this.lines){if(n.length){let n=s,a=/^\t*/.exec(r)[0].length;for(let t=0;t<a;t++)n+=e.facet(o.indentUnit);i.push(t+n.length-a),r=n+r.slice(a)}n.push(r),t+=r.length+1}let a=this.fieldPositions.map((e=>new U(e.field,i[e.line]+e.from,i[e.line]+e.to)));return{text:n,ranges:a}}static parse(e){let t,n=[],i=[],r=[];for(let o of e.split(/\r\n?|\n/)){for(;t=/[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(o);){let e=t[1]?+t[1]:null,s=t[2]||t[3]||"",a=-1;for(let t=0;t<n.length;t++)(null!=e?n[t].seq==e:s&&n[t].name==s)&&(a=t);if(a<0){let t=0;for(;t<n.length&&(null==e||null!=n[t].seq&&n[t].seq<e);)t++;n.splice(t,0,{seq:e,name:s}),a=t;for(let e of r)e.field>=a&&e.field++}r.push(new Z(a,i.length,t.index,t.index+s.length)),o=o.slice(0,t.index)+s+o.slice(t.index+t[0].length)}for(let e;e=/([$#])\\{/.exec(o);){o=o.slice(0,e.index)+e[1]+"{"+o.slice(e.index+e[0].length);for(let t of r)t.line==i.length&&t.from>e.index&&(t.from--,t.to--)}i.push(o)}return new V(i,r)}}let B=r.Decoration.widget({widget:new class extends r.WidgetType{toDOM(){let e=document.createElement("span");return e.className="cm-snippetFieldPosition",e}ignoreEvent(){return!1}}}),F=r.Decoration.mark({class:"cm-snippetField"});class G{constructor(e,t){this.ranges=e,this.active=t,this.deco=r.Decoration.set(e.map((e=>(e.from==e.to?B:F).range(e.from,e.to))))}map(e){let t=[];for(let n of this.ranges){let i=n.map(e);if(!i)return null;t.push(i)}return new G(t,this.active)}selectionInsideField(e){return e.ranges.every((e=>this.ranges.some((t=>t.field==this.active&&t.from<=e.from&&t.to>=e.to))))}}const Y=i.StateEffect.define({map:(e,t)=>e&&e.map(t)}),q=i.StateEffect.define(),H=i.StateField.define({create:()=>null,update(e,t){for(let n of t.effects){if(n.is(Y))return n.value;if(n.is(q)&&e)return new G(e.ranges,n.value)}return e&&t.docChanged&&(e=e.map(t.changes)),e&&t.selection&&!e.selectionInsideField(t.selection)&&(e=null),e},provide:e=>r.EditorView.decorations.from(e,(e=>e?e.deco:r.Decoration.none))});function J(e,t){return i.EditorSelection.create(e.filter((e=>e.field==t)).map((e=>i.EditorSelection.range(e.from,e.to))))}function K(e){let t=V.parse(e);return(e,n,r,o)=>{let{text:s,ranges:a}=t.instantiate(e.state,r),l={changes:{from:r,to:o,insert:i.Text.of(s)},scrollIntoView:!0};if(a.length&&(l.selection=J(a,0)),a.length>1){let t=new G(a,0),n=l.effects=[Y.of(t)];void 0===e.state.field(H,!1)&&n.push(i.StateEffect.appendConfig.of([H,se,ae,X]))}e.dispatch(e.state.update(l))}}function ee(e){return({state:t,dispatch:n})=>{let i=t.field(H,!1);if(!i||e<0&&0==i.active)return!1;let r=i.active+e,o=e>0&&!i.ranges.some((t=>t.field==r+e));return n(t.update({selection:J(i.ranges,r),effects:Y.of(o?null:new G(i.ranges,r))})),!0}}const te=({state:e,dispatch:t})=>!!e.field(H,!1)&&(t(e.update({effects:Y.of(null)})),!0),ne=ee(1),ie=ee(-1),re=[{key:"Tab",run:ne,shift:ie},{key:"Escape",run:te}],oe=i.Facet.define({combine:e=>e.length?e[0]:re}),se=i.Prec.highest(r.keymap.compute([oe],(e=>e.facet(oe)))),ae=r.EditorView.domEventHandlers({mousedown(e,t){let n,i=t.state.field(H,!1);if(!i||null==(n=t.posAtCoords({x:e.clientX,y:e.clientY})))return!1;let r=i.ranges.find((e=>e.from<=n&&e.to>=n));return!(!r||r.field==i.active||(t.dispatch({selection:J(i.ranges,r.field),effects:Y.of(i.ranges.some((e=>e.field>r.field))?new G(i.ranges,r.field):null)}),0))}});function le(e,t){return new RegExp(t(e.source),e.unicode?"u":"")}const ce=Object.create(null);function ue(e,t,n,i,r){for(let o=e.iterLines(),s=0;!o.next().done;){let e,{value:a}=o;for(t.lastIndex=0;e=t.exec(a);)if(!i[e[0]]&&s+e.index!=r&&(n.push({type:"text",label:e[0]}),i[e[0]]=!0,n.length>=2e3))return;s+=a.length+1}}function he(e,t,n,i,r){let o=e.length>=1e3,s=o&&t.get(e);if(s)return s;let a=[],l=Object.create(null);if(e.children){let o=0;for(let s of e.children){if(s.length>=1e3)for(let e of he(s,t,n,i-o,r-o))l[e.label]||(l[e.label]=!0,a.push(e));else ue(s,n,a,l,r-o);o+=s.length+1}}else ue(e,n,a,l,r);return o&&a.length<2e3&&t.set(e,a),a}const fe={brackets:["(","[","{","'",'"'],before:")]}:;>"},de=i.StateEffect.define({map(e,t){let n=t.mapPos(e,-1,i.MapMode.TrackAfter);return null==n?void 0:n}}),pe=i.StateEffect.define({map:(e,t)=>t.mapPos(e)}),me=new class extends i.RangeValue{};me.startSide=1,me.endSide=-1;const ge=i.StateField.define({create:()=>i.RangeSet.empty,update(e,t){if(t.selection){let n=t.state.doc.lineAt(t.selection.main.head).from,r=t.startState.doc.lineAt(t.startState.selection.main.head).from;n!=t.changes.mapPos(r,-1)&&(e=i.RangeSet.empty)}e=e.map(t.changes);for(let n of t.effects)n.is(de)?e=e.update({add:[me.range(n.value,n.value+1)]}):n.is(pe)&&(e=e.update({filter:e=>e!=n.value}));return e}}),Oe="()[]{}<>";function ve(e){for(let t=0;t<Oe.length;t+=2)if(Oe.charCodeAt(t)==e)return Oe.charAt(t+1);return i.fromCodePoint(e<128?e:e+1)}function ye(e,t){return e.languageDataAt("closeBrackets",t)[0]||fe}const be="object"==typeof navigator&&/Android\b/.test(navigator.userAgent),we=r.EditorView.inputHandler.of(((e,t,n,r)=>{if((be?e.composing:e.compositionStarted)||e.state.readOnly)return!1;let o=e.state.selection.main;if(r.length>2||2==r.length&&1==i.codePointSize(i.codePointAt(r,0))||t!=o.from||n!=o.to)return!1;let s=ke(e.state,r);return!!s&&(e.dispatch(s),!0)})),Se=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let n=ye(e,e.selection.main.head).brackets||fe.brackets,r=null,o=e.changeByRange((t=>{if(t.empty){let r=function(e,t){let n=e.sliceString(t-2,t);return i.codePointSize(i.codePointAt(n,0))==n.length?n:n.slice(1)}(e.doc,t.head);for(let o of n)if(o==r&&Te(e.doc,t.head)==ve(i.codePointAt(o,0)))return{changes:{from:t.head-o.length,to:t.head+o.length},range:i.EditorSelection.cursor(t.head-o.length),userEvent:"delete.backward"}}return{range:r=t}}));return r||t(e.update(o,{scrollIntoView:!0})),!r},xe=[{key:"Backspace",run:Se}];function ke(e,t){let n=ye(e,e.selection.main.head),r=n.brackets||fe.brackets;for(let o of r){let s=ve(i.codePointAt(o,0));if(t==o)return s==o?Ce(e,o,r.indexOf(o+o+o)>-1):$e(e,o,s,n.before||fe.before);if(t==s&&Qe(e,e.selection.main.from))return Pe(e,0,s)}return null}function Qe(e,t){let n=!1;return e.field(ge).between(0,e.doc.length,(e=>{e==t&&(n=!0)})),n}function Te(e,t){let n=e.sliceString(t,t+2);return n.slice(0,i.codePointSize(i.codePointAt(n,0)))}function $e(e,t,n,r){let o=null,s=e.changeByRange((s=>{if(!s.empty)return{changes:[{insert:t,from:s.from},{insert:n,from:s.to}],effects:de.of(s.to+t.length),range:i.EditorSelection.range(s.anchor+t.length,s.head+t.length)};let a=Te(e.doc,s.head);return!a||/\s/.test(a)||r.indexOf(a)>-1?{changes:{insert:t+n,from:s.head},effects:de.of(s.head+t.length),range:i.EditorSelection.cursor(s.head+t.length)}:{range:o=s}}));return o?null:e.update(s,{scrollIntoView:!0,userEvent:"input.type"})}function Pe(e,t,n){let r=null,o=e.selection.ranges.map((t=>t.empty&&Te(e.doc,t.head)==n?i.EditorSelection.cursor(t.head+n.length):r=t));return r?null:e.update({selection:i.EditorSelection.create(o,e.selection.mainIndex),scrollIntoView:!0,effects:e.selection.ranges.map((({from:e})=>pe.of(e)))})}function Ce(e,t,n){let r=null,s=e.changeByRange((s=>{if(!s.empty)return{changes:[{insert:t,from:s.from},{insert:t,from:s.to}],effects:de.of(s.to+t.length),range:i.EditorSelection.range(s.anchor+t.length,s.head+t.length)};let a=s.head,l=Te(e.doc,a);if(l==t){if(Re(e,a))return{changes:{insert:t+t,from:a},effects:de.of(a+t.length),range:i.EditorSelection.cursor(a+t.length)};if(Qe(e,a)){let r=n&&e.sliceDoc(a,a+3*t.length)==t+t+t;return{range:i.EditorSelection.cursor(a+t.length*(r?3:1)),effects:pe.of(a)}}}else{if(n&&e.sliceDoc(a-2*t.length,a)==t+t&&Re(e,a-2*t.length))return{changes:{insert:t+t+t+t,from:a},effects:de.of(a+t.length),range:i.EditorSelection.cursor(a+t.length)};if(e.charCategorizer(a)(l)!=i.CharCategory.Word){let n=e.sliceDoc(a-1,a);if(n!=t&&e.charCategorizer(a)(n)!=i.CharCategory.Word&&!function(e,t,n){let i=o.syntaxTree(e).resolveInner(t,-1);for(let r=0;r<5;r++){if(e.sliceDoc(i.from,i.from+n.length)==n)return!0;let r=i.to==t&&i.parent;if(!r)break;i=r}return!1}(e,a,t))return{changes:{insert:t+t,from:a},effects:de.of(a+t.length),range:i.EditorSelection.cursor(a+t.length)}}}return{range:r=s}}));return r?null:e.update(s,{scrollIntoView:!0,userEvent:"input.type"})}function Re(e,t){let n=o.syntaxTree(e).resolveInner(t+1);return n.parent&&n.from==t}const Ee=[{key:"Ctrl-Space",run:z},{key:"Escape",run:N},{key:"ArrowDown",run:_(!0)},{key:"ArrowUp",run:_(!1)},{key:"PageDown",run:_(!0,"page")},{key:"PageUp",run:_(!1,"page")},{key:"Enter",run:D}],Ae=i.Prec.highest(r.keymap.computeN([v],(e=>e.facet(v).defaultKeymap?[Ee]:[]))),We=new WeakMap;t.CompletionContext=s,t.acceptCompletion=D,t.autocompletion=function(e={}){return[I,v.of(e),j,Ae,X]},t.clearSnippet=te,t.closeBrackets=function(){return[we,ge]},t.closeBracketsKeymap=xe,t.closeCompletion=N,t.completeAnyWord=e=>{let t=e.state.languageDataAt("wordChars",e.pos).join(""),n=function(e){let t=e.replace(/[\\[.+*?(){|^$]/g,"\\$&");try{return new RegExp(`[\\p{Alphabetic}\\p{Number}_${t}]+`,"ug")}catch(e){return new RegExp(`[w${t}]`,"g")}}(t),i=e.matchBefore(le(n,(e=>e+"$")));if(!i&&!e.explicit)return null;let r=i?i.from:e.pos,o=he(e.state.doc,function(e){return ce[e]||(ce[e]=new WeakMap)}(t),n,5e4,r);return{from:r,options:o,validFor:le(n,(e=>"^"+e))}},t.completeFromList=l,t.completionKeymap=Ee,t.completionStatus=function(e){let t=e.field(I,!1);return t&&t.active.some((e=>1==e.state))?"pending":t&&t.active.some((e=>0!=e.state))?"active":null},t.currentCompletions=function(e){var t;let n=null===(t=e.field(I,!1))||void 0===t?void 0:t.open;if(!n)return[];let i=We.get(n.options);return i||We.set(n.options,i=n.options.map((e=>e.completion))),i},t.deleteBracketPair=Se,t.ifIn=function(e,t){return n=>{for(let i=o.syntaxTree(n.state).resolveInner(n.pos,-1);i;i=i.parent)if(e.indexOf(i.name)>-1)return t(n);return null}},t.ifNotIn=function(e,t){return n=>{for(let t=o.syntaxTree(n.state).resolveInner(n.pos,-1);t;t=t.parent)if(e.indexOf(t.name)>-1)return null;return t(n)}},t.insertBracket=ke,t.insertCompletionText=d,t.moveCompletionSelection=_,t.nextSnippetField=ne,t.pickedCompletion=f,t.prevSnippetField=ie,t.selectedCompletion=function(e){var t;let n=null===(t=e.field(I,!1))||void 0===t?void 0:t.open;return n?n.options[n.selected].completion:null},t.selectedCompletionIndex=function(e){var t;let n=null===(t=e.field(I,!1))||void 0===t?void 0:t.open;return n?n.selected:null},t.setSelectedCompletion=function(e){return M.of(e)},t.snippet=K,t.snippetCompletion=function(e,t){return Object.assign(Object.assign({},t),{apply:K(e)})},t.snippetKeymap=oe,t.startCompletion=z},561:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(40),r=n(642),o=n(729),s=n(897);const a=e=>{let t=g(e.state);return t.line?c(e):!!t.block&&m(e)};function l(e,t){return({state:n,dispatch:i})=>{if(n.readOnly)return!1;let r=e(t,n);return!!r&&(i(n.update(r)),!0)}}const c=l(v,0),u=l(v,1),h=l(v,2),f=l(O,0),d=l(O,1),p=l(O,2),m=l(((e,t)=>O(e,t,function(e){let t=[];for(let n of e.selection.ranges){let i=e.doc.lineAt(n.from),r=n.to<=i.to?i:e.doc.lineAt(n.to),o=t.length-1;o>=0&&t[o].to>i.from?t[o].to=r.to:t.push({from:i.from,to:r.to})}return t}(t))),0);function g(e,t=e.selection.main.head){let n=e.languageDataAt("commentTokens",t);return n.length?n[0]:{}}function O(e,t,n=t.selection.ranges){let i=n.map((e=>g(t,e.from).block));if(!i.every((e=>e)))return null;let r=n.map(((e,n)=>function(e,{open:t,close:n},i,r){let o,s,a=e.sliceDoc(i-50,i),l=e.sliceDoc(r,r+50),c=/\s*$/.exec(a)[0].length,u=/^\s*/.exec(l)[0].length,h=a.length-c;if(a.slice(h-t.length,h)==t&&l.slice(u,u+n.length)==n)return{open:{pos:i-c,margin:c&&1},close:{pos:r+u,margin:u&&1}};r-i<=100?o=s=e.sliceDoc(i,r):(o=e.sliceDoc(i,i+50),s=e.sliceDoc(r-50,r));let f=/^\s*/.exec(o)[0].length,d=/\s*$/.exec(s)[0].length,p=s.length-d-n.length;return o.slice(f,f+t.length)==t&&s.slice(p,p+n.length)==n?{open:{pos:i+f+t.length,margin:/\s/.test(o.charAt(f+t.length))?1:0},close:{pos:r-d-n.length,margin:/\s/.test(s.charAt(p-1))?1:0}}:null}(t,i[n],e.from,e.to)));if(2!=e&&!r.every((e=>e)))return{changes:t.changes(n.map(((e,t)=>r[t]?[]:[{from:e.from,insert:i[t].open+" "},{from:e.to,insert:" "+i[t].close}])))};if(1!=e&&r.some((e=>e))){let e=[];for(let t,n=0;n<r.length;n++)if(t=r[n]){let r=i[n],{open:o,close:s}=t;e.push({from:o.pos-r.open.length,to:o.pos+o.margin},{from:s.pos-s.margin,to:s.pos+r.close.length})}return{changes:e}}return null}function v(e,t,n=t.selection.ranges){let i=[],r=-1;for(let{from:e,to:o}of n){let n=i.length,s=1e9;for(let n=e;n<=o;){let a=t.doc.lineAt(n);if(a.from>r&&(e==o||o>a.from)){r=a.from;let e=g(t,n).line;if(!e)continue;let o=/^\s*/.exec(a.text)[0].length,l=o==a.length,c=a.text.slice(o,o+e.length)==e?o:-1;o<a.text.length&&o<s&&(s=o),i.push({line:a,comment:c,token:e,indent:o,empty:l,single:!1})}n=a.to+1}if(s<1e9)for(let e=n;e<i.length;e++)i[e].indent<i[e].line.text.length&&(i[e].indent=s);i.length==n+1&&(i[n].single=!0)}if(2!=e&&i.some((e=>e.comment<0&&(!e.empty||e.single)))){let e=[];for(let{line:t,token:n,indent:r,empty:o,single:s}of i)!s&&o||e.push({from:t.from+r,insert:n+" "});let n=t.changes(e);return{changes:n,selection:t.selection.map(n,1)}}if(1!=e&&i.some((e=>e.comment>=0))){let e=[];for(let{line:t,comment:n,token:r}of i)if(n>=0){let i=t.from+n,o=i+r.length;" "==t.text[o-t.from]&&o++,e.push({from:i,to:o})}return{changes:e}}return null}const y=i.Annotation.define(),b=i.Annotation.define(),w=i.Facet.define(),S=i.Facet.define({combine:e=>i.combineConfig(e,{minDepth:100,newGroupDelay:500},{minDepth:Math.max,newGroupDelay:Math.min})}),x=i.StateField.define({create:()=>X.empty,update(e,t){let n=t.state.facet(S),r=t.annotation(y);if(r){let o=t.docChanged?i.EditorSelection.single(function(e){let t=0;return e.iterChangedRanges(((e,n)=>t=n)),t}(t.changes)):void 0,s=W.fromTransaction(t,o),a=r.side,l=0==a?e.undone:e.done;return l=s?M(l,l.length,n.minDepth,s):D(l,t.startState.selection),new X(0==a?r.rest:l,0==a?l:r.rest)}let o=t.annotation(b);if("full"!=o&&"before"!=o||(e=e.isolate()),!1===t.annotation(i.Transaction.addToHistory))return t.changes.empty?e:e.addMapping(t.changes.desc);let s=W.fromTransaction(t),a=t.annotation(i.Transaction.time),l=t.annotation(i.Transaction.userEvent);return s?e=e.addChanges(s,a,l,n.newGroupDelay,n.minDepth):t.selection&&(e=e.addSelection(t.startState.selection,a,l,n.newGroupDelay)),"full"!=o&&"after"!=o||(e=e.isolate()),e},toJSON:e=>({done:e.done.map((e=>e.toJSON())),undone:e.undone.map((e=>e.toJSON()))}),fromJSON:e=>new X(e.done.map(W.fromJSON),e.undone.map(W.fromJSON))}),k=x;function Q(e,t){return function({state:n,dispatch:i}){if(!t&&n.readOnly)return!1;let r=n.field(x,!1);if(!r)return!1;let o=r.pop(e,n,t);return!!o&&(i(o),!0)}}const T=Q(0,!1),$=Q(1,!1),P=Q(0,!0),C=Q(1,!0);function R(e){return function(t){let n=t.field(x,!1);if(!n)return 0;let i=0==e?n.done:n.undone;return i.length-(i.length&&!i[0].changes?1:0)}}const E=R(0),A=R(1);class W{constructor(e,t,n,i,r){this.changes=e,this.effects=t,this.mapped=n,this.startSelection=i,this.selectionsAfter=r}setSelAfter(e){return new W(this.changes,this.effects,this.mapped,this.startSelection,e)}toJSON(){var e,t,n;return{changes:null===(e=this.changes)||void 0===e?void 0:e.toJSON(),mapped:null===(t=this.mapped)||void 0===t?void 0:t.toJSON(),startSelection:null===(n=this.startSelection)||void 0===n?void 0:n.toJSON(),selectionsAfter:this.selectionsAfter.map((e=>e.toJSON()))}}static fromJSON(e){return new W(e.changes&&i.ChangeSet.fromJSON(e.changes),[],e.mapped&&i.ChangeDesc.fromJSON(e.mapped),e.startSelection&&i.EditorSelection.fromJSON(e.startSelection),e.selectionsAfter.map(i.EditorSelection.fromJSON))}static fromTransaction(e,t){let n=_;for(let t of e.startState.facet(w)){let i=t(e);i.length&&(n=n.concat(i))}return!n.length&&e.changes.empty?null:new W(e.changes.invert(e.startState.doc),n,void 0,t||e.startState.selection,_)}static selection(e){return new W(void 0,_,void 0,void 0,e)}}function M(e,t,n,i){let r=t+1>n+20?t-n-1:0,o=e.slice(r,t);return o.push(i),o}function I(e,t){return e.length?t.length?e.concat(t):e:t}const _=[];function D(e,t){if(e.length){let n=e[e.length-1],i=n.selectionsAfter.slice(Math.max(0,n.selectionsAfter.length-200));return i.length&&i[i.length-1].eq(t)?e:(i.push(t),M(e,e.length-1,1e9,n.setSelAfter(i)))}return[W.selection([t])]}function z(e){let t=e[e.length-1],n=e.slice();return n[e.length-1]=t.setSelAfter(t.selectionsAfter.slice(0,t.selectionsAfter.length-1)),n}function N(e,t){if(!e.length)return e;let n=e.length,i=_;for(;n;){let r=L(e[n-1],t,i);if(r.changes&&!r.changes.empty||r.effects.length){let t=e.slice(0,n);return t[n-1]=r,t}t=r.mapped,n--,i=r.selectionsAfter}return i.length?[W.selection(i)]:_}function L(e,t,n){let r=I(e.selectionsAfter.length?e.selectionsAfter.map((e=>e.map(t))):_,n);if(!e.changes)return W.selection(r);let o=e.changes.map(t),s=t.mapDesc(e.changes,!0),a=e.mapped?e.mapped.composeDesc(s):s;return new W(o,i.StateEffect.mapEffects(e.effects,t),a,e.startSelection.map(s),r)}const j=/^(input\.type|delete)($|\.)/;class X{constructor(e,t,n=0,i){this.done=e,this.undone=t,this.prevTime=n,this.prevUserEvent=i}isolate(){return this.prevTime?new X(this.done,this.undone):this}addChanges(e,t,n,i,r){let o=this.done,s=o[o.length-1];return o=s&&s.changes&&!s.changes.empty&&e.changes&&(!n||j.test(n))&&(!s.selectionsAfter.length&&t-this.prevTime<i&&function(e,t){let n=[],i=!1;return e.iterChangedRanges(((e,t)=>n.push(e,t))),t.iterChangedRanges(((e,t,r,o)=>{for(let e=0;e<n.length;){let t=n[e++],s=n[e++];o>=t&&r<=s&&(i=!0)}})),i}(s.changes,e.changes)||"input.type.compose"==n)?M(o,o.length-1,r,new W(e.changes.compose(s.changes),I(e.effects,s.effects),s.mapped,s.startSelection,_)):M(o,o.length,r,e),new X(o,_,t,n)}addSelection(e,t,n,i){let r=this.done.length?this.done[this.done.length-1].selectionsAfter:_;return r.length>0&&t-this.prevTime<i&&n==this.prevUserEvent&&n&&/^select($|\.)/.test(n)&&(o=r[r.length-1],s=e,o.ranges.length==s.ranges.length&&0===o.ranges.filter(((e,t)=>e.empty!=s.ranges[t].empty)).length)?this:new X(D(this.done,e),this.undone,t,n);var o,s}addMapping(e){return new X(N(this.done,e),N(this.undone,e),this.prevTime,this.prevUserEvent)}pop(e,t,n){let i=0==e?this.done:this.undone;if(0==i.length)return null;let r=i[i.length-1];if(n&&r.selectionsAfter.length)return t.update({selection:r.selectionsAfter[r.selectionsAfter.length-1],annotations:y.of({side:e,rest:z(i)}),userEvent:0==e?"select.undo":"select.redo",scrollIntoView:!0});if(r.changes){let n=1==i.length?_:i.slice(0,i.length-1);return r.mapped&&(n=N(n,r.mapped)),t.update({changes:r.changes,selection:r.startSelection,effects:r.effects,annotations:y.of({side:e,rest:n}),filter:!1,userEvent:0==e?"undo":"redo",scrollIntoView:!0})}return null}}X.empty=new X(_,_);const Z=[{key:"Mod-z",run:T,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:$,preventDefault:!0},{key:"Mod-u",run:P,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:C,preventDefault:!0}];function U(e,t){return i.EditorSelection.create(e.ranges.map(t),e.mainIndex)}function V(e,t){return e.update({selection:t,scrollIntoView:!0,userEvent:"select"})}function B({state:e,dispatch:t},n){let i=U(e.selection,n);return!i.eq(e.selection)&&(t(V(e,i)),!0)}function F(e,t){return i.EditorSelection.cursor(t?e.to:e.from)}function G(e,t){return B(e,(n=>n.empty?e.moveByChar(n,t):F(n,t)))}function Y(e){return e.textDirectionAt(e.state.selection.main.head)==r.Direction.LTR}const q=e=>G(e,!Y(e)),H=e=>G(e,Y(e));function J(e,t){return B(e,(n=>n.empty?e.moveByGroup(n,t):F(n,t)))}const K=e=>J(e,!Y(e)),ee=e=>J(e,Y(e));function te(e,t,n){let r=e.state.charCategorizer(t.from);return e.moveByChar(t,n,(o=>{let s=i.CharCategory.Space,a=t.from,l=!1,c=!1,u=!1,h=t=>{if(l)return!1;a+=n?t.length:-t.length;let o,h=r(t);if(s==i.CharCategory.Space&&(s=h),s!=h)return!1;if(s==i.CharCategory.Word)if(t.toLowerCase()==t){if(!n&&c)return!1;u=!0}else if(u){if(n)return!1;l=!0}else{if(c&&n&&r(o=e.state.sliceDoc(a,a+1))==i.CharCategory.Word&&o.toLowerCase()==o)return!1;c=!0}return!0};return h(o),h}))}function ne(e,t){return B(e,(n=>n.empty?te(e,n,t):F(n,t)))}function ie(e,t,n){if(t.type.prop(n))return!0;let i=t.to-t.from;return i&&(i>2||/[^\s,.;:]/.test(e.sliceDoc(t.from,t.to)))||t.firstChild}function re(e,t,n){let r,a,l=o.syntaxTree(e).resolveInner(t.head),c=n?s.NodeProp.closedBy:s.NodeProp.openedBy;for(let i=t.head;;){let t=n?l.childAfter(i):l.childBefore(i);if(!t)break;ie(e,t,c)?l=t:i=n?t.to:t.from}return a=l.type.prop(c)&&(r=n?o.matchBrackets(e,l.from,1):o.matchBrackets(e,l.to,-1))&&r.matched?n?r.end.to:r.end.from:n?l.to:l.from,i.EditorSelection.cursor(a,n?-1:1)}const oe=e=>B(e,(t=>re(e.state,t,!Y(e)))),se=e=>B(e,(t=>re(e.state,t,Y(e))));function ae(e,t){return B(e,(n=>{if(!n.empty)return F(n,t);let i=e.moveVertically(n,t);return i.head!=n.head?i:e.moveToLineBoundary(n,t)}))}const le=e=>ae(e,!1),ce=e=>ae(e,!0);function ue(e){return Math.max(e.defaultLineHeight,Math.min(e.dom.clientHeight,innerHeight)-5)}function he(e,t){let{state:n}=e,i=U(n.selection,(n=>n.empty?e.moveVertically(n,t,ue(e)):F(n,t)));if(i.eq(n.selection))return!1;let o,s=e.coordsAtPos(n.selection.main.head),a=e.scrollDOM.getBoundingClientRect();return s&&s.top>a.top&&s.bottom<a.bottom&&s.top-a.top<=e.scrollDOM.scrollHeight-e.scrollDOM.scrollTop-e.scrollDOM.clientHeight&&(o=r.EditorView.scrollIntoView(i.main.head,{y:"start",yMargin:s.top-a.top})),e.dispatch(V(n,i),{effects:o}),!0}const fe=e=>he(e,!1),de=e=>he(e,!0);function pe(e,t,n){let r=e.lineBlockAt(t.head),o=e.moveToLineBoundary(t,n);if(o.head==t.head&&o.head!=(n?r.to:r.from)&&(o=e.moveToLineBoundary(t,n,!1)),!n&&o.head==r.from&&r.length){let n=/^\s*/.exec(e.state.sliceDoc(r.from,Math.min(r.from+100,r.to)))[0].length;n&&t.head!=r.from+n&&(o=i.EditorSelection.cursor(r.from+n))}return o}const me=e=>B(e,(t=>pe(e,t,!0))),ge=e=>B(e,(t=>pe(e,t,!1))),Oe=e=>B(e,(t=>i.EditorSelection.cursor(e.lineBlockAt(t.head).from,1))),ve=e=>B(e,(t=>i.EditorSelection.cursor(e.lineBlockAt(t.head).to,-1)));function ye(e,t,n){let r=!1,s=U(e.selection,(t=>{let s=o.matchBrackets(e,t.head,-1)||o.matchBrackets(e,t.head,1)||t.head>0&&o.matchBrackets(e,t.head-1,1)||t.head<e.doc.length&&o.matchBrackets(e,t.head+1,-1);if(!s||!s.end)return t;r=!0;let a=s.start.from==t.head?s.end.to:s.end.from;return n?i.EditorSelection.range(t.anchor,a):i.EditorSelection.cursor(a)}));return!!r&&(t(V(e,s)),!0)}const be=({state:e,dispatch:t})=>ye(e,t,!1);function we(e,t){let n=U(e.state.selection,(e=>{let n=t(e);return i.EditorSelection.range(e.anchor,n.head,n.goalColumn)}));return!n.eq(e.state.selection)&&(e.dispatch(V(e.state,n)),!0)}function Se(e,t){return we(e,(n=>e.moveByChar(n,t)))}const xe=e=>Se(e,!Y(e)),ke=e=>Se(e,Y(e));function Qe(e,t){return we(e,(n=>e.moveByGroup(n,t)))}const Te=e=>Qe(e,!Y(e)),$e=e=>Qe(e,Y(e));function Pe(e,t){return we(e,(n=>te(e,n,t)))}const Ce=e=>we(e,(t=>re(e.state,t,!Y(e)))),Re=e=>we(e,(t=>re(e.state,t,Y(e))));function Ee(e,t){return we(e,(n=>e.moveVertically(n,t)))}const Ae=e=>Ee(e,!1),We=e=>Ee(e,!0);function Me(e,t){return we(e,(n=>e.moveVertically(n,t,ue(e))))}const Ie=e=>Me(e,!1),_e=e=>Me(e,!0),De=e=>we(e,(t=>pe(e,t,!0))),ze=e=>we(e,(t=>pe(e,t,!1))),Ne=e=>we(e,(t=>i.EditorSelection.cursor(e.lineBlockAt(t.head).from))),Le=e=>we(e,(t=>i.EditorSelection.cursor(e.lineBlockAt(t.head).to))),je=({state:e,dispatch:t})=>(t(V(e,{anchor:0})),!0),Xe=({state:e,dispatch:t})=>(t(V(e,{anchor:e.doc.length})),!0),Ze=({state:e,dispatch:t})=>(t(V(e,{anchor:e.selection.main.anchor,head:0})),!0),Ue=({state:e,dispatch:t})=>(t(V(e,{anchor:e.selection.main.anchor,head:e.doc.length})),!0),Ve=({state:e,dispatch:t})=>(t(e.update({selection:{anchor:0,head:e.doc.length},userEvent:"select"})),!0),Be=({state:e,dispatch:t})=>{let n=at(e).map((({from:t,to:n})=>i.EditorSelection.range(t,Math.min(n+1,e.doc.length))));return t(e.update({selection:i.EditorSelection.create(n),userEvent:"select"})),!0},Fe=({state:e,dispatch:t})=>{let n=U(e.selection,(t=>{var n;let r=o.syntaxTree(e).resolveInner(t.head,1);for(;!(r.from<t.from&&r.to>=t.to||r.to>t.to&&r.from<=t.from)&&(null===(n=r.parent)||void 0===n?void 0:n.parent);)r=r.parent;return i.EditorSelection.range(r.to,r.from)}));return t(V(e,n)),!0},Ge=({state:e,dispatch:t})=>{let n=e.selection,r=null;return n.ranges.length>1?r=i.EditorSelection.create([n.main]):n.main.empty||(r=i.EditorSelection.create([i.EditorSelection.cursor(n.main.head)])),!!r&&(t(V(e,r)),!0)};function Ye({state:e,dispatch:t},n){if(e.readOnly)return!1;let r="delete.selection",o=e.changeByRange((e=>{let{from:t,to:o}=e;if(t==o){let e=n(t);e<t?r="delete.backward":e>t&&(r="delete.forward"),t=Math.min(t,e),o=Math.max(o,e)}return t==o?{range:e}:{changes:{from:t,to:o},range:i.EditorSelection.cursor(t)}}));return!o.changes.empty&&(t(e.update(o,{scrollIntoView:!0,userEvent:r})),!0)}function qe(e,t,n){if(e instanceof r.EditorView)for(let i of e.state.facet(r.EditorView.atomicRanges).map((t=>t(e))))i.between(t,t,((e,i)=>{e<t&&i>t&&(t=n?i:e)}));return t}const He=(e,t)=>Ye(e,(n=>{let r,s,{state:a}=e,l=a.doc.lineAt(n);if(!t&&n>l.from&&n<l.from+200&&!/[^ \t]/.test(r=l.text.slice(0,n-l.from))){if("\t"==r[r.length-1])return n-1;let e=i.countColumn(r,a.tabSize)%o.getIndentUnit(a)||o.getIndentUnit(a);for(let t=0;t<e&&" "==r[r.length-1-t];t++)n--;s=n}else s=i.findClusterBreak(l.text,n-l.from,t,t)+l.from,s==n&&l.number!=(t?a.doc.lines:1)&&(s+=t?1:-1);return qe(e,s,t)})),Je=e=>He(e,!1),Ke=e=>He(e,!0),et=(e,t)=>Ye(e,(n=>{let r=n,{state:o}=e,s=o.doc.lineAt(r),a=o.charCategorizer(r);for(let e=null;;){if(r==(t?s.to:s.from)){r==n&&s.number!=(t?o.doc.lines:1)&&(r+=t?1:-1);break}let l=i.findClusterBreak(s.text,r-s.from,t)+s.from,c=s.text.slice(Math.min(r,l)-s.from,Math.max(r,l)-s.from),u=a(c);if(null!=e&&u!=e)break;" "==c&&r==n||(e=u),r=l}return qe(e,r,t)})),tt=e=>et(e,!1),nt=e=>et(e,!0),it=e=>Ye(e,(t=>{let n=e.lineBlockAt(t).to;return qe(e,t<n?n:Math.min(e.state.doc.length,t+1),!0)})),rt=e=>Ye(e,(t=>{let n=e.lineBlockAt(t).from;return qe(e,t>n?n:Math.max(0,t-1),!1)})),ot=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let n=e.changeByRange((e=>({changes:{from:e.from,to:e.to,insert:i.Text.of(["",""])},range:i.EditorSelection.cursor(e.from)})));return t(e.update(n,{scrollIntoView:!0,userEvent:"input"})),!0},st=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let n=e.changeByRange((t=>{if(!t.empty||0==t.from||t.from==e.doc.length)return{range:t};let n=t.from,r=e.doc.lineAt(n),o=n==r.from?n-1:i.findClusterBreak(r.text,n-r.from,!1)+r.from,s=n==r.to?n+1:i.findClusterBreak(r.text,n-r.from,!0)+r.from;return{changes:{from:o,to:s,insert:e.doc.slice(n,s).append(e.doc.slice(o,n))},range:i.EditorSelection.cursor(s)}}));return!n.changes.empty&&(t(e.update(n,{scrollIntoView:!0,userEvent:"move.character"})),!0)};function at(e){let t=[],n=-1;for(let i of e.selection.ranges){let r=e.doc.lineAt(i.from),o=e.doc.lineAt(i.to);if(i.empty||i.to!=o.from||(o=e.doc.lineAt(i.to-1)),n>=r.number){let e=t[t.length-1];e.to=o.to,e.ranges.push(i)}else t.push({from:r.from,to:o.to,ranges:[i]});n=o.number+1}return t}function lt(e,t,n){if(e.readOnly)return!1;let r=[],o=[];for(let t of at(e)){if(n?t.to==e.doc.length:0==t.from)continue;let s=e.doc.lineAt(n?t.to+1:t.from-1),a=s.length+1;if(n){r.push({from:t.to,to:s.to},{from:t.from,insert:s.text+e.lineBreak});for(let n of t.ranges)o.push(i.EditorSelection.range(Math.min(e.doc.length,n.anchor+a),Math.min(e.doc.length,n.head+a)))}else{r.push({from:s.from,to:t.from},{from:t.to,insert:e.lineBreak+s.text});for(let e of t.ranges)o.push(i.EditorSelection.range(e.anchor-a,e.head-a))}}return!!r.length&&(t(e.update({changes:r,scrollIntoView:!0,selection:i.EditorSelection.create(o,e.selection.mainIndex),userEvent:"move.line"})),!0)}const ct=({state:e,dispatch:t})=>lt(e,t,!1),ut=({state:e,dispatch:t})=>lt(e,t,!0);function ht(e,t,n){if(e.readOnly)return!1;let i=[];for(let t of at(e))n?i.push({from:t.from,insert:e.doc.slice(t.from,t.to)+e.lineBreak}):i.push({from:t.to,insert:e.lineBreak+e.doc.slice(t.from,t.to)});return t(e.update({changes:i,scrollIntoView:!0,userEvent:"input.copyline"})),!0}const ft=({state:e,dispatch:t})=>ht(e,t,!1),dt=({state:e,dispatch:t})=>ht(e,t,!0),pt=e=>{if(e.state.readOnly)return!1;let{state:t}=e,n=t.changes(at(t).map((({from:e,to:n})=>(e>0?e--:n<t.doc.length&&n++,{from:e,to:n})))),i=U(t.selection,(t=>e.moveVertically(t,!0))).map(n);return e.dispatch({changes:n,selection:i,scrollIntoView:!0,userEvent:"delete.line"}),!0},mt=Ot(!1),gt=Ot(!0);function Ot(e){return({state:t,dispatch:n})=>{if(t.readOnly)return!1;let r=t.changeByRange((n=>{let{from:r,to:a}=n,l=t.doc.lineAt(r),c=!e&&r==a&&function(e,t){if(/\(\)|\[\]|\{\}/.test(e.sliceDoc(t-1,t+1)))return{from:t,to:t};let n,i=o.syntaxTree(e).resolveInner(t),r=i.childBefore(t),a=i.childAfter(t);return r&&a&&r.to<=t&&a.from>=t&&(n=r.type.prop(s.NodeProp.closedBy))&&n.indexOf(a.name)>-1&&e.doc.lineAt(r.to).from==e.doc.lineAt(a.from).from?{from:r.to,to:a.from}:null}(t,r);e&&(r=a=(a<=l.to?l:t.doc.lineAt(a)).to);let u=new o.IndentContext(t,{simulateBreak:r,simulateDoubleBreak:!!c}),h=o.getIndentation(u,r);for(null==h&&(h=/^\s*/.exec(t.doc.lineAt(r).text)[0].length);a<l.to&&/\s/.test(l.text[a-l.from]);)a++;c?({from:r,to:a}=c):r>l.from&&r<l.from+100&&!/\S/.test(l.text.slice(0,r))&&(r=l.from);let f=["",o.indentString(t,h)];return c&&f.push(o.indentString(t,u.lineIndent(l.from,-1))),{changes:{from:r,to:a,insert:i.Text.of(f)},range:i.EditorSelection.cursor(r+1+f[1].length)}}));return n(t.update(r,{scrollIntoView:!0,userEvent:"input"})),!0}}function vt(e,t){let n=-1;return e.changeByRange((r=>{let o=[];for(let i=r.from;i<=r.to;){let s=e.doc.lineAt(i);s.number>n&&(r.empty||r.to>s.from)&&(t(s,o,r),n=s.number),i=s.to+1}let s=e.changes(o);return{changes:o,range:i.EditorSelection.range(s.mapPos(r.anchor,1),s.mapPos(r.head,1))}}))}const yt=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let n=Object.create(null),i=new o.IndentContext(e,{overrideIndentation:e=>{let t=n[e];return null==t?-1:t}}),r=vt(e,((t,r,s)=>{let a=o.getIndentation(i,t.from);if(null==a)return;/\S/.test(t.text)||(a=0);let l=/^\s*/.exec(t.text)[0],c=o.indentString(e,a);(l!=c||s.from<t.from+l.length)&&(n[t.from]=a,r.push({from:t.from,to:t.from+l.length,insert:c}))}));return r.changes.empty||t(e.update(r,{userEvent:"indent"})),!0},bt=({state:e,dispatch:t})=>!e.readOnly&&(t(e.update(vt(e,((t,n)=>{n.push({from:t.from,insert:e.facet(o.indentUnit)})})),{userEvent:"input.indent"})),!0),wt=({state:e,dispatch:t})=>!e.readOnly&&(t(e.update(vt(e,((t,n)=>{let r=/^\s*/.exec(t.text)[0];if(!r)return;let s=i.countColumn(r,e.tabSize),a=0,l=o.indentString(e,Math.max(0,s-o.getIndentUnit(e)));for(;a<r.length&&a<l.length&&r.charCodeAt(a)==l.charCodeAt(a);)a++;n.push({from:t.from+a,to:t.from+r.length,insert:l.slice(a)})})),{userEvent:"delete.dedent"})),!0),St=[{key:"Ctrl-b",run:q,shift:xe,preventDefault:!0},{key:"Ctrl-f",run:H,shift:ke},{key:"Ctrl-p",run:le,shift:Ae},{key:"Ctrl-n",run:ce,shift:We},{key:"Ctrl-a",run:Oe,shift:Ne},{key:"Ctrl-e",run:ve,shift:Le},{key:"Ctrl-d",run:Ke},{key:"Ctrl-h",run:Je},{key:"Ctrl-k",run:it},{key:"Ctrl-Alt-h",run:tt},{key:"Ctrl-o",run:ot},{key:"Ctrl-t",run:st},{key:"Ctrl-v",run:de}],xt=[{key:"ArrowLeft",run:q,shift:xe,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:K,shift:Te},{mac:"Cmd-ArrowLeft",run:ge,shift:ze},{key:"ArrowRight",run:H,shift:ke,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:ee,shift:$e},{mac:"Cmd-ArrowRight",run:me,shift:De},{key:"ArrowUp",run:le,shift:Ae,preventDefault:!0},{mac:"Cmd-ArrowUp",run:je,shift:Ze},{mac:"Ctrl-ArrowUp",run:fe,shift:Ie},{key:"ArrowDown",run:ce,shift:We,preventDefault:!0},{mac:"Cmd-ArrowDown",run:Xe,shift:Ue},{mac:"Ctrl-ArrowDown",run:de,shift:_e},{key:"PageUp",run:fe,shift:Ie},{key:"PageDown",run:de,shift:_e},{key:"Home",run:ge,shift:ze,preventDefault:!0},{key:"Mod-Home",run:je,shift:Ze},{key:"End",run:me,shift:De,preventDefault:!0},{key:"Mod-End",run:Xe,shift:Ue},{key:"Enter",run:mt},{key:"Mod-a",run:Ve},{key:"Backspace",run:Je,shift:Je},{key:"Delete",run:Ke},{key:"Mod-Backspace",mac:"Alt-Backspace",run:tt},{key:"Mod-Delete",mac:"Alt-Delete",run:nt},{mac:"Mod-Backspace",run:rt},{mac:"Mod-Delete",run:it}].concat(St.map((e=>({mac:e.key,run:e.run,shift:e.shift})))),kt=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:oe,shift:Ce},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:se,shift:Re},{key:"Alt-ArrowUp",run:ct},{key:"Shift-Alt-ArrowUp",run:ft},{key:"Alt-ArrowDown",run:ut},{key:"Shift-Alt-ArrowDown",run:dt},{key:"Escape",run:Ge},{key:"Mod-Enter",run:gt},{key:"Alt-l",mac:"Ctrl-l",run:Be},{key:"Mod-i",run:Fe,preventDefault:!0},{key:"Mod-[",run:wt},{key:"Mod-]",run:bt},{key:"Mod-Alt-\\",run:yt},{key:"Shift-Mod-k",run:pt},{key:"Shift-Mod-\\",run:be},{key:"Mod-/",run:a},{key:"Alt-A",run:f}].concat(xt),Qt={key:"Tab",run:bt,shift:wt};t.blockComment=d,t.blockUncomment=p,t.copyLineDown=dt,t.copyLineUp=ft,t.cursorCharBackward=e=>G(e,!1),t.cursorCharForward=e=>G(e,!0),t.cursorCharLeft=q,t.cursorCharRight=H,t.cursorDocEnd=Xe,t.cursorDocStart=je,t.cursorGroupBackward=e=>J(e,!1),t.cursorGroupForward=e=>J(e,!0),t.cursorGroupLeft=K,t.cursorGroupRight=ee,t.cursorLineBoundaryBackward=ge,t.cursorLineBoundaryForward=me,t.cursorLineDown=ce,t.cursorLineEnd=ve,t.cursorLineStart=Oe,t.cursorLineUp=le,t.cursorMatchingBracket=be,t.cursorPageDown=de,t.cursorPageUp=fe,t.cursorSubwordBackward=e=>ne(e,!1),t.cursorSubwordForward=e=>ne(e,!0),t.cursorSyntaxLeft=oe,t.cursorSyntaxRight=se,t.defaultKeymap=kt,t.deleteCharBackward=Je,t.deleteCharForward=Ke,t.deleteGroupBackward=tt,t.deleteGroupForward=nt,t.deleteLine=pt,t.deleteToLineEnd=it,t.deleteToLineStart=rt,t.deleteTrailingWhitespace=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let n=[];for(let t=0,i="",r=e.doc.iter();;){if(r.next(),r.lineBreak||r.done){let e=i.search(/\s+$/);if(e>-1&&n.push({from:t-(i.length-e),to:t}),r.done)break;i=""}else i=r.value;t+=r.value.length}return!!n.length&&(t(e.update({changes:n,userEvent:"delete"})),!0)},t.emacsStyleKeymap=St,t.history=function(e={}){return[x,S.of(e),r.EditorView.domEventHandlers({beforeinput(e,t){let n="historyUndo"==e.inputType?T:"historyRedo"==e.inputType?$:null;return!!n&&(e.preventDefault(),n(t))}})]},t.historyField=k,t.historyKeymap=Z,t.indentLess=wt,t.indentMore=bt,t.indentSelection=yt,t.indentWithTab=Qt,t.insertBlankLine=gt,t.insertNewline=({state:e,dispatch:t})=>(t(e.update(e.replaceSelection(e.lineBreak),{scrollIntoView:!0,userEvent:"input"})),!0),t.insertNewlineAndIndent=mt,t.insertTab=({state:e,dispatch:t})=>e.selection.ranges.some((e=>!e.empty))?bt({state:e,dispatch:t}):(t(e.update(e.replaceSelection("\t"),{scrollIntoView:!0,userEvent:"input"})),!0),t.invertedEffects=w,t.isolateHistory=b,t.lineComment=u,t.lineUncomment=h,t.moveLineDown=ut,t.moveLineUp=ct,t.redo=$,t.redoDepth=A,t.redoSelection=C,t.selectAll=Ve,t.selectCharBackward=e=>Se(e,!1),t.selectCharForward=e=>Se(e,!0),t.selectCharLeft=xe,t.selectCharRight=ke,t.selectDocEnd=Ue,t.selectDocStart=Ze,t.selectGroupBackward=e=>Qe(e,!1),t.selectGroupForward=e=>Qe(e,!0),t.selectGroupLeft=Te,t.selectGroupRight=$e,t.selectLine=Be,t.selectLineBoundaryBackward=ze,t.selectLineBoundaryForward=De,t.selectLineDown=We,t.selectLineEnd=Le,t.selectLineStart=Ne,t.selectLineUp=Ae,t.selectMatchingBracket=({state:e,dispatch:t})=>ye(e,t,!0),t.selectPageDown=_e,t.selectPageUp=Ie,t.selectParentSyntax=Fe,t.selectSubwordBackward=e=>Pe(e,!1),t.selectSubwordForward=e=>Pe(e,!0),t.selectSyntaxLeft=Ce,t.selectSyntaxRight=Re,t.simplifySelection=Ge,t.splitLine=ot,t.standardKeymap=xt,t.toggleBlockComment=f,t.toggleBlockCommentByLine=m,t.toggleComment=a,t.toggleLineComment=c,t.transposeChars=st,t.undo=T,t.undoDepth=E,t.undoSelection=P},956:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(88),r=n(729),o=n(40),s=n(642),a=n(526),l=n(897);const c=[a.snippetCompletion("function ${name}(${params}) {\n\t${}\n}",{label:"function",detail:"definition",type:"keyword"}),a.snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}",{label:"for",detail:"loop",type:"keyword"}),a.snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}",{label:"for",detail:"of loop",type:"keyword"}),a.snippetCompletion("do {\n\t${}\n} while (${})",{label:"do",detail:"loop",type:"keyword"}),a.snippetCompletion("while (${}) {\n\t${}\n}",{label:"while",detail:"loop",type:"keyword"}),a.snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}",{label:"try",detail:"/ catch block",type:"keyword"}),a.snippetCompletion("if (${}) {\n\t${}\n}",{label:"if",detail:"block",type:"keyword"}),a.snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}",{label:"if",detail:"/ else block",type:"keyword"}),a.snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}",{label:"class",detail:"definition",type:"keyword"}),a.snippetCompletion('import {${names}} from "${module}"\n${}',{label:"import",detail:"named",type:"keyword"}),a.snippetCompletion('import ${name} from "${module}"\n${}',{label:"import",detail:"default",type:"keyword"})],u=new l.NodeWeakMap,h=new Set(["Script","Block","FunctionExpression","FunctionDeclaration","ArrowFunction","MethodDeclaration","ForStatement"]);function f(e){return(t,n)=>{let i=t.node.getChild("VariableDefinition");return i&&n(i,e),!0}}const d=["FunctionDeclaration"],p={FunctionDeclaration:f("function"),ClassDeclaration:f("class"),ClassExpression:()=>!0,EnumDeclaration:f("constant"),TypeAliasDeclaration:f("type"),NamespaceDeclaration:f("namespace"),VariableDefinition(e,t){e.matchContext(d)||t(e,"variable")},TypeDefinition(e,t){t(e,"type")},__proto__:null};function m(e,t){let n=u.get(t);if(n)return n;let i=[],r=!0;function o(t,n){let r=e.sliceString(t.from,t.to);i.push({label:r,type:n})}return t.cursor(l.IterMode.IncludeAnonymous).iterate((t=>{if(r)r=!1;else if(t.name){let e=p[t.name];if(e&&e(t,o)||h.has(t.name))return!1}else if(t.to-t.from>8192){for(let n of m(e,t.node))i.push(n);return!1}})),u.set(t,i),i}const g=/^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;function O(e){let t=r.syntaxTree(e.state).resolve(e.pos,-1);if("TemplateString"==t.name||"String"==t.name||"LineComment"==t.name||"BlockComment"==t.name)return null;let n=t.to-t.from<20&&g.test(e.state.sliceDoc(t.from,t.to));if(!n&&!e.explicit)return null;let i=[];for(let n=t;n;n=n.parent)h.has(n.name)&&(i=i.concat(m(e.state.doc,n)));return{options:i,from:n?t.from:e.pos,validFor:g}}const v=r.LRLanguage.define({parser:i.parser.configure({props:[r.indentNodeProp.add({IfStatement:r.continuedIndent({except:/^\s*({|else\b)/}),TryStatement:r.continuedIndent({except:/^\s*({|catch\b|finally\b)/}),LabeledStatement:r.flatIndent,SwitchBody:e=>{let t=e.textAfter,n=/^\s*\}/.test(t),i=/^\s*(case|default)\b/.test(t);return e.baseIndent+(n?0:i?1:2)*e.unit},Block:r.delimitedIndent({closing:"}"}),ArrowFunction:e=>e.baseIndent+e.unit,"TemplateString BlockComment":()=>-1,"Statement Property":r.continuedIndent({except:/^{/}),JSXElement(e){let t=/^\s*<\//.test(e.textAfter);return e.lineIndent(e.node.from)+(t?0:e.unit)},JSXEscape(e){let t=/\s*\}/.test(e.textAfter);return e.lineIndent(e.node.from)+(t?0:e.unit)},"JSXOpenTag JSXSelfClosingTag":e=>e.column(e.node.from)+e.unit}),r.foldNodeProp.add({"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression":r.foldInside,BlockComment:e=>({from:e.from+2,to:e.to-2})})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"`"]},commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\}|<\/)$/,wordChars:"$"}}),y=v.configure({dialect:"ts"}),b=v.configure({dialect:"jsx"}),w=v.configure({dialect:"jsx ts"}),S="break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map((e=>({label:e,type:"keyword"})));function x(e,t,n=e.length){if(!t)return"";let i=t.getChild("JSXIdentifier");return i?e.sliceString(i.from,Math.min(i.to,n)):""}const k="object"==typeof navigator&&/Android\b/.test(navigator.userAgent),Q=s.EditorView.inputHandler.of(((e,t,n,i)=>{if((k?e.composing:e.compositionStarted)||e.state.readOnly||t!=n||">"!=i&&"/"!=i||!v.isActiveAt(e.state,t,-1))return!1;let{state:s}=e,a=s.changeByRange((e=>{var t,n,a;let l,{head:c}=e,u=r.syntaxTree(s).resolveInner(c,-1);if("JSXStartTag"==u.name&&(u=u.parent),">"==i&&"JSXFragmentTag"==u.name)return{range:o.EditorSelection.cursor(c+1),changes:{from:c,insert:"><>"}};if(">"==i&&"JSXIdentifier"==u.name){if("JSXEndTag"!=(null===(n=null===(t=u.parent)||void 0===t?void 0:t.lastChild)||void 0===n?void 0:n.name)&&(l=x(s.doc,u.parent,c)))return{range:o.EditorSelection.cursor(c+1),changes:{from:c,insert:`></${l}>`}}}else if("/"==i&&"JSXFragmentTag"==u.name){let e=u.parent,t=null==e?void 0:e.parent;if(e.from==c-1&&"JSXEndTag"!=(null===(a=t.lastChild)||void 0===a?void 0:a.name)&&(l=x(s.doc,null==t?void 0:t.firstChild,c))){let e=`/${l}>`;return{range:o.EditorSelection.cursor(c+e.length),changes:{from:c,insert:e}}}}return{range:e}}));return!a.changes.empty&&(e.dispatch(a,{userEvent:"input.type",scrollIntoView:!0}),!0)}));function T(e,t,n,i){return n.line(e+i.line).from+t+(1==e?i.col-1:-1)}function $(e,t,n){let i=T(e.line,e.column,t,n),r={from:i,to:null!=e.endLine&&1!=e.endColumn?T(e.endLine,e.endColumn,t,n):i,message:e.message,source:e.ruleId?"jshint:"+e.ruleId:"jshint",severity:1==e.severity?"warning":"error"};if(e.fix){let{range:t,text:o}=e.fix,s=t[0]+n.pos-i,a=t[1]+n.pos-i;r.actions=[{name:"fix",apply(e,t){e.dispatch({changes:{from:t+s,to:t+a,insert:o},scrollIntoView:!0})}}]}return r}t.autoCloseTags=Q,t.esLint=function(e,t){return t||(t={parserOptions:{ecmaVersion:2019,sourceType:"module"},env:{browser:!0,node:!0,es6:!0,es2015:!0,es2017:!0,es2020:!0},rules:{}},e.getRules().forEach(((e,n)=>{e.meta.docs.recommended&&(t.rules[n]=2)}))),n=>{let{state:i}=n,r=[];for(let{from:n,to:o}of v.findRegions(i)){let s=i.doc.lineAt(n),a={line:s.number-1,col:n-s.from,pos:n};for(let s of e.verify(i.sliceDoc(n,o),t))r.push($(s,i.doc,a))}return r}},t.javascript=function(e={}){let t=e.jsx?e.typescript?w:b:e.typescript?y:v;return new r.LanguageSupport(t,[v.data.of({autocomplete:a.ifNotIn(["LineComment","BlockComment","String"],a.completeFromList(c.concat(S)))}),v.data.of({autocomplete:O}),e.jsx?Q:[]])},t.javascriptLanguage=v,t.jsxLanguage=b,t.localCompletionSource=O,t.snippets=c,t.tsxLanguage=w,t.typescriptLanguage=y},729:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=n(897),o=n(40),s=n(642),a=n(48),l=n(223);const c=new r.NodeProp;function u(e){return o.Facet.define({combine:e?t=>t.concat(e):void 0})}class h{constructor(e,t,n=[]){this.data=e,o.EditorState.prototype.hasOwnProperty("tree")||Object.defineProperty(o.EditorState.prototype,"tree",{get(){return p(this)}}),this.parser=t,this.extension=[k.of(this),o.EditorState.languageData.of(((e,t,n)=>e.facet(f(e,t,n))))].concat(n)}isActiveAt(e,t,n=-1){return f(e,t,n)==this.data}findRegions(e){let t=e.facet(k);if((null==t?void 0:t.data)==this.data)return[{from:0,to:e.doc.length}];if(!t||!t.allowsNesting)return[];let n=[],i=(e,t)=>{if(e.prop(c)==this.data)return void n.push({from:t,to:t+e.length});let o=e.prop(r.NodeProp.mounted);if(o){if(o.tree.prop(c)==this.data){if(o.overlay)for(let e of o.overlay)n.push({from:e.from+t,to:e.to+t});else n.push({from:t,to:t+e.length});return}if(o.overlay){let e=n.length;if(i(o.tree,o.overlay[0].from+t),n.length>e)return}}for(let n=0;n<e.children.length;n++){let o=e.children[n];o instanceof r.Tree&&i(o,e.positions[n]+t)}};return i(p(e),0),n}get allowsNesting(){return!0}}function f(e,t,n){let i=e.facet(k);if(!i)return null;let o=i.data;if(i.allowsNesting)for(let i=p(e).topNode;i;i=i.enter(t,n,r.IterMode.ExcludeBuffers))o=i.type.prop(c)||o;return o}h.setState=o.StateEffect.define();class d extends h{constructor(e,t){super(e,t),this.parser=t}static define(e){let t=u(e.languageData);return new d(t,e.parser.configure({props:[c.add((e=>e.isTop?t:void 0))]}))}configure(e){return new d(this.data,this.parser.configure(e))}get allowsNesting(){return this.parser.hasWrappers()}}function p(e){let t=e.field(h.state,!1);return t?t.tree:r.Tree.empty}function m(e,t,n=50){var i;let r=null===(i=e.field(h.state,!1))||void 0===i?void 0:i.context;return r&&(r.isDone(t)||r.work(n,t))?r.tree:null}class g{constructor(e,t=e.length){this.doc=e,this.length=t,this.cursorPos=0,this.string="",this.cursor=e.iter()}syncTo(e){return this.string=this.cursor.next(e-this.cursorPos).value,this.cursorPos=e+this.string.length,this.cursorPos-this.string.length}chunk(e){return this.syncTo(e),this.string}get lineChunks(){return!0}read(e,t){let n=this.cursorPos-this.string.length;return e<n||t>=this.cursorPos?this.doc.sliceString(e,t):this.string.slice(e-n,t-n)}}let O=null;class v{constructor(e,t,n=[],i,r,o,s,a){this.parser=e,this.state=t,this.fragments=n,this.tree=i,this.treeLen=r,this.viewport=o,this.skipped=s,this.scheduleOn=a,this.parse=null,this.tempSkipped=[]}static create(e,t,n){return new v(e,t,[],r.Tree.empty,0,n,[],null)}startParse(){return this.parser.startParse(new g(this.state.doc),this.fragments)}work(e,t){return null!=t&&t>=this.state.doc.length&&(t=void 0),this.tree!=r.Tree.empty&&this.isDone(null!=t?t:this.state.doc.length)?(this.takeTree(),!0):this.withContext((()=>{var n;if("number"==typeof e){let t=Date.now()+e;e=()=>Date.now()>t}for(this.parse||(this.parse=this.startParse()),null!=t&&(null==this.parse.stoppedAt||this.parse.stoppedAt>t)&&t<this.state.doc.length&&this.parse.stopAt(t);;){let i=this.parse.advance();if(i){if(this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(i,this.fragments,null!=this.parse.stoppedAt)),this.treeLen=null!==(n=this.parse.stoppedAt)&&void 0!==n?n:this.state.doc.length,this.tree=i,this.parse=null,!(this.treeLen<(null!=t?t:this.state.doc.length)))return!0;this.parse=this.startParse()}if(e())return!1}}))}takeTree(){let e,t;this.parse&&(e=this.parse.parsedPos)>=this.treeLen&&((null==this.parse.stoppedAt||this.parse.stoppedAt>e)&&this.parse.stopAt(e),this.withContext((()=>{for(;!(t=this.parse.advance()););})),this.treeLen=e,this.tree=t,this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(this.tree,this.fragments,!0)),this.parse=null)}withContext(e){let t=O;O=this;try{return e()}finally{O=t}}withoutTempSkipped(e){for(let t;t=this.tempSkipped.pop();)e=y(e,t.from,t.to);return e}changes(e,t){let{fragments:n,tree:i,treeLen:o,viewport:s,skipped:a}=this;if(this.takeTree(),!e.empty){let t=[];if(e.iterChangedRanges(((e,n,i,r)=>t.push({fromA:e,toA:n,fromB:i,toB:r}))),n=r.TreeFragment.applyChanges(n,t),i=r.Tree.empty,o=0,s={from:e.mapPos(s.from,-1),to:e.mapPos(s.to,1)},this.skipped.length){a=[];for(let t of this.skipped){let n=e.mapPos(t.from,1),i=e.mapPos(t.to,-1);n<i&&a.push({from:n,to:i})}}}return new v(this.parser,t,n,i,o,s,a,this.scheduleOn)}updateViewport(e){if(this.viewport.from==e.from&&this.viewport.to==e.to)return!1;this.viewport=e;let t=this.skipped.length;for(let t=0;t<this.skipped.length;t++){let{from:n,to:i}=this.skipped[t];n<e.to&&i>e.from&&(this.fragments=y(this.fragments,n,i),this.skipped.splice(t--,1))}return!(this.skipped.length>=t||(this.reset(),0))}reset(){this.parse&&(this.takeTree(),this.parse=null)}skipUntilInView(e,t){this.skipped.push({from:e,to:t})}static getSkippingParser(e){return new class extends r.Parser{createParse(t,n,i){let o=i[0].from,s=i[i.length-1].to;return{parsedPos:o,advance(){let t=O;if(t){for(let e of i)t.tempSkipped.push(e);e&&(t.scheduleOn=t.scheduleOn?Promise.all([t.scheduleOn,e]):e)}return this.parsedPos=s,new r.Tree(r.NodeType.none,[],[],s-o)},stoppedAt:null,stopAt(){}}}}}isDone(e){e=Math.min(e,this.state.doc.length);let t=this.fragments;return this.treeLen>=e&&t.length&&0==t[0].from&&t[0].to>=e}static get(){return O}}function y(e,t,n){return r.TreeFragment.applyChanges(e,[{fromA:t,toA:n,fromB:t,toB:n}])}class b{constructor(e){this.context=e,this.tree=e.tree}apply(e){if(!e.docChanged&&this.tree==this.context.tree)return this;let t=this.context.changes(e.changes,e.state),n=this.context.treeLen==e.startState.doc.length?void 0:Math.max(e.changes.mapPos(this.context.treeLen),t.viewport.to);return t.work(20,n)||t.takeTree(),new b(t)}static init(e){let t=Math.min(3e3,e.doc.length),n=v.create(e.facet(k).parser,e,{from:0,to:t});return n.work(20,t)||n.takeTree(),new b(n)}}h.state=o.StateField.define({create:b.init,update(e,t){for(let e of t.effects)if(e.is(h.setState))return e.value;return t.startState.facet(k)!=t.state.facet(k)?b.init(t.state):e.apply(t)}});let w=e=>{let t=setTimeout((()=>e()),500);return()=>clearTimeout(t)};"undefined"!=typeof requestIdleCallback&&(w=e=>{let t=-1,n=setTimeout((()=>{t=requestIdleCallback(e,{timeout:400})}),100);return()=>t<0?clearTimeout(n):cancelIdleCallback(t)});const S="undefined"!=typeof navigator&&(null===(i=navigator.scheduling)||void 0===i?void 0:i.isInputPending)?()=>navigator.scheduling.isInputPending():null,x=s.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update(e){let t=this.view.state.field(h.state).context;(t.updateViewport(e.view.viewport)||this.view.viewport.to>t.treeLen)&&this.scheduleWork(),e.docChanged&&(this.view.hasFocus&&(this.chunkBudget+=50),this.scheduleWork()),this.checkAsyncSchedule(t)}scheduleWork(){if(this.working)return;let{state:e}=this.view,t=e.field(h.state);t.tree==t.context.tree&&t.context.isDone(e.doc.length)||(this.working=w(this.work))}work(e){this.working=null;let t=Date.now();if(this.chunkEnd<t&&(this.chunkEnd<0||this.view.hasFocus)&&(this.chunkEnd=t+3e4,this.chunkBudget=3e3),this.chunkBudget<=0)return;let{state:n,viewport:{to:i}}=this.view,r=n.field(h.state);if(r.tree==r.context.tree&&r.context.isDone(i+1e5))return;let o=Date.now()+Math.min(this.chunkBudget,100,e&&!S?Math.max(25,e.timeRemaining()-5):1e9),s=r.context.treeLen<i&&n.doc.length>i+1e3,a=r.context.work((()=>S&&S()||Date.now()>o),i+(s?0:1e5));this.chunkBudget-=Date.now()-t,(a||this.chunkBudget<=0)&&(r.context.takeTree(),this.view.dispatch({effects:h.setState.of(new b(r.context))})),this.chunkBudget>0&&(!a||s)&&this.scheduleWork(),this.checkAsyncSchedule(r.context)}checkAsyncSchedule(e){e.scheduleOn&&(this.workScheduled++,e.scheduleOn.then((()=>this.scheduleWork())).catch((e=>s.logException(this.view.state,e))).then((()=>this.workScheduled--)),e.scheduleOn=null)}destroy(){this.working&&this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),k=o.Facet.define({combine:e=>e.length?e[0]:null,enables:[h.state,x]});class Q{constructor(e,t,n,i,r,o){this.name=e,this.alias=t,this.extensions=n,this.filename=i,this.loadFunc=r,this.support=o,this.loading=null}load(){return this.loading||(this.loading=this.loadFunc().then((e=>this.support=e),(e=>{throw this.loading=null,e})))}static of(e){let{load:t,support:n}=e;if(!t){if(!n)throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");t=()=>Promise.resolve(n)}return new Q(e.name,(e.alias||[]).concat(e.name).map((e=>e.toLowerCase())),e.extensions||[],e.filename,t,n)}static matchFilename(e,t){for(let n of e)if(n.filename&&n.filename.test(t))return n;let n=/\.([^.]+)$/.exec(t);if(n)for(let t of e)if(t.extensions.indexOf(n[1])>-1)return t;return null}static matchLanguageName(e,t,n=!0){t=t.toLowerCase();for(let n of e)if(n.alias.some((e=>e==t)))return n;if(n)for(let n of e)for(let e of n.alias){let i=t.indexOf(e);if(i>-1&&(e.length>2||!/\w/.test(t[i-1])&&!/\w/.test(t[i+e.length])))return n}return null}}const T=o.Facet.define(),$=o.Facet.define({combine:e=>{if(!e.length)return"  ";if(!/^(?: +|\t+)$/.test(e[0]))throw new Error("Invalid indent unit: "+JSON.stringify(e[0]));return e[0]}});function P(e){let t=e.facet($);return 9==t.charCodeAt(0)?e.tabSize*t.length:t.length}function C(e,t){let n="",i=e.tabSize;if(9==e.facet($).charCodeAt(0))for(;t>=i;)n+="\t",t-=i;for(let e=0;e<t;e++)n+=" ";return n}function R(e,t){e instanceof o.EditorState&&(e=new E(e));for(let n of e.state.facet(T)){let i=n(e,t);if(null!=i)return i}let n=p(e.state);return n?function(e,t,n){return M(t.resolveInner(n).enterUnfinishedNodesBefore(n),n,e)}(e,n,t):null}class E{constructor(e,t={}){this.state=e,this.options=t,this.unit=P(e)}lineAt(e,t=1){let n=this.state.doc.lineAt(e),{simulateBreak:i,simulateDoubleBreak:r}=this.options;return null!=i&&i>=n.from&&i<=n.to?r&&i==e?{text:"",from:e}:(t<0?i<e:i<=e)?{text:n.text.slice(i-n.from),from:i}:{text:n.text.slice(0,i-n.from),from:n.from}:n}textAfterPos(e,t=1){if(this.options.simulateDoubleBreak&&e==this.options.simulateBreak)return"";let{text:n,from:i}=this.lineAt(e,t);return n.slice(e-i,Math.min(n.length,e+100-i))}column(e,t=1){let{text:n,from:i}=this.lineAt(e,t),r=this.countColumn(n,e-i),o=this.options.overrideIndentation?this.options.overrideIndentation(i):-1;return o>-1&&(r+=o-this.countColumn(n,n.search(/\S|$/))),r}countColumn(e,t=e.length){return o.countColumn(e,this.state.tabSize,t)}lineIndent(e,t=1){let{text:n,from:i}=this.lineAt(e,t),r=this.options.overrideIndentation;if(r){let e=r(i);if(e>-1)return e}return this.countColumn(n,n.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}const A=new r.NodeProp;function W(e){let t=e.type.prop(A);if(t)return t;let n,i=e.firstChild;if(i&&(n=i.type.prop(r.NodeProp.closedBy))){let t=e.lastChild,i=t&&n.indexOf(t.name)>-1;return e=>z(e,!0,1,void 0,i&&!function(e){return e.pos==e.options.simulateBreak&&e.options.simulateDoubleBreak}(e)?t.from:void 0)}return null==e.parent?I:null}function M(e,t,n){for(;e;e=e.parent){let i=W(e);if(i)return i(_.create(n,t,e))}return null}function I(){return 0}class _ extends E{constructor(e,t,n){super(e.state,e.options),this.base=e,this.pos=t,this.node=n}static create(e,t,n){return new _(e,t,n)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){let e=this.state.doc.lineAt(this.node.from);for(;;){let t=this.node.resolve(e.from);for(;t.parent&&t.parent.from==t.from;)t=t.parent;if(D(t,this.node))break;e=this.state.doc.lineAt(t.from)}return this.lineIndent(e.from)}continue(){let e=this.node.parent;return e?M(e,this.pos,this.base):0}}function D(e,t){for(let n=t;n;n=n.parent)if(e==n)return!0;return!1}function z(e,t,n,i,r){let o=e.textAfter,s=o.match(/^\s*/)[0].length,a=i&&o.slice(s,s+i.length)==i||r==e.pos+s,l=t?function(e){let t=e.node,n=t.childAfter(t.from),i=t.lastChild;if(!n)return null;let r=e.options.simulateBreak,o=e.state.doc.lineAt(n.from),s=null==r||r<=o.from?o.to:Math.min(o.to,r);for(let e=n.to;;){let r=t.childAfter(e);if(!r||r==i)return null;if(!r.type.isSkipped)return r.from<s?n:null;e=r.to}}(e):null;return l?a?e.column(l.from):e.column(l.to):e.baseIndent+(a?0:e.unit*n)}const N=o.Facet.define(),L=new r.NodeProp;function j(e){let t=e.lastChild;return t&&t.to==e.to&&t.type.isError}function X(e,t,n){for(let i of e.facet(N)){let r=i(e,t,n);if(r)return r}return function(e,t,n){let i=p(e);if(i.length<n)return null;let r=null;for(let o=i.resolveInner(n);o;o=o.parent){if(o.to<=n||o.from>n)continue;if(r&&o.from<t)break;let s=o.type.prop(L);if(s&&(o.to<i.length-50||i.length==e.doc.length||!j(o))){let i=s(o,e);i&&i.from<=n&&i.from>=t&&i.to>n&&(r=i)}}return r}(e,t,n)}function Z(e,t){let n=t.mapPos(e.from,1),i=t.mapPos(e.to,-1);return n>=i?void 0:{from:n,to:i}}const U=o.StateEffect.define({map:Z}),V=o.StateEffect.define({map:Z});function B(e){let t=[];for(let{head:n}of e.state.selection.ranges)t.some((e=>e.from<=n&&e.to>=n))||t.push(e.lineBlockAt(n));return t}const F=o.StateField.define({create:()=>s.Decoration.none,update(e,t){e=e.map(t.changes);for(let n of t.effects)n.is(U)&&!Y(e,n.value.from,n.value.to)?e=e.update({add:[se.range(n.value.from,n.value.to)]}):n.is(V)&&(e=e.update({filter:(e,t)=>n.value.from!=e||n.value.to!=t,filterFrom:n.value.from,filterTo:n.value.to}));if(t.selection){let n=!1,{head:i}=t.selection.main;e.between(i,i,((e,t)=>{e<i&&t>i&&(n=!0)})),n&&(e=e.update({filterFrom:i,filterTo:i,filter:(e,t)=>t<=i||e>=i}))}return e},provide:e=>s.EditorView.decorations.from(e)});function G(e,t,n){var i;let r=null;return null===(i=e.field(F,!1))||void 0===i||i.between(t,n,((e,t)=>{(!r||r.from>e)&&(r={from:e,to:t})})),r}function Y(e,t,n){let i=!1;return e.between(t,t,((e,r)=>{e==t&&r==n&&(i=!0)})),i}function q(e,t){return e.field(F,!1)?t:t.concat(o.StateEffect.appendConfig.of(oe()))}const H=e=>{for(let t of B(e)){let n=X(e.state,t.from,t.to);if(n)return e.dispatch({effects:q(e.state,[U.of(n),K(e,n)])}),!0}return!1},J=e=>{if(!e.state.field(F,!1))return!1;let t=[];for(let n of B(e)){let i=G(e.state,n.from,n.to);i&&t.push(V.of(i),K(e,i,!1))}return t.length&&e.dispatch({effects:t}),t.length>0};function K(e,t,n=!0){let i=e.state.doc.lineAt(t.from).number,r=e.state.doc.lineAt(t.to).number;return s.EditorView.announce.of(`${e.state.phrase(n?"Folded lines":"Unfolded lines")} ${i} ${e.state.phrase("to")} ${r}.`)}const ee=e=>{let{state:t}=e,n=[];for(let i=0;i<t.doc.length;){let r=e.lineBlockAt(i),o=X(t,r.from,r.to);o&&n.push(U.of(o)),i=(o?e.lineBlockAt(o.to):r).to+1}return n.length&&e.dispatch({effects:q(e.state,n)}),!!n.length},te=e=>{let t=e.state.field(F,!1);if(!t||!t.size)return!1;let n=[];return t.between(0,e.state.doc.length,((e,t)=>{n.push(V.of({from:e,to:t}))})),e.dispatch({effects:n}),!0},ne=[{key:"Ctrl-Shift-[",mac:"Cmd-Alt-[",run:H},{key:"Ctrl-Shift-]",mac:"Cmd-Alt-]",run:J},{key:"Ctrl-Alt-[",run:ee},{key:"Ctrl-Alt-]",run:te}],ie={placeholderDOM:null,placeholderText:"…"},re=o.Facet.define({combine:e=>o.combineConfig(e,ie)});function oe(e){let t=[F,ce];return e&&t.push(re.of(e)),t}const se=s.Decoration.replace({widget:new class extends s.WidgetType{toDOM(e){let{state:t}=e,n=t.facet(re),i=t=>{let n=e.lineBlockAt(e.posAtDOM(t.target)),i=G(e.state,n.from,n.to);i&&e.dispatch({effects:V.of(i)}),t.preventDefault()};if(n.placeholderDOM)return n.placeholderDOM(e,i);let r=document.createElement("span");return r.textContent=n.placeholderText,r.setAttribute("aria-label",t.phrase("folded code")),r.title=t.phrase("unfold"),r.className="cm-foldPlaceholder",r.onclick=i,r}}}),ae={openText:"⌄",closedText:"›",markerDOM:null,domEventHandlers:{},foldingChanged:()=>!1};class le extends s.GutterMarker{constructor(e,t){super(),this.config=e,this.open=t}eq(e){return this.config==e.config&&this.open==e.open}toDOM(e){if(this.config.markerDOM)return this.config.markerDOM(this.open);let t=document.createElement("span");return t.textContent=this.open?this.config.openText:this.config.closedText,t.title=e.state.phrase(this.open?"Fold line":"Unfold line"),t}}const ce=s.EditorView.baseTheme({".cm-foldPlaceholder":{backgroundColor:"#eee",border:"1px solid #ddd",color:"#888",borderRadius:".2em",margin:"0 1px",padding:"0 1px",cursor:"pointer"},".cm-foldGutter span":{padding:"0 1px",cursor:"pointer"}});class ue{constructor(e,t){let n;function i(e){let t=l.StyleModule.newName();return(n||(n=Object.create(null)))["."+t]=e,t}const r="string"==typeof t.all?t.all:t.all?i(t.all):void 0,o=t.scope;this.scope=o instanceof h?e=>e.prop(c)==o.data:o?e=>e==o:void 0,this.style=a.tagHighlighter(e.map((e=>({tag:e.tag,class:e.class||i(Object.assign({},e,{tag:null}))}))),{all:r}).style,this.module=n?new l.StyleModule(n):null,this.themeType=t.themeType}static define(e,t){return new ue(e,t||{})}}const he=o.Facet.define(),fe=o.Facet.define({combine:e=>e.length?[e[0]]:null});function de(e){let t=e.facet(he);return t.length?t:e.facet(fe)}const pe=o.Prec.high(s.ViewPlugin.fromClass(class{constructor(e){this.markCache=Object.create(null),this.tree=p(e.state),this.decorations=this.buildDeco(e,de(e.state))}update(e){let t=p(e.state),n=de(e.state),i=n!=de(e.startState);t.length<e.view.viewport.to&&!i&&t.type==this.tree.type?this.decorations=this.decorations.map(e.changes):(t!=this.tree||e.viewportChanged||i)&&(this.tree=t,this.decorations=this.buildDeco(e.view,n))}buildDeco(e,t){if(!t||!this.tree.length)return s.Decoration.none;let n=new o.RangeSetBuilder;for(let{from:i,to:r}of e.visibleRanges)a.highlightTree(this.tree,t,((e,t,i)=>{n.add(e,t,this.markCache[i]||(this.markCache[i]=s.Decoration.mark({class:i})))}),i,r);return n.finish()}},{decorations:e=>e.decorations})),me=ue.define([{tag:a.tags.meta,color:"#7a757a"},{tag:a.tags.link,textDecoration:"underline"},{tag:a.tags.heading,textDecoration:"underline",fontWeight:"bold"},{tag:a.tags.emphasis,fontStyle:"italic"},{tag:a.tags.strong,fontWeight:"bold"},{tag:a.tags.strikethrough,textDecoration:"line-through"},{tag:a.tags.keyword,color:"#708"},{tag:[a.tags.atom,a.tags.bool,a.tags.url,a.tags.contentSeparator,a.tags.labelName],color:"#219"},{tag:[a.tags.literal,a.tags.inserted],color:"#164"},{tag:[a.tags.string,a.tags.deleted],color:"#a11"},{tag:[a.tags.regexp,a.tags.escape,a.tags.special(a.tags.string)],color:"#e40"},{tag:a.tags.definition(a.tags.variableName),color:"#00f"},{tag:a.tags.local(a.tags.variableName),color:"#30a"},{tag:[a.tags.typeName,a.tags.namespace],color:"#085"},{tag:a.tags.className,color:"#167"},{tag:[a.tags.special(a.tags.variableName),a.tags.macroName],color:"#256"},{tag:a.tags.definition(a.tags.propertyName),color:"#00c"},{tag:a.tags.comment,color:"#940"},{tag:a.tags.invalid,color:"#f00"}]),ge=s.EditorView.baseTheme({"&.cm-focused .cm-matchingBracket":{backgroundColor:"#328c8252"},"&.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bb555544"}}),Oe="()[]{}",ve=o.Facet.define({combine:e=>o.combineConfig(e,{afterCursor:!0,brackets:Oe,maxScanDistance:1e4,renderMatch:we})}),ye=s.Decoration.mark({class:"cm-matchingBracket"}),be=s.Decoration.mark({class:"cm-nonmatchingBracket"});function we(e){let t=[],n=e.matched?ye:be;return t.push(n.range(e.start.from,e.start.to)),e.end&&t.push(n.range(e.end.from,e.end.to)),t}const Se=[o.StateField.define({create:()=>s.Decoration.none,update(e,t){if(!t.docChanged&&!t.selection)return e;let n=[],i=t.state.facet(ve);for(let e of t.state.selection.ranges){if(!e.empty)continue;let r=ke(t.state,e.head,-1,i)||e.head>0&&ke(t.state,e.head-1,1,i)||i.afterCursor&&(ke(t.state,e.head,1,i)||e.head<t.state.doc.length&&ke(t.state,e.head+1,-1,i));r&&(n=n.concat(i.renderMatch(r,t.state)))}return s.Decoration.set(n,!0)},provide:e=>s.EditorView.decorations.from(e)}),ge];function xe(e,t,n){let i=e.prop(t<0?r.NodeProp.openedBy:r.NodeProp.closedBy);if(i)return i;if(1==e.name.length){let i=n.indexOf(e.name);if(i>-1&&i%2==(t<0?1:0))return[n[i+t]]}return null}function ke(e,t,n,i={}){let r=i.maxScanDistance||1e4,o=i.brackets||Oe,s=p(e),a=s.resolveInner(t,n);for(let e=a;e;e=e.parent){let t=xe(e.type,n,o);if(t&&e.from<e.to)return Qe(0,0,n,e,t,o)}return function(e,t,n,i,r,o,s){let a=n<0?e.sliceDoc(t-1,t):e.sliceDoc(t,t+1),l=s.indexOf(a);if(l<0||l%2==0!=n>0)return null;let c={from:n<0?t-1:t,to:n>0?t+1:t},u=e.doc.iterRange(t,n>0?e.doc.length:0),h=0;for(let e=0;!u.next().done&&e<=o;){let o=u.value;n<0&&(e+=o.length);let a=t+e*n;for(let e=n>0?0:o.length-1,t=n>0?o.length:-1;e!=t;e+=n){let t=s.indexOf(o[e]);if(!(t<0||i.resolve(a+e,1).type!=r))if(t%2==0==n>0)h++;else{if(1==h)return{start:c,end:{from:a+e,to:a+e+1},matched:t>>1==l>>1};h--}}n>0&&(e+=o.length)}return u.done?{start:c,matched:!1}:null}(e,t,n,s,a.type,r,o)}function Qe(e,t,n,i,r,o){let s=i.parent,a={from:i.from,to:i.to},l=0,c=null==s?void 0:s.cursor();if(c&&(n<0?c.childBefore(i.from):c.childAfter(i.to)))do{if(n<0?c.to<=i.from:c.from>=i.to){if(0==l&&r.indexOf(c.type.name)>-1&&c.from<c.to)return{start:a,end:{from:c.from,to:c.to},matched:!0};if(xe(c.type,n,o))l++;else if(xe(c.type,-n,o)&&(l--,0==l))return{start:a,end:c.from==c.to?void 0:{from:c.from,to:c.to},matched:!1}}}while(n<0?c.prevSibling():c.nextSibling());return{start:a,matched:!1}}function Te(e,t,n,i=0,r=0){null==t&&-1==(t=e.search(/[^\s\u00a0]/))&&(t=e.length);let o=r;for(let r=i;r<t;r++)9==e.charCodeAt(r)?o+=n-o%n:o++;return o}class $e{constructor(e,t,n){this.string=e,this.tabSize=t,this.indentUnit=n,this.pos=0,this.start=0,this.lastColumnPos=0,this.lastColumnValue=0}eol(){return this.pos>=this.string.length}sol(){return 0==this.pos}peek(){return this.string.charAt(this.pos)||void 0}next(){if(this.pos<this.string.length)return this.string.charAt(this.pos++)}eat(e){let t,n=this.string.charAt(this.pos);if(t="string"==typeof e?n==e:n&&(e instanceof RegExp?e.test(n):e(n)),t)return++this.pos,n}eatWhile(e){let t=this.pos;for(;this.eat(e););return this.pos>t}eatSpace(){let e=this.pos;for(;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>e}skipToEnd(){this.pos=this.string.length}skipTo(e){let t=this.string.indexOf(e,this.pos);if(t>-1)return this.pos=t,!0}backUp(e){this.pos-=e}column(){return this.lastColumnPos<this.start&&(this.lastColumnValue=Te(this.string,this.start,this.tabSize,this.lastColumnPos,this.lastColumnValue),this.lastColumnPos=this.start),this.lastColumnValue}indentation(){return Te(this.string,null,this.tabSize)}match(e,t,n){if("string"==typeof e){let i=e=>n?e.toLowerCase():e;return i(this.string.substr(this.pos,e.length))==i(e)?(!1!==t&&(this.pos+=e.length),!0):null}{let n=this.string.slice(this.pos).match(e);return n&&n.index>0?null:(n&&!1!==t&&(this.pos+=n[0].length),n)}}current(){return this.string.slice(this.start,this.pos)}}function Pe(e){if("object"!=typeof e)return e;let t={};for(let n in e){let i=e[n];t[n]=i instanceof Array?i.slice():i}return t}class Ce extends h{constructor(e){let t,n=u(e.languageData),i={token:(o=e).token,blankLine:o.blankLine||(()=>{}),startState:o.startState||(()=>!0),copyState:o.copyState||Pe,indent:o.indent||(()=>null),languageData:o.languageData||{},tokenTable:o.tokenTable||Me};var o;super(n,new class extends r.Parser{createParse(e,n,i){return new Ae(t,e,n,i)}},[T.of(((e,t)=>this.getIndent(e,t)))]),this.topNode=function(e){let t=r.NodeType.define({id:Ie.length,name:"Document",props:[c.add((()=>e))]});return Ie.push(t),t}(n),t=this,this.streamParser=i,this.stateAfter=new r.NodeProp({perNode:!0}),this.tokenTable=e.tokenTable?new Ne(i.tokenTable):Le}static define(e){return new Ce(e)}getIndent(e,t){let n=p(e.state),i=n.resolve(t);for(;i&&i.type!=this.topNode;)i=i.parent;if(!i)return null;let r,o,s=Re(this,n,0,i.from,t);if(s?(o=s.state,r=s.pos+1):(o=this.streamParser.startState(e.unit),r=0),t-r>1e4)return null;for(;r<t;){let n=e.state.doc.lineAt(r),i=Math.min(t,n.to);if(n.length){let t=new $e(n.text,e.state.tabSize,e.unit);for(;t.pos<i-n.from;)We(this.streamParser.token,t,o)}else this.streamParser.blankLine(o,e.unit);if(i==t)break;r=n.to+1}let{text:a}=e.lineAt(t);return this.streamParser.indent(o,/^\s*(.*)/.exec(a)[1],e)}get allowsNesting(){return!1}}function Re(e,t,n,i,o){let s=n>=i&&n+t.length<=o&&t.prop(e.stateAfter);if(s)return{state:e.streamParser.copyState(s),pos:n+t.length};for(let s=t.children.length-1;s>=0;s--){let a=t.children[s],l=n+t.positions[s],c=a instanceof r.Tree&&l<o&&Re(e,a,l,i,o);if(c)return c}return null}function Ee(e,t,n,i,o){if(o&&n<=0&&i>=t.length)return t;o||t.type!=e.topNode||(o=!0);for(let s=t.children.length-1;s>=0;s--){let a,l=t.positions[s],c=t.children[s];if(l<i&&c instanceof r.Tree){if(!(a=Ee(e,c,n-l,i-l,o)))break;return o?new r.Tree(t.type,t.children.slice(0,s).concat(a),t.positions.slice(0,s+1),l+a.length):a}}return null}class Ae{constructor(e,t,n,i){this.lang=e,this.input=t,this.fragments=n,this.ranges=i,this.stoppedAt=null,this.chunks=[],this.chunkPos=[],this.chunk=[],this.chunkReused=void 0,this.rangeIndex=0,this.to=i[i.length-1].to;let o=v.get(),s=i[0].from,{state:a,tree:l}=function(e,t,n,i){for(let i of t){let t,r=i.from+(i.openStart?25:0),o=i.to-(i.openEnd?25:0),s=r<=n&&o>n&&Re(e,i.tree,0-i.offset,n,o);if(s&&(t=Ee(e,i.tree,n+i.offset,s.pos+i.offset,!1)))return{state:s.state,tree:t}}return{state:e.streamParser.startState(i?P(i):4),tree:r.Tree.empty}}(e,n,s,null==o?void 0:o.state);this.state=a,this.parsedPos=this.chunkStart=s+l.length;for(let e=0;e<l.children.length;e++)this.chunks.push(l.children[e]),this.chunkPos.push(l.positions[e]);o&&this.parsedPos<o.viewport.from-1e5&&(this.state=this.lang.streamParser.startState(P(o.state)),o.skipUntilInView(this.parsedPos,o.viewport.from),this.parsedPos=o.viewport.from),this.moveRangeIndex()}advance(){let e=v.get(),t=null==this.stoppedAt?this.to:Math.min(this.to,this.stoppedAt),n=Math.min(t,this.chunkStart+2048);for(e&&(n=Math.min(n,e.viewport.to));this.parsedPos<n;)this.parseLine(e);return this.chunkStart<this.parsedPos&&this.finishChunk(),this.parsedPos>=t?this.finish():e&&this.parsedPos>=e.viewport.to?(e.skipUntilInView(this.parsedPos,t),this.finish()):null}stopAt(e){this.stoppedAt=e}lineAfter(e){let t=this.input.chunk(e);if(this.input.lineChunks)"\n"==t&&(t="");else{let e=t.indexOf("\n");e>-1&&(t=t.slice(0,e))}return e+t.length<=this.to?t:t.slice(0,this.to-e)}nextLine(){let e=this.parsedPos,t=this.lineAfter(e),n=e+t.length;for(let e=this.rangeIndex;;){let i=this.ranges[e].to;if(i>=n)break;if(t=t.slice(0,i-(n-t.length)),e++,e==this.ranges.length)break;let r=this.ranges[e].from,o=this.lineAfter(r);t+=o,n=r+o.length}return{line:t,end:n}}skipGapsTo(e,t,n){for(;;){let i=this.ranges[this.rangeIndex].to,r=e+t;if(n>0?i>r:i>=r)break;t+=this.ranges[++this.rangeIndex].from-i}return t}moveRangeIndex(){for(;this.ranges[this.rangeIndex].to<this.parsedPos;)this.rangeIndex++}emitToken(e,t,n,i,r){if(this.ranges.length>1){t+=r=this.skipGapsTo(t,r,1);let e=this.chunk.length;n+=r=this.skipGapsTo(n,r,-1),i+=this.chunk.length-e}return this.chunk.push(e,t,n,i),r}parseLine(e){let{line:t,end:n}=this.nextLine(),i=0,{streamParser:r}=this.lang,o=new $e(t,e?e.state.tabSize:4,e?P(e.state):2);if(o.eol())r.blankLine(this.state,o.indentUnit);else for(;!o.eol();){let e=We(r.token,o,this.state);if(e&&(i=this.emitToken(this.lang.tokenTable.resolve(e),this.parsedPos+o.start,this.parsedPos+o.pos,4,i)),o.start>1e4)break}this.parsedPos=n,this.moveRangeIndex(),this.parsedPos<this.to&&this.parsedPos++}finishChunk(){let e=r.Tree.build({buffer:this.chunk,start:this.chunkStart,length:this.parsedPos-this.chunkStart,nodeSet:_e,topID:0,maxBufferLength:2048,reused:this.chunkReused});e=new r.Tree(e.type,e.children,e.positions,e.length,[[this.lang.stateAfter,this.lang.streamParser.copyState(this.state)]]),this.chunks.push(e),this.chunkPos.push(this.chunkStart-this.ranges[0].from),this.chunk=[],this.chunkReused=void 0,this.chunkStart=this.parsedPos}finish(){return new r.Tree(this.lang.topNode,this.chunks,this.chunkPos,this.parsedPos-this.ranges[0].from).balance()}}function We(e,t,n){t.start=t.pos;for(let i=0;i<10;i++){let i=e(t,n);if(t.pos>t.start)return i}throw new Error("Stream parser failed to advance stream.")}const Me=Object.create(null),Ie=[r.NodeType.none],_e=new r.NodeSet(Ie),De=[],ze=Object.create(null);for(let[e,t]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","typeName"],["attribute","propertyName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])ze[e]=Xe(Me,t);class Ne{constructor(e){this.extra=e,this.table=Object.assign(Object.create(null),ze)}resolve(e){return e?this.table[e]||(this.table[e]=Xe(this.extra,e)):0}}const Le=new Ne(Me);function je(e,t){De.indexOf(e)>-1||(De.push(e),console.warn(t))}function Xe(e,t){let n=null;for(let i of t.split(".")){let t=e[i]||a.tags[i];t?"function"==typeof t?n?n=t(n):je(i,`Modifier ${i} used at start of tag`):n?je(i,`Tag ${i} used as modifier`):n=t:je(i,`Unknown highlighting tag ${i}`)}if(!n)return 0;let i=t.replace(/ /g,"_"),o=r.NodeType.define({id:Ie.length,name:i,props:[a.styleTags({[i]:n})]});return Ie.push(o),o.id}t.HighlightStyle=ue,t.IndentContext=E,t.LRLanguage=d,t.Language=h,t.LanguageDescription=Q,t.LanguageSupport=class{constructor(e,t=[]){this.language=e,this.support=t,this.extension=[e,t]}},t.ParseContext=v,t.StreamLanguage=Ce,t.StringStream=$e,t.TreeIndentContext=_,t.bracketMatching=function(e={}){return[ve.of(e),Se]},t.codeFolding=oe,t.continuedIndent=function({except:e,units:t=1}={}){return n=>{let i=e&&e.test(n.textAfter);return n.baseIndent+(i?0:t*n.unit)}},t.defaultHighlightStyle=me,t.defineLanguageFacet=u,t.delimitedIndent=function({closing:e,align:t=!0,units:n=1}){return i=>z(i,t,n,e)},t.ensureSyntaxTree=m,t.flatIndent=e=>e.baseIndent,t.foldAll=ee,t.foldCode=H,t.foldEffect=U,t.foldGutter=function(e={}){let t=Object.assign(Object.assign({},ae),e),n=new le(t,!0),i=new le(t,!1),r=s.ViewPlugin.fromClass(class{constructor(e){this.from=e.viewport.from,this.markers=this.buildMarkers(e)}update(e){(e.docChanged||e.viewportChanged||e.startState.facet(k)!=e.state.facet(k)||e.startState.field(F,!1)!=e.state.field(F,!1)||p(e.startState)!=p(e.state)||t.foldingChanged(e))&&(this.markers=this.buildMarkers(e.view))}buildMarkers(e){let t=new o.RangeSetBuilder;for(let r of e.viewportLineBlocks){let o=G(e.state,r.from,r.to)?i:X(e.state,r.from,r.to)?n:null;o&&t.add(r.from,r.from,o)}return t.finish()}}),{domEventHandlers:a}=t;return[r,s.gutter({class:"cm-foldGutter",markers(e){var t;return(null===(t=e.plugin(r))||void 0===t?void 0:t.markers)||o.RangeSet.empty},initialSpacer:()=>new le(t,!1),domEventHandlers:Object.assign(Object.assign({},a),{click:(e,t,n)=>{if(a.click&&a.click(e,t,n))return!0;let i=G(e.state,t.from,t.to);if(i)return e.dispatch({effects:V.of(i)}),!0;let r=X(e.state,t.from,t.to);return!!r&&(e.dispatch({effects:U.of(r)}),!0)}})}),oe()]},t.foldInside=function(e){let t=e.firstChild,n=e.lastChild;return t&&t.to<n.from?{from:t.to,to:n.type.isError?e.to:n.from}:null},t.foldKeymap=ne,t.foldNodeProp=L,t.foldService=N,t.foldable=X,t.foldedRanges=function(e){return e.field(F,!1)||o.RangeSet.empty},t.forceParsing=function(e,t=e.viewport.to,n=100){let i=m(e.state,t,n);return i!=p(e.state)&&e.dispatch({}),!!i},t.getIndentUnit=P,t.getIndentation=R,t.highlightingFor=function(e,t,n){let i=de(e),r=null;if(i)for(let e of i)if(!e.scope||n&&e.scope(n)){let n=e.style(t);n&&(r=r?r+" "+n:n)}return r},t.indentNodeProp=A,t.indentOnInput=function(){return o.EditorState.transactionFilter.of((e=>{if(!e.docChanged||!e.isUserEvent("input.type")&&!e.isUserEvent("input.complete"))return e;let t=e.startState.languageDataAt("indentOnInput",e.startState.selection.main.head);if(!t.length)return e;let n=e.newDoc,{head:i}=e.newSelection.main,r=n.lineAt(i);if(i>r.from+200)return e;let o=n.sliceString(r.from,i);if(!t.some((e=>e.test(o))))return e;let{state:s}=e,a=-1,l=[];for(let{head:e}of s.selection.ranges){let t=s.doc.lineAt(e);if(t.from==a)continue;a=t.from;let n=R(s,t.from);if(null==n)continue;let i=/^\s*/.exec(t.text)[0],r=C(s,n);i!=r&&l.push({from:t.from,to:t.from+i.length,insert:r})}return l.length?[e,{changes:l,sequential:!0}]:e}))},t.indentService=T,t.indentString=C,t.indentUnit=$,t.language=k,t.languageDataProp=c,t.matchBrackets=ke,t.syntaxHighlighting=function(e,t){let n,i=[pe];return e instanceof ue&&(e.module&&i.push(s.EditorView.styleModule.of(e.module)),n=e.themeType),(null==t?void 0:t.fallback)?i.push(fe.of(e)):n?i.push(he.computeN([s.EditorView.darkTheme],(t=>t.facet(s.EditorView.darkTheme)==("dark"==n)?[e]:[]))):i.push(he.of(e)),i},t.syntaxParserRunning=function(e){var t;return(null===(t=e.plugin(x))||void 0===t?void 0:t.isWorking())||!1},t.syntaxTree=p,t.syntaxTreeAvailable=function(e,t=e.doc.length){var n;return(null===(n=e.field(h.state,!1))||void 0===n?void 0:n.context.isDone(t))||!1},t.unfoldAll=te,t.unfoldCode=J,t.unfoldEffect=V},426:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(642),r=n(40);function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(n(513));class a{constructor(e,t,n){this.from=e,this.to=t,this.diagnostic=n}}class l{constructor(e,t,n){this.diagnostics=e,this.panel=t,this.selected=n}static init(e,t,n){let r=e,o=n.facet(Q).markerFilter;o&&(r=o(r));let s=i.Decoration.set(r.map((e=>e.from==e.to||e.from==e.to-1&&n.doc.lineAt(e.from).to==e.from?i.Decoration.widget({widget:new P(e),diagnostic:e}).range(e.from):i.Decoration.mark({attributes:{class:"cm-lintRange cm-lintRange-"+e.severity},diagnostic:e}).range(e.from,e.to))),!0);return new l(s,t,c(s))}}function c(e,t=null,n=0){let i=null;return e.between(n,1e9,((e,n,{spec:r})=>{if(!t||r.diagnostic==t)return i=new a(e,n,r.diagnostic),!1})),i}function u(e,t){return!(!e.effects.some((e=>e.is(d)))&&!e.changes.touchesRange(t.pos))}function h(e,t){return e.field(g,!1)?t:t.concat(r.StateEffect.appendConfig.of([g,i.EditorView.decorations.compute([g],(e=>{let{selected:t,panel:n}=e.field(g);return t&&n&&t.from!=t.to?i.Decoration.set([O.range(t.from,t.to)]):i.Decoration.none})),i.hoverTooltip(v,{hideOn:u}),W]))}function f(e,t){return{effects:h(e,[d.of(t)])}}const d=r.StateEffect.define(),p=r.StateEffect.define(),m=r.StateEffect.define(),g=r.StateField.define({create:()=>new l(i.Decoration.none,null,null),update(e,t){if(t.docChanged){let n=e.diagnostics.map(t.changes),i=null;if(e.selected){let r=t.changes.mapPos(e.selected.from,1);i=c(n,e.selected.diagnostic,r)||c(n,null,r)}e=new l(n,e.panel,i)}for(let n of t.effects)n.is(d)?e=l.init(n.value,e.panel,t.state):n.is(p)?e=new l(e.diagnostics,n.value?R.open:null,e.selected):n.is(m)&&(e=new l(e.diagnostics,e.panel,n.value));return e},provide:e=>[i.showPanel.from(e,(e=>e.panel)),i.EditorView.decorations.from(e,(e=>e.diagnostics))]}),O=i.Decoration.mark({class:"cm-lintRange cm-lintRange-active"});function v(e,t,n){let{diagnostics:i}=e.state.field(g),r=[],o=2e8,s=0;i.between(t-(n<0?1:0),t+(n>0?1:0),((e,i,{spec:a})=>{t>=e&&t<=i&&(e==i||(t>e||n>0)&&(t<i||n<0))&&(r.push(a.diagnostic),o=Math.min(e,o),s=Math.max(i,s))}));let a=e.state.facet(Q).tooltipFilter;return a&&(r=a(r)),r.length?{pos:o,end:s,above:e.state.doc.lineAt(o).to<s,create:()=>({dom:y(e,r)})}:null}function y(e,t){return s.default("ul",{class:"cm-tooltip-lint"},t.map((t=>$(e,t,!1))))}const b=e=>{let t=e.state.field(g,!1);t&&t.panel||e.dispatch({effects:h(e.state,[p.of(!0)])});let n=i.getPanel(e,R.open);return n&&n.dom.querySelector(".cm-panel-lint ul").focus(),!0},w=e=>{let t=e.state.field(g,!1);return!(!t||!t.panel||(e.dispatch({effects:p.of(!1)}),0))},S=e=>{let t=e.state.field(g,!1);if(!t)return!1;let n=e.state.selection.main,i=t.diagnostics.iter(n.to+1);return!(!i.value&&(i=t.diagnostics.iter(0),!i.value||i.from==n.from&&i.to==n.to)||(e.dispatch({selection:{anchor:i.from,head:i.to},scrollIntoView:!0}),0))},x=[{key:"Mod-Shift-m",run:b},{key:"F8",run:S}],k=i.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.timeout=-1,this.set=!0;let{delay:t}=e.state.facet(Q);this.lintTime=Date.now()+t,this.run=this.run.bind(this),this.timeout=setTimeout(this.run,t)}run(){let e=Date.now();if(e<this.lintTime-10)setTimeout(this.run,this.lintTime-e);else{this.set=!1;let{state:e}=this.view,{sources:t}=e.facet(Q);Promise.all(t.map((e=>Promise.resolve(e(this.view))))).then((t=>{let n=t.reduce(((e,t)=>e.concat(t)));this.view.state.doc==e.doc&&this.view.dispatch(f(this.view.state,n))}),(e=>{i.logException(this.view.state,e)}))}}update(e){let t=e.state.facet(Q);(e.docChanged||t!=e.startState.facet(Q))&&(this.lintTime=Date.now()+t.delay,this.set||(this.set=!0,this.timeout=setTimeout(this.run,t.delay)))}force(){this.set&&(this.lintTime=Date.now(),this.run())}destroy(){clearTimeout(this.timeout)}}),Q=r.Facet.define({combine:e=>Object.assign({sources:e.map((e=>e.source))},r.combineConfig(e.map((e=>e.config)),{delay:750,markerFilter:null,tooltipFilter:null})),enables:k});function T(e){let t=[];if(e)e:for(let{name:n}of e){for(let e=0;e<n.length;e++){let i=n[e];if(/[a-zA-Z]/.test(i)&&!t.some((e=>e.toLowerCase()==i.toLowerCase()))){t.push(i);continue e}}t.push("")}return t}function $(e,t,n){var i;let r=n?T(t.actions):[];return s.default("li",{class:"cm-diagnostic cm-diagnostic-"+t.severity},s.default("span",{class:"cm-diagnosticText"},t.renderMessage?t.renderMessage():t.message),null===(i=t.actions)||void 0===i?void 0:i.map(((n,i)=>{let o=i=>{i.preventDefault();let r=c(e.state.field(g).diagnostics,t);r&&n.apply(e,r.from,r.to)},{name:a}=n,l=r[i]?a.indexOf(r[i]):-1,u=l<0?a:[a.slice(0,l),s.default("u",a.slice(l,l+1)),a.slice(l+1)];return s.default("button",{type:"button",class:"cm-diagnosticAction",onclick:o,onmousedown:o,"aria-label":` Action: ${a}${l<0?"":` (access key "${r[i]})"`}.`},u)})),t.source&&s.default("div",{class:"cm-diagnosticSource"},t.source))}class P extends i.WidgetType{constructor(e){super(),this.diagnostic=e}eq(e){return e.diagnostic==this.diagnostic}toDOM(){return s.default("span",{class:"cm-lintPoint cm-lintPoint-"+this.diagnostic.severity})}}class C{constructor(e,t){this.diagnostic=t,this.id="item_"+Math.floor(4294967295*Math.random()).toString(16),this.dom=$(e,t,!0),this.dom.id=this.id,this.dom.setAttribute("role","option")}}class R{constructor(e){this.view=e,this.items=[],this.list=s.default("ul",{tabIndex:0,role:"listbox","aria-label":this.view.state.phrase("Diagnostics"),onkeydown:t=>{if(27==t.keyCode)w(this.view),this.view.focus();else if(38==t.keyCode||33==t.keyCode)this.moveSelection((this.selectedIndex-1+this.items.length)%this.items.length);else if(40==t.keyCode||34==t.keyCode)this.moveSelection((this.selectedIndex+1)%this.items.length);else if(36==t.keyCode)this.moveSelection(0);else if(35==t.keyCode)this.moveSelection(this.items.length-1);else if(13==t.keyCode)this.view.focus();else{if(!(t.keyCode>=65&&t.keyCode<=90&&this.selectedIndex>=0))return;{let{diagnostic:n}=this.items[this.selectedIndex],i=T(n.actions);for(let r=0;r<i.length;r++)if(i[r].toUpperCase().charCodeAt(0)==t.keyCode){let t=c(this.view.state.field(g).diagnostics,n);t&&n.actions[r].apply(e,t.from,t.to)}}}t.preventDefault()},onclick:e=>{for(let t=0;t<this.items.length;t++)this.items[t].dom.contains(e.target)&&this.moveSelection(t)}}),this.dom=s.default("div",{class:"cm-panel-lint"},this.list,s.default("button",{type:"button",name:"close","aria-label":this.view.state.phrase("close"),onclick:()=>w(this.view)},"×")),this.update()}get selectedIndex(){let e=this.view.state.field(g).selected;if(!e)return-1;for(let t=0;t<this.items.length;t++)if(this.items[t].diagnostic==e.diagnostic)return t;return-1}update(){let{diagnostics:e,selected:t}=this.view.state.field(g),n=0,i=!1,r=null;for(e.between(0,this.view.state.doc.length,((e,o,{spec:s})=>{let a,l=-1;for(let e=n;e<this.items.length;e++)if(this.items[e].diagnostic==s.diagnostic){l=e;break}l<0?(a=new C(this.view,s.diagnostic),this.items.splice(n,0,a),i=!0):(a=this.items[l],l>n&&(this.items.splice(n,l-n),i=!0)),t&&a.diagnostic==t.diagnostic?a.dom.hasAttribute("aria-selected")||(a.dom.setAttribute("aria-selected","true"),r=a):a.dom.hasAttribute("aria-selected")&&a.dom.removeAttribute("aria-selected"),n++}));n<this.items.length&&!(1==this.items.length&&this.items[0].diagnostic.from<0);)i=!0,this.items.pop();0==this.items.length&&(this.items.push(new C(this.view,{from:-1,to:-1,severity:"info",message:this.view.state.phrase("No diagnostics")})),i=!0),r?(this.list.setAttribute("aria-activedescendant",r.id),this.view.requestMeasure({key:this,read:()=>({sel:r.dom.getBoundingClientRect(),panel:this.list.getBoundingClientRect()}),write:({sel:e,panel:t})=>{e.top<t.top?this.list.scrollTop-=t.top-e.top:e.bottom>t.bottom&&(this.list.scrollTop+=e.bottom-t.bottom)}})):this.selectedIndex<0&&this.list.removeAttribute("aria-activedescendant"),i&&this.sync()}sync(){let e=this.list.firstChild;function t(){let t=e;e=t.nextSibling,t.remove()}for(let n of this.items)if(n.dom.parentNode==this.list){for(;e!=n.dom;)t();e=n.dom.nextSibling}else this.list.insertBefore(n.dom,e);for(;e;)t()}moveSelection(e){if(this.selectedIndex<0)return;let t=c(this.view.state.field(g).diagnostics,this.items[e].diagnostic);t&&this.view.dispatch({selection:{anchor:t.from,head:t.to},scrollIntoView:!0,effects:m.of(t)})}static open(e){return new R(e)}}function E(e,t='viewBox="0 0 40 40"'){return`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t}>${encodeURIComponent(e)}</svg>')`}function A(e){return E(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${e}" fill="none" stroke-width=".7"/>`,'width="6" height="3"')}const W=i.EditorView.baseTheme({".cm-diagnostic":{padding:"3px 6px 3px 8px",marginLeft:"-1px",display:"block",whiteSpace:"pre-wrap"},".cm-diagnostic-error":{borderLeft:"5px solid #d11"},".cm-diagnostic-warning":{borderLeft:"5px solid orange"},".cm-diagnostic-info":{borderLeft:"5px solid #999"},".cm-diagnosticAction":{font:"inherit",border:"none",padding:"2px 4px",backgroundColor:"#444",color:"white",borderRadius:"3px",marginLeft:"8px"},".cm-diagnosticSource":{fontSize:"70%",opacity:.7},".cm-lintRange":{backgroundPosition:"left bottom",backgroundRepeat:"repeat-x",paddingBottom:"0.7px"},".cm-lintRange-error":{backgroundImage:A("#d11")},".cm-lintRange-warning":{backgroundImage:A("orange")},".cm-lintRange-info":{backgroundImage:A("#999")},".cm-lintRange-active":{backgroundColor:"#ffdd9980"},".cm-tooltip-lint":{padding:0,margin:0},".cm-lintPoint":{position:"relative","&:after":{content:'""',position:"absolute",bottom:0,left:"-2px",borderLeft:"3px solid transparent",borderRight:"3px solid transparent",borderBottom:"4px solid #d11"}},".cm-lintPoint-warning":{"&:after":{borderBottomColor:"orange"}},".cm-lintPoint-info":{"&:after":{borderBottomColor:"#999"}},".cm-panel.cm-panel-lint":{position:"relative","& ul":{maxHeight:"100px",overflowY:"auto","& [aria-selected]":{backgroundColor:"#ddd","& u":{textDecoration:"underline"}},"&:focus [aria-selected]":{background_fallback:"#bdf",backgroundColor:"Highlight",color_fallback:"white",color:"HighlightText"},"& u":{textDecoration:"none"},padding:0,margin:0},"& [name=close]":{position:"absolute",top:"0",right:"2px",background:"inherit",border:"none",font:"inherit",padding:0,margin:0}}});class M extends i.GutterMarker{constructor(e){super(),this.diagnostics=e,this.severity=e.reduce(((e,t)=>{let n=t.severity;return"error"==n||"warning"==n&&"info"==e?n:e}),"info")}toDOM(e){let t=document.createElement("div");t.className="cm-lint-marker cm-lint-marker-"+this.severity;let n=this.diagnostics,i=e.state.facet(j).tooltipFilter;return i&&(n=i(n)),n.length&&(t.onmouseover=()=>function(e,t,n){function i(){let i=e.elementAtHeight(t.getBoundingClientRect().top+5-e.documentTop);e.coordsAtPos(i.from)&&e.dispatch({effects:z.of({pos:i.from,above:!1,create:()=>({dom:y(e,n),getCoords:()=>t.getBoundingClientRect()})})}),t.onmouseout=t.onmousemove=null,function(e,t){let n=i=>{let r=t.getBoundingClientRect();if(!(i.clientX>r.left-10&&i.clientX<r.right+10&&i.clientY>r.top-10&&i.clientY<r.bottom+10)){for(let e=i.target;e;e=e.parentNode)if(1==e.nodeType&&e.classList.contains("cm-tooltip-lint"))return;window.removeEventListener("mousemove",n),e.state.field(N)&&e.dispatch({effects:z.of(null)})}};window.addEventListener("mousemove",n)}(e,t)}let{hoverTime:r}=e.state.facet(j),o=setTimeout(i,r);t.onmouseout=()=>{clearTimeout(o),t.onmouseout=t.onmousemove=null},t.onmousemove=()=>{clearTimeout(o),o=setTimeout(i,r)}}(e,t,n)),t}}function I(e,t){let n=Object.create(null);for(let i of t){let t=e.lineAt(i.from);(n[t.from]||(n[t.from]=[])).push(i)}let i=[];for(let e in n)i.push(new M(n[e]).range(+e));return r.RangeSet.of(i,!0)}const _=i.gutter({class:"cm-gutter-lint",markers:e=>e.state.field(D)}),D=r.StateField.define({create:()=>r.RangeSet.empty,update(e,t){e=e.map(t.changes);let n=t.state.facet(j).markerFilter;for(let i of t.effects)if(i.is(d)){let r=i.value;n&&(r=n(r||[])),e=I(t.state.doc,r.slice(0))}return e}}),z=r.StateEffect.define(),N=r.StateField.define({create:()=>null,update:(e,t)=>(e&&t.docChanged&&(e=u(t,e)?null:Object.assign(Object.assign({},e),{pos:t.changes.mapPos(e.pos)})),t.effects.reduce(((e,t)=>t.is(z)?t.value:e),e)),provide:e=>i.showTooltip.from(e)}),L=i.EditorView.baseTheme({".cm-gutter-lint":{width:"1.4em","& .cm-gutterElement":{padding:".2em"}},".cm-lint-marker":{width:"1em",height:"1em"},".cm-lint-marker-info":{content:E('<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>')},".cm-lint-marker-warning":{content:E('<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>')},".cm-lint-marker-error:before":{content:E('<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>')}}),j=r.Facet.define({combine:e=>r.combineConfig(e,{hoverTime:300,markerFilter:null,tooltipFilter:null})});t.closeLintPanel=w,t.diagnosticCount=function(e){let t=e.field(g,!1);return t?t.diagnostics.size:0},t.forceLinting=function(e){let t=e.plugin(k);t&&t.force()},t.lintGutter=function(e={}){return[j.of(e),D,_,L,N]},t.lintKeymap=x,t.linter=function(e,t={}){return Q.of({source:e,config:t})},t.nextDiagnostic=S,t.openLintPanel=b,t.setDiagnostics=f,t.setDiagnosticsEffect=d},502:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(642),r=n(40);function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(n(513));const a="function"==typeof String.prototype.normalize?e=>e.normalize("NFKD"):e=>e;class l{constructor(e,t,n=0,i=e.length,r){this.value={from:0,to:0},this.done=!1,this.matches=[],this.buffer="",this.bufferPos=0,this.iter=e.iterRange(n,i),this.bufferStart=n,this.normalize=r?e=>r(a(e)):a,this.query=this.normalize(t)}peek(){if(this.bufferPos==this.buffer.length){if(this.bufferStart+=this.buffer.length,this.iter.next(),this.iter.done)return-1;this.bufferPos=0,this.buffer=this.iter.value}return r.codePointAt(this.buffer,this.bufferPos)}next(){for(;this.matches.length;)this.matches.pop();return this.nextOverlapping()}nextOverlapping(){for(;;){let e=this.peek();if(e<0)return this.done=!0,this;let t=r.fromCodePoint(e),n=this.bufferStart+this.bufferPos;this.bufferPos+=r.codePointSize(e);let i=this.normalize(t);for(let e=0,r=n;;e++){let o=i.charCodeAt(e),s=this.match(o,r);if(s)return this.value=s,this;if(e==i.length-1)break;r==n&&e<t.length&&t.charCodeAt(e)==o&&r++}}}match(e,t){let n=null;for(let i=0;i<this.matches.length;i+=2){let r=this.matches[i],o=!1;this.query.charCodeAt(r)==e&&(r==this.query.length-1?n={from:this.matches[i+1],to:t+1}:(this.matches[i]++,o=!0)),o||(this.matches.splice(i,2),i-=2)}return this.query.charCodeAt(0)==e&&(1==this.query.length?n={from:t,to:t+1}:this.matches.push(1,t)),n}}"undefined"!=typeof Symbol&&(l.prototype[Symbol.iterator]=function(){return this});const c={from:-1,to:-1,match:/.*/.exec("")},u="gm"+(null==/x/.unicode?"":"u");class h{constructor(e,t,n,i=0,r=e.length){if(this.to=r,this.curLine="",this.done=!1,this.value=c,/\\[sWDnr]|\n|\r|\[\^/.test(t))return new p(e,t,n,i,r);this.re=new RegExp(t,u+((null==n?void 0:n.ignoreCase)?"i":"")),this.iter=e.iter();let o=e.lineAt(i);this.curLineStart=o.from,this.matchPos=i,this.getLine(this.curLineStart)}getLine(e){this.iter.next(e),this.iter.lineBreak?this.curLine="":(this.curLine=this.iter.value,this.curLineStart+this.curLine.length>this.to&&(this.curLine=this.curLine.slice(0,this.to-this.curLineStart)),this.iter.next())}nextLine(){this.curLineStart=this.curLineStart+this.curLine.length+1,this.curLineStart>this.to?this.curLine="":this.getLine(0)}next(){for(let e=this.matchPos-this.curLineStart;;){this.re.lastIndex=e;let t=this.matchPos<=this.to&&this.re.exec(this.curLine);if(t){let n=this.curLineStart+t.index,i=n+t[0].length;if(this.matchPos=i+(n==i?1:0),n==this.curLine.length&&this.nextLine(),n<i||n>this.value.to)return this.value={from:n,to:i,match:t},this;e=this.matchPos-this.curLineStart}else{if(!(this.curLineStart+this.curLine.length<this.to))return this.done=!0,this;this.nextLine(),e=0}}}}const f=new WeakMap;class d{constructor(e,t){this.from=e,this.text=t}get to(){return this.from+this.text.length}static get(e,t,n){let i=f.get(e);if(!i||i.from>=n||i.to<=t){let i=new d(t,e.sliceString(t,n));return f.set(e,i),i}if(i.from==t&&i.to==n)return i;let{text:r,from:o}=i;return o>t&&(r=e.sliceString(t,o)+r,o=t),i.to<n&&(r+=e.sliceString(i.to,n)),f.set(e,new d(o,r)),new d(t,r.slice(t-o,n-o))}}class p{constructor(e,t,n,i,r){this.text=e,this.to=r,this.done=!1,this.value=c,this.matchPos=i,this.re=new RegExp(t,u+((null==n?void 0:n.ignoreCase)?"i":"")),this.flat=d.get(e,i,this.chunkEnd(i+5e3))}chunkEnd(e){return e>=this.to?this.to:this.text.lineAt(e).to}next(){for(;;){let e=this.re.lastIndex=this.matchPos-this.flat.from,t=this.re.exec(this.flat.text);if(t&&!t[0]&&t.index==e&&(this.re.lastIndex=e+1,t=this.re.exec(this.flat.text)),t&&this.flat.to<this.to&&t.index+t[0].length>this.flat.text.length-10&&(t=null),t){let e=this.flat.from+t.index,n=e+t[0].length;return this.value={from:e,to:n,match:t},this.matchPos=n+(e==n?1:0),this}if(this.flat.to==this.to)return this.done=!0,this;this.flat=d.get(this.text,this.flat.from,this.chunkEnd(this.flat.from+2*this.flat.text.length))}}}function m(e){let t=s.default("input",{class:"cm-textfield",name:"line"});function n(){let n=/^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value);if(!n)return;let{state:i}=e,o=i.doc.lineAt(i.selection.main.head),[,s,a,l,c]=n,u=l?+l.slice(1):0,h=a?+a:o.number;if(a&&c){let e=h/100;s&&(e=e*("-"==s?-1:1)+o.number/i.doc.lines),h=Math.round(i.doc.lines*e)}else a&&s&&(h=h*("-"==s?-1:1)+o.number);let f=i.doc.line(Math.max(1,Math.min(i.doc.lines,h)));e.dispatch({effects:g.of(!1),selection:r.EditorSelection.cursor(f.from+Math.max(0,Math.min(u,f.length))),scrollIntoView:!0}),e.focus()}return{dom:s.default("form",{class:"cm-gotoLine",onkeydown:t=>{27==t.keyCode?(t.preventDefault(),e.dispatch({effects:g.of(!1)}),e.focus()):13==t.keyCode&&(t.preventDefault(),n())},onsubmit:e=>{e.preventDefault(),n()}},s.default("label",e.state.phrase("Go to line"),": ",t)," ",s.default("button",{class:"cm-button",type:"submit"},e.state.phrase("go")))}}"undefined"!=typeof Symbol&&(h.prototype[Symbol.iterator]=p.prototype[Symbol.iterator]=function(){return this});const g=r.StateEffect.define(),O=r.StateField.define({create:()=>!0,update(e,t){for(let n of t.effects)n.is(g)&&(e=n.value);return e},provide:e=>i.showPanel.from(e,(e=>e?m:null))}),v=e=>{let t=i.getPanel(e,m);if(!t){let n=[g.of(!0)];null==e.state.field(O,!1)&&n.push(r.StateEffect.appendConfig.of([O,y])),e.dispatch({effects:n}),t=i.getPanel(e,m)}return t&&t.dom.querySelector("input").focus(),!0},y=i.EditorView.baseTheme({".cm-panel.cm-gotoLine":{padding:"2px 6px 4px","& label":{fontSize:"80%"}}}),b={highlightWordAroundCursor:!1,minSelectionLength:1,maxMatches:100,wholeWords:!1},w=r.Facet.define({combine:e=>r.combineConfig(e,b,{highlightWordAroundCursor:(e,t)=>e||t,minSelectionLength:Math.min,maxMatches:Math.min})}),S=i.Decoration.mark({class:"cm-selectionMatch"}),x=i.Decoration.mark({class:"cm-selectionMatch cm-selectionMatch-main"});function k(e,t,n,i){return!(0!=n&&e(t.sliceDoc(n-1,n))==r.CharCategory.Word||i!=t.doc.length&&e(t.sliceDoc(i,i+1))==r.CharCategory.Word)}function Q(e,t,n,i){return e(t.sliceDoc(n,n+1))==r.CharCategory.Word&&e(t.sliceDoc(i-1,i))==r.CharCategory.Word}const T=i.ViewPlugin.fromClass(class{constructor(e){this.decorations=this.getDeco(e)}update(e){(e.selectionSet||e.docChanged||e.viewportChanged)&&(this.decorations=this.getDeco(e.view))}getDeco(e){let t=e.state.facet(w),{state:n}=e,r=n.selection;if(r.ranges.length>1)return i.Decoration.none;let o,s=r.main,a=null;if(s.empty){if(!t.highlightWordAroundCursor)return i.Decoration.none;let e=n.wordAt(s.head);if(!e)return i.Decoration.none;a=n.charCategorizer(s.head),o=n.sliceDoc(e.from,e.to)}else{let e=s.to-s.from;if(e<t.minSelectionLength||e>200)return i.Decoration.none;if(t.wholeWords){if(o=n.sliceDoc(s.from,s.to),a=n.charCategorizer(s.head),!k(a,n,s.from,s.to)||!Q(a,n,s.from,s.to))return i.Decoration.none}else if(o=n.sliceDoc(s.from,s.to).trim(),!o)return i.Decoration.none}let c=[];for(let r of e.visibleRanges){let e=new l(n.doc,o,r.from,r.to);for(;!e.next().done;){let{from:r,to:o}=e.value;if((!a||k(a,n,r,o))&&(s.empty&&r<=s.from&&o>=s.to?c.push(x.range(r,o)):(r>=s.to||o<=s.from)&&c.push(S.range(r,o)),c.length>t.maxMatches))return i.Decoration.none}}return i.Decoration.set(c)}},{decorations:e=>e.decorations}),$=i.EditorView.baseTheme({".cm-selectionMatch":{backgroundColor:"#99ff7780"},".cm-searchMatch .cm-selectionMatch":{backgroundColor:"transparent"}}),P=({state:e,dispatch:t})=>{let{ranges:n}=e.selection;if(n.some((e=>e.from===e.to)))return(({state:e,dispatch:t})=>{let{selection:n}=e,i=r.EditorSelection.create(n.ranges.map((t=>e.wordAt(t.head)||r.EditorSelection.cursor(t.head))),n.mainIndex);return!i.eq(n)&&(t(e.update({selection:i})),!0)})({state:e,dispatch:t});let o=e.sliceDoc(n[0].from,n[0].to);if(e.selection.ranges.some((t=>e.sliceDoc(t.from,t.to)!=o)))return!1;let s=function(e,t){let{main:n,ranges:i}=e.selection,r=e.wordAt(n.head),o=r&&r.from==n.from&&r.to==n.to;for(let n=!1,r=new l(e.doc,t,i[i.length-1].to);;){if(r.next(),!r.done){if(n&&i.some((e=>e.from==r.value.from)))continue;if(o){let t=e.wordAt(r.value.from);if(!t||t.from!=r.value.from||t.to!=r.value.to)continue}return r.value}if(n)return null;r=new l(e.doc,t,0,Math.max(0,i[i.length-1].from-1)),n=!0}}(e,o);return!!s&&(t(e.update({selection:e.selection.addRange(r.EditorSelection.range(s.from,s.to),!1),effects:i.EditorView.scrollIntoView(s.to)})),!0)},C=r.Facet.define({combine(e){var t;return{top:e.reduce(((e,t)=>null!=e?e:t.top),void 0)||!1,caseSensitive:e.reduce(((e,t)=>null!=e?e:t.caseSensitive),void 0)||!1,createPanel:(null===(t=e.find((e=>e.createPanel)))||void 0===t?void 0:t.createPanel)||(e=>new te(e))}}});class R{constructor(e){this.search=e.search,this.caseSensitive=!!e.caseSensitive,this.regexp=!!e.regexp,this.replace=e.replace||"",this.valid=!!this.search&&(!this.regexp||function(e){try{return new RegExp(e,u),!0}catch(e){return!1}}(this.search)),this.unquoted=e.literal?this.search:this.search.replace(/\\([nrt\\])/g,((e,t)=>"n"==t?"\n":"r"==t?"\r":"t"==t?"\t":"\\"))}eq(e){return this.search==e.search&&this.replace==e.replace&&this.caseSensitive==e.caseSensitive&&this.regexp==e.regexp}create(){return this.regexp?new I(this):new W(this)}getCursor(e,t=0,n=e.length){return this.regexp?M(this,e,t,n):A(this,e,t,n)}}class E{constructor(e){this.spec=e}}function A(e,t,n,i){return new l(t,e.unquoted,n,i,e.caseSensitive?void 0:e=>e.toLowerCase())}class W extends E{constructor(e){super(e)}nextMatch(e,t,n){let i=A(this.spec,e,n,e.length).nextOverlapping();return i.done&&(i=A(this.spec,e,0,t).nextOverlapping()),i.done?null:i.value}prevMatchInRange(e,t,n){for(let i=n;;){let n=Math.max(t,i-1e4-this.spec.unquoted.length),r=A(this.spec,e,n,i),o=null;for(;!r.nextOverlapping().done;)o=r.value;if(o)return o;if(n==t)return null;i-=1e4}}prevMatch(e,t,n){return this.prevMatchInRange(e,0,t)||this.prevMatchInRange(e,n,e.length)}getReplacement(e){return this.spec.replace}matchAll(e,t){let n=A(this.spec,e,0,e.length),i=[];for(;!n.next().done;){if(i.length>=t)return null;i.push(n.value)}return i}highlight(e,t,n,i){let r=A(this.spec,e,Math.max(0,t-this.spec.unquoted.length),Math.min(n+this.spec.unquoted.length,e.length));for(;!r.next().done;)i(r.value.from,r.value.to)}}function M(e,t,n,i){return new h(t,e.search,e.caseSensitive?void 0:{ignoreCase:!0},n,i)}class I extends E{nextMatch(e,t,n){let i=M(this.spec,e,n,e.length).next();return i.done&&(i=M(this.spec,e,0,t).next()),i.done?null:i.value}prevMatchInRange(e,t,n){for(let i=1;;i++){let r=Math.max(t,n-1e4*i),o=M(this.spec,e,r,n),s=null;for(;!o.next().done;)s=o.value;if(s&&(r==t||s.from>r+10))return s;if(r==t)return null}}prevMatch(e,t,n){return this.prevMatchInRange(e,0,t)||this.prevMatchInRange(e,n,e.length)}getReplacement(e){return this.spec.replace.replace(/\$([$&\d+])/g,((t,n)=>"$"==n?"$":"&"==n?e.match[0]:"0"!=n&&+n<e.match.length?e.match[n]:t))}matchAll(e,t){let n=M(this.spec,e,0,e.length),i=[];for(;!n.next().done;){if(i.length>=t)return null;i.push(n.value)}return i}highlight(e,t,n,i){let r=M(this.spec,e,Math.max(0,t-250),Math.min(n+250,e.length));for(;!r.next().done;)i(r.value.from,r.value.to)}}const _=r.StateEffect.define(),D=r.StateEffect.define(),z=r.StateField.define({create:e=>new N(H(e).create(),null),update(e,t){for(let n of t.effects)n.is(_)?e=new N(n.value.create(),e.panel):n.is(D)&&(e=new N(e.query,n.value?q:null));return e},provide:e=>i.showPanel.from(e,(e=>e.panel))});class N{constructor(e,t){this.query=e,this.panel=t}}const L=i.Decoration.mark({class:"cm-searchMatch"}),j=i.Decoration.mark({class:"cm-searchMatch cm-searchMatch-selected"}),X=i.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.decorations=this.highlight(e.state.field(z))}update(e){let t=e.state.field(z);(t!=e.startState.field(z)||e.docChanged||e.selectionSet||e.viewportChanged)&&(this.decorations=this.highlight(t))}highlight({query:e,panel:t}){if(!t||!e.spec.valid)return i.Decoration.none;let{view:n}=this,o=new r.RangeSetBuilder;for(let t=0,i=n.visibleRanges,r=i.length;t<r;t++){let{from:s,to:a}=i[t];for(;t<r-1&&a>i[t+1].from-500;)a=i[++t].to;e.highlight(n.state.doc,s,a,((e,t)=>{let i=n.state.selection.ranges.some((n=>n.from==e&&n.to==t));o.add(e,t,i?j:L)}))}return o.finish()}},{decorations:e=>e.decorations});function Z(e){return t=>{let n=t.state.field(z,!1);return n&&n.query.spec.valid?e(t,n):J(t)}}const U=Z(((e,{query:t})=>{let{from:n,to:i}=e.state.selection.main,r=t.nextMatch(e.state.doc,n,i);return!(!r||r.from==n&&r.to==i||(e.dispatch({selection:{anchor:r.from,head:r.to},scrollIntoView:!0,effects:re(e,r),userEvent:"select.search"}),0))})),V=Z(((e,{query:t})=>{let{state:n}=e,{from:i,to:r}=n.selection.main,o=t.prevMatch(n.doc,i,r);return!!o&&(e.dispatch({selection:{anchor:o.from,head:o.to},scrollIntoView:!0,effects:re(e,o),userEvent:"select.search"}),!0)})),B=Z(((e,{query:t})=>{let n=t.matchAll(e.state.doc,1e3);return!(!n||!n.length||(e.dispatch({selection:r.EditorSelection.create(n.map((e=>r.EditorSelection.range(e.from,e.to)))),userEvent:"select.search.matches"}),0))})),F=({state:e,dispatch:t})=>{let n=e.selection;if(n.ranges.length>1||n.main.empty)return!1;let{from:i,to:o}=n.main,s=[],a=0;for(let t=new l(e.doc,e.sliceDoc(i,o));!t.next().done;){if(s.length>1e3)return!1;t.value.from==i&&(a=s.length),s.push(r.EditorSelection.range(t.value.from,t.value.to))}return t(e.update({selection:r.EditorSelection.create(s,a),userEvent:"select.search.matches"})),!0},G=Z(((e,{query:t})=>{let{state:n}=e,{from:r,to:o}=n.selection.main;if(n.readOnly)return!1;let s=t.nextMatch(n.doc,r,r);if(!s)return!1;let a,l,c=[],u=[];if(s.from==r&&s.to==o&&(l=n.toText(t.getReplacement(s)),c.push({from:s.from,to:s.to,insert:l}),s=t.nextMatch(n.doc,s.from,s.to),u.push(i.EditorView.announce.of(n.phrase("replaced match on line $",n.doc.lineAt(r).number)+"."))),s){let t=0==c.length||c[0].from>=s.to?0:s.to-s.from-l.length;a={anchor:s.from-t,head:s.to-t},u.push(re(e,s))}return e.dispatch({changes:c,selection:a,scrollIntoView:!!a,effects:u,userEvent:"input.replace"}),!0})),Y=Z(((e,{query:t})=>{if(e.state.readOnly)return!1;let n=t.matchAll(e.state.doc,1e9).map((e=>{let{from:n,to:i}=e;return{from:n,to:i,insert:t.getReplacement(e)}}));if(!n.length)return!1;let r=e.state.phrase("replaced $ matches",n.length)+".";return e.dispatch({changes:n,effects:i.EditorView.announce.of(r),userEvent:"input.replace.all"}),!0}));function q(e){return e.state.facet(C).createPanel(e)}function H(e,t){var n;let i=e.selection.main,r=i.empty||i.to>i.from+100?"":e.sliceDoc(i.from,i.to),o=null!==(n=null==t?void 0:t.caseSensitive)&&void 0!==n?n:e.facet(C).caseSensitive;return t&&!r?t:new R({search:r.replace(/\n/g,"\\n"),caseSensitive:o})}const J=e=>{let t=e.state.field(z,!1);if(t&&t.panel){let n=i.getPanel(e,q);if(!n)return!1;let r=n.dom.querySelector("[main-field]");if(r&&r!=e.root.activeElement){let n=H(e.state,t.query.spec);n.valid&&e.dispatch({effects:_.of(n)}),r.focus(),r.select()}}else e.dispatch({effects:[D.of(!0),t?_.of(H(e.state,t.query.spec)):r.StateEffect.appendConfig.of(se)]});return!0},K=e=>{let t=e.state.field(z,!1);if(!t||!t.panel)return!1;let n=i.getPanel(e,q);return n&&n.dom.contains(e.root.activeElement)&&e.focus(),e.dispatch({effects:D.of(!1)}),!0},ee=[{key:"Mod-f",run:J,scope:"editor search-panel"},{key:"F3",run:U,shift:V,scope:"editor search-panel",preventDefault:!0},{key:"Mod-g",run:U,shift:V,scope:"editor search-panel",preventDefault:!0},{key:"Escape",run:K,scope:"editor search-panel"},{key:"Mod-Shift-l",run:F},{key:"Alt-g",run:v},{key:"Mod-d",run:P,preventDefault:!0}];class te{constructor(e){this.view=e;let t=this.query=e.state.field(z).query.spec;function n(e,t,n){return s.default("button",{class:"cm-button",name:e,onclick:t,type:"button"},n)}this.commit=this.commit.bind(this),this.searchField=s.default("input",{value:t.search,placeholder:ne(e,"Find"),"aria-label":ne(e,"Find"),class:"cm-textfield",name:"search","main-field":"true",onchange:this.commit,onkeyup:this.commit}),this.replaceField=s.default("input",{value:t.replace,placeholder:ne(e,"Replace"),"aria-label":ne(e,"Replace"),class:"cm-textfield",name:"replace",onchange:this.commit,onkeyup:this.commit}),this.caseField=s.default("input",{type:"checkbox",name:"case",checked:t.caseSensitive,onchange:this.commit}),this.reField=s.default("input",{type:"checkbox",name:"re",checked:t.regexp,onchange:this.commit}),this.dom=s.default("div",{onkeydown:e=>this.keydown(e),class:"cm-search"},[this.searchField,n("next",(()=>U(e)),[ne(e,"next")]),n("prev",(()=>V(e)),[ne(e,"previous")]),n("select",(()=>B(e)),[ne(e,"all")]),s.default("label",null,[this.caseField,ne(e,"match case")]),s.default("label",null,[this.reField,ne(e,"regexp")]),...e.state.readOnly?[]:[s.default("br"),this.replaceField,n("replace",(()=>G(e)),[ne(e,"replace")]),n("replaceAll",(()=>Y(e)),[ne(e,"replace all")]),s.default("button",{name:"close",onclick:()=>K(e),"aria-label":ne(e,"close"),type:"button"},["×"])]])}commit(){let e=new R({search:this.searchField.value,caseSensitive:this.caseField.checked,regexp:this.reField.checked,replace:this.replaceField.value});e.eq(this.query)||(this.query=e,this.view.dispatch({effects:_.of(e)}))}keydown(e){i.runScopeHandlers(this.view,e,"search-panel")?e.preventDefault():13==e.keyCode&&e.target==this.searchField?(e.preventDefault(),(e.shiftKey?V:U)(this.view)):13==e.keyCode&&e.target==this.replaceField&&(e.preventDefault(),G(this.view))}update(e){for(let t of e.transactions)for(let e of t.effects)e.is(_)&&!e.value.eq(this.query)&&this.setQuery(e.value)}setQuery(e){this.query=e,this.searchField.value=e.search,this.replaceField.value=e.replace,this.caseField.checked=e.caseSensitive,this.reField.checked=e.regexp}mount(){this.searchField.select()}get pos(){return 80}get top(){return this.view.state.facet(C).top}}function ne(e,t){return e.state.phrase(t)}const ie=/[\s\.,:;?!]/;function re(e,{from:t,to:n}){let r=e.state.doc.lineAt(t),o=e.state.doc.lineAt(n).to,s=Math.max(r.from,t-30),a=Math.min(o,n+30),l=e.state.sliceDoc(s,a);if(s!=r.from)for(let e=0;e<30;e++)if(!ie.test(l[e+1])&&ie.test(l[e])){l=l.slice(e);break}if(a!=o)for(let e=l.length-1;e>l.length-30;e--)if(!ie.test(l[e-1])&&ie.test(l[e])){l=l.slice(0,e);break}return i.EditorView.announce.of(`${e.state.phrase("current match")}. ${l} ${e.state.phrase("on line")} ${r.number}.`)}const oe=i.EditorView.baseTheme({".cm-panel.cm-search":{padding:"2px 6px 4px",position:"relative","& [name=close]":{position:"absolute",top:"0",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",padding:0,margin:0},"& input, & button, & label":{margin:".2em .6em .2em 0"},"& input[type=checkbox]":{marginRight:".2em"},"& label":{fontSize:"80%",whiteSpace:"pre"}},"&light .cm-searchMatch":{backgroundColor:"#ffff0054"},"&dark .cm-searchMatch":{backgroundColor:"#00ffff8a"},"&light .cm-searchMatch-selected":{backgroundColor:"#ff6a0054"},"&dark .cm-searchMatch-selected":{backgroundColor:"#ff00ff8a"}}),se=[z,r.Prec.lowest(X),oe];t.RegExpCursor=h,t.SearchCursor=l,t.SearchQuery=R,t.closeSearchPanel=K,t.findNext=U,t.findPrevious=V,t.getSearchQuery=function(e){let t=e.field(z,!1);return t?t.query.spec:H(e)},t.gotoLine=v,t.highlightSelectionMatches=function(e){let t=[$,T];return e&&t.push(w.of(e)),t},t.openSearchPanel=J,t.replaceAll=Y,t.replaceNext=G,t.search=function(e){return e?[C.of(e),se]:se},t.searchKeymap=ee,t.selectMatches=B,t.selectNextOccurrence=P,t.selectSelectionMatches=F,t.setSearchQuery=_},40:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(){}lineAt(e){if(e<0||e>this.length)throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);return this.lineInner(e,!1,1,0)}line(e){if(e<1||e>this.lines)throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);return this.lineInner(e,!0,1,0)}replace(e,t,n){let i=[];return this.decompose(0,e,i,2),n.length&&n.decompose(0,n.length,i,3),this.decompose(t,this.length,i,1),r.from(i,this.length-(t-e)+n.length)}append(e){return this.replace(this.length,this.length,e)}slice(e,t=this.length){let n=[];return this.decompose(e,t,n,0),r.from(n,t-e)}eq(e){if(e==this)return!0;if(e.length!=this.length||e.lines!=this.lines)return!1;let t=this.scanIdentical(e,1),n=this.length-this.scanIdentical(e,-1),i=new a(this),r=new a(e);for(let e=t,o=t;;){if(i.next(e),r.next(e),e=0,i.lineBreak!=r.lineBreak||i.done!=r.done||i.value!=r.value)return!1;if(o+=i.value.length,i.done||o>=n)return!0}}iter(e=1){return new a(this,e)}iterRange(e,t=this.length){return new l(this,e,t)}iterLines(e,t){let n;if(null==e)n=this.iter();else{null==t&&(t=this.lines+1);let i=this.line(e).from;n=this.iterRange(i,Math.max(i,t==this.lines+1?this.length:t<=1?0:this.line(t-1).to))}return new c(n)}toString(){return this.sliceString(0)}toJSON(){let e=[];return this.flatten(e),e}static of(e){if(0==e.length)throw new RangeError("A document must have at least one line");return 1!=e.length||e[0]?e.length<=32?new i(e):r.from(i.split(e,[])):n.empty}}class i extends n{constructor(e,t=function(e){let t=-1;for(let n of e)t+=n.length+1;return t}(e)){super(),this.text=e,this.length=t}get lines(){return this.text.length}get children(){return null}lineInner(e,t,n,i){for(let r=0;;r++){let o=this.text[r],s=i+o.length;if((t?n:s)>=e)return new u(i,s,n,o);i=s+1,n++}}decompose(e,t,n,r){let a=e<=0&&t>=this.length?this:new i(s(this.text,e,t),Math.min(t,this.length)-Math.max(0,e));if(1&r){let e=n.pop(),t=o(a.text,e.text.slice(),0,a.length);if(t.length<=32)n.push(new i(t,e.length+a.length));else{let e=t.length>>1;n.push(new i(t.slice(0,e)),new i(t.slice(e)))}}else n.push(a)}replace(e,t,n){if(!(n instanceof i))return super.replace(e,t,n);let a=o(this.text,o(n.text,s(this.text,0,e)),t),l=this.length+n.length-(t-e);return a.length<=32?new i(a,l):r.from(i.split(a,[]),l)}sliceString(e,t=this.length,n="\n"){let i="";for(let r=0,o=0;r<=t&&o<this.text.length;o++){let s=this.text[o],a=r+s.length;r>e&&o&&(i+=n),e<a&&t>r&&(i+=s.slice(Math.max(0,e-r),t-r)),r=a+1}return i}flatten(e){for(let t of this.text)e.push(t)}scanIdentical(){return 0}static split(e,t){let n=[],r=-1;for(let o of e)n.push(o),r+=o.length+1,32==n.length&&(t.push(new i(n,r)),n=[],r=-1);return r>-1&&t.push(new i(n,r)),t}}class r extends n{constructor(e,t){super(),this.children=e,this.length=t,this.lines=0;for(let t of e)this.lines+=t.lines}lineInner(e,t,n,i){for(let r=0;;r++){let o=this.children[r],s=i+o.length,a=n+o.lines-1;if((t?a:s)>=e)return o.lineInner(e,t,n,i);i=s+1,n=a+1}}decompose(e,t,n,i){for(let r=0,o=0;o<=t&&r<this.children.length;r++){let s=this.children[r],a=o+s.length;if(e<=a&&t>=o){let r=i&((o<=e?1:0)|(a>=t?2:0));o>=e&&a<=t&&!r?n.push(s):s.decompose(e-o,t-o,n,r)}o=a+1}}replace(e,t,n){if(n.lines<this.lines)for(let i=0,o=0;i<this.children.length;i++){let s=this.children[i],a=o+s.length;if(e>=o&&t<=a){let l=s.replace(e-o,t-o,n),c=this.lines-s.lines+l.lines;if(l.lines<c>>4&&l.lines>c>>6){let o=this.children.slice();return o[i]=l,new r(o,this.length-(t-e)+n.length)}return super.replace(o,a,l)}o=a+1}return super.replace(e,t,n)}sliceString(e,t=this.length,n="\n"){let i="";for(let r=0,o=0;r<this.children.length&&o<=t;r++){let s=this.children[r],a=o+s.length;o>e&&r&&(i+=n),e<a&&t>o&&(i+=s.sliceString(e-o,t-o,n)),o=a+1}return i}flatten(e){for(let t of this.children)t.flatten(e)}scanIdentical(e,t){if(!(e instanceof r))return 0;let n=0,[i,o,s,a]=t>0?[0,0,this.children.length,e.children.length]:[this.children.length-1,e.children.length-1,-1,-1];for(;;i+=t,o+=t){if(i==s||o==a)return n;let r=this.children[i],l=e.children[o];if(r!=l)return n+r.scanIdentical(l,t);n+=r.length+1}}static from(e,t=e.reduce(((e,t)=>e+t.length+1),-1)){let n=0;for(let t of e)n+=t.lines;if(n<32){let n=[];for(let t of e)t.flatten(n);return new i(n,t)}let o=Math.max(32,n>>5),s=o<<1,a=o>>1,l=[],c=0,u=-1,h=[];function f(e){let t;if(e.lines>s&&e instanceof r)for(let t of e.children)f(t);else e.lines>a&&(c>a||!c)?(d(),l.push(e)):e instanceof i&&c&&(t=h[h.length-1])instanceof i&&e.lines+t.lines<=32?(c+=e.lines,u+=e.length+1,h[h.length-1]=new i(t.text.concat(e.text),t.length+1+e.length)):(c+e.lines>o&&d(),c+=e.lines,u+=e.length+1,h.push(e))}function d(){0!=c&&(l.push(1==h.length?h[0]:r.from(h,u)),u=-1,c=h.length=0)}for(let t of e)f(t);return d(),1==l.length?l[0]:new r(l,t)}}function o(e,t,n=0,i=1e9){for(let r=0,o=0,s=!0;o<e.length&&r<=i;o++){let a=e[o],l=r+a.length;l>=n&&(l>i&&(a=a.slice(0,i-r)),r<n&&(a=a.slice(n-r)),s?(t[t.length-1]+=a,s=!1):t.push(a)),r=l+1}return t}function s(e,t,n){return o(e,[""],t,n)}n.empty=new i([""],0);class a{constructor(e,t=1){this.dir=t,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[e],this.offsets=[t>0?1:(e instanceof i?e.text.length:e.children.length)<<1]}nextInner(e,t){for(this.done=this.lineBreak=!1;;){let n=this.nodes.length-1,r=this.nodes[n],o=this.offsets[n],s=o>>1,a=r instanceof i?r.text.length:r.children.length;if(s==(t>0?a:0)){if(0==n)return this.done=!0,this.value="",this;t>0&&this.offsets[n-1]++,this.nodes.pop(),this.offsets.pop()}else if((1&o)==(t>0?0:1)){if(this.offsets[n]+=t,0==e)return this.lineBreak=!0,this.value="\n",this;e--}else if(r instanceof i){let i=r.text[s+(t<0?-1:0)];if(this.offsets[n]+=t,i.length>Math.max(0,e))return this.value=0==e?i:t>0?i.slice(e):i.slice(0,i.length-e),this;e-=i.length}else{let o=r.children[s+(t<0?-1:0)];e>o.length?(e-=o.length,this.offsets[n]+=t):(t<0&&this.offsets[n]--,this.nodes.push(o),this.offsets.push(t>0?1:(o instanceof i?o.text.length:o.children.length)<<1))}}}next(e=0){return e<0&&(this.nextInner(-e,-this.dir),e=this.value.length),this.nextInner(e,this.dir)}}class l{constructor(e,t,n){this.value="",this.done=!1,this.cursor=new a(e,t>n?-1:1),this.pos=t>n?e.length:0,this.from=Math.min(t,n),this.to=Math.max(t,n)}nextInner(e,t){if(t<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;e+=Math.max(0,t<0?this.pos-this.to:this.from-this.pos);let n=t<0?this.pos-this.from:this.to-this.pos;e>n&&(e=n),n-=e;let{value:i}=this.cursor.next(e);return this.pos+=(i.length+e)*t,this.value=i.length<=n?i:t<0?i.slice(i.length-n):i.slice(0,n),this.done=!this.value,this}next(e=0){return e<0?e=Math.max(e,this.from-this.pos):e>0&&(e=Math.min(e,this.to-this.pos)),this.nextInner(e,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&""!=this.value}}class c{constructor(e){this.inner=e,this.afterBreak=!0,this.value="",this.done=!1}next(e=0){let{done:t,lineBreak:n,value:i}=this.inner.next(e);return t?(this.done=!0,this.value=""):n?this.afterBreak?this.value="":(this.afterBreak=!0,this.next()):(this.value=i,this.afterBreak=!1),this}get lineBreak(){return!1}}"undefined"!=typeof Symbol&&(n.prototype[Symbol.iterator]=function(){return this.iter()},a.prototype[Symbol.iterator]=l.prototype[Symbol.iterator]=c.prototype[Symbol.iterator]=function(){return this});class u{constructor(e,t,n,i){this.from=e,this.to=t,this.number=n,this.text=i}get length(){return this.to-this.from}}let h="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e=>e?parseInt(e,36):1));for(let e=1;e<h.length;e++)h[e]+=h[e-1];function f(e){for(let t=1;t<h.length;t+=2)if(h[t]>e)return h[t-1]<=e;return!1}function d(e){return e>=127462&&e<=127487}function p(e,t,n=!0,i=!0){return(n?m:g)(e,t,i)}function m(e,t,n){if(t==e.length)return t;t&&O(e.charCodeAt(t))&&v(e.charCodeAt(t-1))&&t--;let i=y(e,t);for(t+=b(i);t<e.length;){let r=y(e,t);if(8205==i||8205==r||n&&f(r))t+=b(r),i=r;else{if(!d(r))break;{let n=0,i=t-2;for(;i>=0&&d(y(e,i));)n++,i-=2;if(n%2==0)break;t+=2}}}return t}function g(e,t,n){for(;t>0;){let i=m(e,t-2,n);if(i<t)return i;t--}return 0}function O(e){return e>=56320&&e<57344}function v(e){return e>=55296&&e<56320}function y(e,t){let n=e.charCodeAt(t);if(!v(n)||t+1==e.length)return n;let i=e.charCodeAt(t+1);return O(i)?i-56320+(n-55296<<10)+65536:n}function b(e){return e<65536?1:2}const w=/\r\n?|\n/;var S;t.MapMode=void 0,(S=t.MapMode||(t.MapMode={}))[S.Simple=0]="Simple",S[S.TrackDel=1]="TrackDel",S[S.TrackBefore=2]="TrackBefore",S[S.TrackAfter=3]="TrackAfter";class x{constructor(e){this.sections=e}get length(){let e=0;for(let t=0;t<this.sections.length;t+=2)e+=this.sections[t];return e}get newLength(){let e=0;for(let t=0;t<this.sections.length;t+=2){let n=this.sections[t+1];e+=n<0?this.sections[t]:n}return e}get empty(){return 0==this.sections.length||2==this.sections.length&&this.sections[1]<0}iterGaps(e){for(let t=0,n=0,i=0;t<this.sections.length;){let r=this.sections[t++],o=this.sections[t++];o<0?(e(n,i,r),i+=r):i+=o,n+=r}}iterChangedRanges(e,t=!1){$(this,e,t)}get invertedDesc(){let e=[];for(let t=0;t<this.sections.length;){let n=this.sections[t++],i=this.sections[t++];i<0?e.push(n,i):e.push(i,n)}return new x(e)}composeDesc(e){return this.empty?e:e.empty?this:C(this,e)}mapDesc(e,t=!1){return e.empty?this:P(this,e,t)}mapPos(e,n=-1,i=t.MapMode.Simple){let r=0,o=0;for(let s=0;s<this.sections.length;){let a=this.sections[s++],l=this.sections[s++],c=r+a;if(l<0){if(c>e)return o+(e-r);o+=a}else{if(i!=t.MapMode.Simple&&c>=e&&(i==t.MapMode.TrackDel&&r<e&&c>e||i==t.MapMode.TrackBefore&&r<e||i==t.MapMode.TrackAfter&&c>e))return null;if(c>e||c==e&&n<0&&!a)return e==r||n<0?o:o+l;o+=l}r=c}if(e>r)throw new RangeError(`Position ${e} is out of range for changeset of length ${r}`);return o}touchesRange(e,t=e){for(let n=0,i=0;n<this.sections.length&&i<=t;){let r=i+this.sections[n++];if(this.sections[n++]>=0&&i<=t&&r>=e)return!(i<e&&r>t)||"cover";i=r}return!1}toString(){let e="";for(let t=0;t<this.sections.length;){let n=this.sections[t++],i=this.sections[t++];e+=(e?" ":"")+n+(i>=0?":"+i:"")}return e}toJSON(){return this.sections}static fromJSON(e){if(!Array.isArray(e)||e.length%2||e.some((e=>"number"!=typeof e)))throw new RangeError("Invalid JSON representation of ChangeDesc");return new x(e)}static create(e){return new x(e)}}class k extends x{constructor(e,t){super(e),this.inserted=t}apply(e){if(this.length!=e.length)throw new RangeError("Applying change set to a document with the wrong length");return $(this,((t,n,i,r,o)=>e=e.replace(i,i+(n-t),o)),!1),e}mapDesc(e,t=!1){return P(this,e,t,!0)}invert(e){let t=this.sections.slice(),i=[];for(let r=0,o=0;r<t.length;r+=2){let s=t[r],a=t[r+1];if(a>=0){t[r]=a,t[r+1]=s;let l=r>>1;for(;i.length<l;)i.push(n.empty);i.push(s?e.slice(o,o+s):n.empty)}o+=s}return new k(t,i)}compose(e){return this.empty?e:e.empty?this:C(this,e,!0)}map(e,t=!1){return e.empty?this:P(this,e,t,!0)}iterChanges(e,t=!1){$(this,e,t)}get desc(){return x.create(this.sections)}filter(e){let t=[],n=[],i=[],r=new R(this);e:for(let o=0,s=0;;){let a=o==e.length?1e9:e[o++];for(;s<a||s==a&&0==r.len;){if(r.done)break e;let e=Math.min(r.len,a-s);Q(i,e,-1);let o=-1==r.ins?-1:0==r.off?r.ins:0;Q(t,e,o),o>0&&T(n,t,r.text),r.forward(e),s+=e}let l=e[o++];for(;s<l;){if(r.done)break e;let e=Math.min(r.len,l-s);Q(t,e,-1),Q(i,e,-1==r.ins?-1:0==r.off?r.ins:0),r.forward(e),s+=e}}return{changes:new k(t,n),filtered:x.create(i)}}toJSON(){let e=[];for(let t=0;t<this.sections.length;t+=2){let n=this.sections[t],i=this.sections[t+1];i<0?e.push(n):0==i?e.push([n]):e.push([n].concat(this.inserted[t>>1].toJSON()))}return e}static of(e,t,i){let r=[],o=[],s=0,a=null;function l(e=!1){if(!e&&!r.length)return;s<t&&Q(r,t-s,-1);let n=new k(r,o);a=a?a.compose(n.map(a)):n,r=[],o=[],s=0}return function e(c){if(Array.isArray(c))for(let t of c)e(t);else if(c instanceof k){if(c.length!=t)throw new RangeError(`Mismatched change set length (got ${c.length}, expected ${t})`);l(),a=a?a.compose(c.map(a)):c}else{let{from:e,to:a=e,insert:u}=c;if(e>a||e<0||a>t)throw new RangeError(`Invalid change range ${e} to ${a} (in doc of length ${t})`);let h=u?"string"==typeof u?n.of(u.split(i||w)):u:n.empty,f=h.length;if(e==a&&0==f)return;e<s&&l(),e>s&&Q(r,e-s,-1),Q(r,a-e,f),T(o,r,h),s=a}}(e),l(!a),a}static empty(e){return new k(e?[e,-1]:[],[])}static fromJSON(e){if(!Array.isArray(e))throw new RangeError("Invalid JSON representation of ChangeSet");let t=[],i=[];for(let r=0;r<e.length;r++){let o=e[r];if("number"==typeof o)t.push(o,-1);else{if(!Array.isArray(o)||"number"!=typeof o[0]||o.some(((e,t)=>t&&"string"!=typeof e)))throw new RangeError("Invalid JSON representation of ChangeSet");if(1==o.length)t.push(o[0],0);else{for(;i.length<r;)i.push(n.empty);i[r]=n.of(o.slice(1)),t.push(o[0],i[r].length)}}}return new k(t,i)}static createSet(e,t){return new k(e,t)}}function Q(e,t,n,i=!1){if(0==t&&n<=0)return;let r=e.length-2;r>=0&&n<=0&&n==e[r+1]?e[r]+=t:0==t&&0==e[r]?e[r+1]+=n:i?(e[r]+=t,e[r+1]+=n):e.push(t,n)}function T(e,t,i){if(0==i.length)return;let r=t.length-2>>1;if(r<e.length)e[e.length-1]=e[e.length-1].append(i);else{for(;e.length<r;)e.push(n.empty);e.push(i)}}function $(e,t,i){let r=e.inserted;for(let o=0,s=0,a=0;a<e.sections.length;){let l=e.sections[a++],c=e.sections[a++];if(c<0)o+=l,s+=l;else{let u=o,h=s,f=n.empty;for(;u+=l,h+=c,c&&r&&(f=f.append(r[a-2>>1])),!(i||a==e.sections.length||e.sections[a+1]<0);)l=e.sections[a++],c=e.sections[a++];t(o,u,s,h,f),o=u,s=h}}}function P(e,t,n,i=!1){let r=[],o=i?[]:null,s=new R(e),a=new R(t);for(let e=0,t=0;;)if(-1==s.ins)e+=s.len,s.next();else if(-1==a.ins&&t<e){let n=Math.min(a.len,e-t);a.forward(n),Q(r,n,-1),t+=n}else if(a.ins>=0&&(s.done||t<e||t==e&&(a.len<s.len||a.len==s.len&&!n))){for(Q(r,a.ins,-1);e>t&&!s.done&&e+s.len<t+a.len;)e+=s.len,s.next();t+=a.len,a.next()}else{if(!(s.ins>=0)){if(s.done&&a.done)return o?k.createSet(r,o):x.create(r);throw new Error("Mismatched change set lengths")}{let n=0,i=e+s.len;for(;;)if(a.ins>=0&&t>e&&t+a.len<i)n+=a.ins,t+=a.len,a.next();else{if(!(-1==a.ins&&t<i))break;{let e=Math.min(a.len,i-t);n+=e,a.forward(e),t+=e}}Q(r,n,s.ins),o&&T(o,r,s.text),e=i,s.next()}}}function C(e,t,n=!1){let i=[],r=n?[]:null,o=new R(e),s=new R(t);for(let e=!1;;){if(o.done&&s.done)return r?k.createSet(i,r):x.create(i);if(0==o.ins)Q(i,o.len,0,e),o.next();else if(0!=s.len||s.done){if(o.done||s.done)throw new Error("Mismatched change set lengths");{let t=Math.min(o.len2,s.len),n=i.length;if(-1==o.ins){let n=-1==s.ins?-1:s.off?0:s.ins;Q(i,t,n,e),r&&n&&T(r,i,s.text)}else-1==s.ins?(Q(i,o.off?0:o.len,t,e),r&&T(r,i,o.textBit(t))):(Q(i,o.off?0:o.len,s.off?0:s.ins,e),r&&!s.off&&T(r,i,s.text));e=(o.ins>t||s.ins>=0&&s.len>t)&&(e||i.length>n),o.forward2(t),s.forward(t)}}else Q(i,0,s.ins,e),r&&T(r,i,s.text),s.next()}}class R{constructor(e){this.set=e,this.i=0,this.next()}next(){let{sections:e}=this.set;this.i<e.length?(this.len=e[this.i++],this.ins=e[this.i++]):(this.len=0,this.ins=-2),this.off=0}get done(){return-2==this.ins}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:e}=this.set,t=this.i-2>>1;return t>=e.length?n.empty:e[t]}textBit(e){let{inserted:t}=this.set,i=this.i-2>>1;return i>=t.length&&!e?n.empty:t[i].slice(this.off,null==e?void 0:this.off+e)}forward(e){e==this.len?this.next():(this.len-=e,this.off+=e)}forward2(e){-1==this.ins?this.forward(e):e==this.ins?this.next():(this.ins-=e,this.off+=e)}}class E{constructor(e,t,n){this.from=e,this.to=t,this.flags=n}get anchor(){return 16&this.flags?this.to:this.from}get head(){return 16&this.flags?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return 4&this.flags?-1:8&this.flags?1:0}get bidiLevel(){let e=3&this.flags;return 3==e?null:e}get goalColumn(){let e=this.flags>>5;return 33554431==e?void 0:e}map(e,t=-1){let n,i;return this.empty?n=i=e.mapPos(this.from,t):(n=e.mapPos(this.from,1),i=e.mapPos(this.to,-1)),n==this.from&&i==this.to?this:new E(n,i,this.flags)}extend(e,t=e){if(e<=this.anchor&&t>=this.anchor)return A.range(e,t);let n=Math.abs(e-this.anchor)>Math.abs(t-this.anchor)?e:t;return A.range(this.anchor,n)}eq(e){return this.anchor==e.anchor&&this.head==e.head}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(e){if(!e||"number"!=typeof e.anchor||"number"!=typeof e.head)throw new RangeError("Invalid JSON representation for SelectionRange");return A.range(e.anchor,e.head)}static create(e,t,n){return new E(e,t,n)}}class A{constructor(e,t){this.ranges=e,this.mainIndex=t}map(e,t=-1){return e.empty?this:A.create(this.ranges.map((n=>n.map(e,t))),this.mainIndex)}eq(e){if(this.ranges.length!=e.ranges.length||this.mainIndex!=e.mainIndex)return!1;for(let t=0;t<this.ranges.length;t++)if(!this.ranges[t].eq(e.ranges[t]))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return 1==this.ranges.length?this:new A([this.main],0)}addRange(e,t=!0){return A.create([e].concat(this.ranges),t?0:this.mainIndex+1)}replaceRange(e,t=this.mainIndex){let n=this.ranges.slice();return n[t]=e,A.create(n,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((e=>e.toJSON())),main:this.mainIndex}}static fromJSON(e){if(!e||!Array.isArray(e.ranges)||"number"!=typeof e.main||e.main>=e.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new A(e.ranges.map((e=>E.fromJSON(e))),e.main)}static single(e,t=e){return new A([A.range(e,t)],0)}static create(e,t=0){if(0==e.length)throw new RangeError("A selection needs at least one range");for(let n=0,i=0;i<e.length;i++){let r=e[i];if(r.empty?r.from<=n:r.from<n)return A.normalized(e.slice(),t);n=r.to}return new A(e,t)}static cursor(e,t=0,n,i){return E.create(e,e,(0==t?0:t<0?4:8)|(null==n?3:Math.min(2,n))|(null!=i?i:33554431)<<5)}static range(e,t,n){let i=(null!=n?n:33554431)<<5;return t<e?E.create(t,e,24|i):E.create(e,t,i|(t>e?4:0))}static normalized(e,t=0){let n=e[t];e.sort(((e,t)=>e.from-t.from)),t=e.indexOf(n);for(let n=1;n<e.length;n++){let i=e[n],r=e[n-1];if(i.empty?i.from<=r.to:i.from<r.to){let o=r.from,s=Math.max(i.to,r.to);n<=t&&t--,e.splice(--n,2,i.anchor>i.head?A.range(s,o):A.range(o,s))}}return new A(e,t)}}function W(e,t){for(let n of e.ranges)if(n.to>t)throw new RangeError("Selection points outside of document")}let M=0;class I{constructor(e,t,n,i,r){this.combine=e,this.compareInput=t,this.compare=n,this.isStatic=i,this.extensions=r,this.id=M++,this.default=e([])}static define(e={}){return new I(e.combine||(e=>e),e.compareInput||((e,t)=>e===t),e.compare||(e.combine?(e,t)=>e===t:_),!!e.static,e.enables)}of(e){return new D([],this,0,e)}compute(e,t){if(this.isStatic)throw new Error("Can't compute a static facet");return new D(e,this,1,t)}computeN(e,t){if(this.isStatic)throw new Error("Can't compute a static facet");return new D(e,this,2,t)}from(e,t){return t||(t=e=>e),this.compute([e],(n=>t(n.field(e))))}}function _(e,t){return e==t||e.length==t.length&&e.every(((e,n)=>e===t[n]))}class D{constructor(e,t,n,i){this.dependencies=e,this.facet=t,this.type=n,this.value=i,this.id=M++}dynamicSlot(e){var t;let n=this.value,i=this.facet.compareInput,r=this.id,o=e[r]>>1,s=2==this.type,a=!1,l=!1,c=[];for(let n of this.dependencies)"doc"==n?a=!0:"selection"==n?l=!0:0==(1&(null!==(t=e[n.id])&&void 0!==t?t:1))&&c.push(e[n.id]);return{create:e=>(e.values[o]=n(e),1),update(e,t){if(a&&t.docChanged||l&&(t.docChanged||t.selection)||N(e,c)){let t=n(e);if(s?!z(t,e.values[o],i):!i(t,e.values[o]))return e.values[o]=t,1}return 0},reconfigure:(e,t)=>{let a=n(e),l=t.config.address[r];if(null!=l){let n=q(t,l);if(this.dependencies.every((n=>n instanceof I?t.facet(n)===e.facet(n):!(n instanceof X)||t.field(n,!1)==e.field(n,!1)))||(s?z(a,n,i):i(a,n)))return e.values[o]=n,0}return e.values[o]=a,1}}}}function z(e,t,n){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++)if(!n(e[i],t[i]))return!1;return!0}function N(e,t){let n=!1;for(let i of t)1&Y(e,i)&&(n=!0);return n}function L(e,t,n){let i=n.map((t=>e[t.id])),r=n.map((e=>e.type)),o=i.filter((e=>!(1&e))),s=e[t.id]>>1;function a(e){let n=[];for(let t=0;t<i.length;t++){let o=q(e,i[t]);if(2==r[t])for(let e of o)n.push(e);else n.push(o)}return t.combine(n)}return{create(e){for(let t of i)Y(e,t);return e.values[s]=a(e),1},update(e,n){if(!N(e,o))return 0;let i=a(e);return t.compare(i,e.values[s])?0:(e.values[s]=i,1)},reconfigure(e,r){let o=N(e,i),l=r.config.facets[t.id],c=r.facet(t);if(l&&!o&&_(n,l))return e.values[s]=c,0;let u=a(e);return t.compare(u,c)?(e.values[s]=c,0):(e.values[s]=u,1)}}}const j=I.define({static:!0});class X{constructor(e,t,n,i,r){this.id=e,this.createF=t,this.updateF=n,this.compareF=i,this.spec=r,this.provides=void 0}static define(e){let t=new X(M++,e.create,e.update,e.compare||((e,t)=>e===t),e);return e.provide&&(t.provides=e.provide(t)),t}create(e){let t=e.facet(j).find((e=>e.field==this));return((null==t?void 0:t.create)||this.createF)(e)}slot(e){let t=e[this.id]>>1;return{create:e=>(e.values[t]=this.create(e),1),update:(e,n)=>{let i=e.values[t],r=this.updateF(i,n);return this.compareF(i,r)?0:(e.values[t]=r,1)},reconfigure:(e,n)=>null!=n.config.address[this.id]?(e.values[t]=n.field(this),0):(e.values[t]=this.create(e),1)}}init(e){return[this,j.of({field:this,create:e})]}get extension(){return this}}function Z(e){return t=>new V(t,e)}const U={highest:Z(0),high:Z(1),default:Z(2),low:Z(3),lowest:Z(4)};class V{constructor(e,t){this.inner=e,this.prec=t}}class B{of(e){return new F(this,e)}reconfigure(e){return B.reconfigure.of({compartment:this,extension:e})}get(e){return e.config.compartments.get(this)}}class F{constructor(e,t){this.compartment=e,this.inner=t}}class G{constructor(e,t,n,i,r,o){for(this.base=e,this.compartments=t,this.dynamicSlots=n,this.address=i,this.staticValues=r,this.facets=o,this.statusTemplate=[];this.statusTemplate.length<n.length;)this.statusTemplate.push(0)}staticFacet(e){let t=this.address[e.id];return null==t?e.default:this.staticValues[t>>1]}static resolve(e,t,n){let i=[],r=Object.create(null),o=new Map;for(let n of function(e,t,n){let i=[[],[],[],[],[]],r=new Map;return function e(o,s){let a=r.get(o);if(null!=a){if(a<=s)return;let e=i[a].indexOf(o);e>-1&&i[a].splice(e,1),o instanceof F&&n.delete(o.compartment)}if(r.set(o,s),Array.isArray(o))for(let t of o)e(t,s);else if(o instanceof F){if(n.has(o.compartment))throw new RangeError("Duplicate use of compartment in extensions");let i=t.get(o.compartment)||o.inner;n.set(o.compartment,i),e(i,s)}else if(o instanceof V)e(o.inner,o.prec);else if(o instanceof X)i[s].push(o),o.provides&&e(o.provides,s);else if(o instanceof D)i[s].push(o),o.facet.extensions&&e(o.facet.extensions,s);else{let t=o.extension;if(!t)throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);e(t,s)}}(e,2),i.reduce(((e,t)=>e.concat(t)))}(e,t,o))n instanceof X?i.push(n):(r[n.facet.id]||(r[n.facet.id]=[])).push(n);let s=Object.create(null),a=[],l=[];for(let e of i)s[e.id]=l.length<<1,l.push((t=>e.slot(t)));let c=null==n?void 0:n.config.facets;for(let e in r){let t=r[e],i=t[0].facet,o=c&&c[e]||[];if(t.every((e=>0==e.type)))if(s[i.id]=a.length<<1|1,_(o,t))a.push(n.facet(i));else{let e=i.combine(t.map((e=>e.value)));a.push(n&&i.compare(e,n.facet(i))?n.facet(i):e)}else{for(let e of t)0==e.type?(s[e.id]=a.length<<1|1,a.push(e.value)):(s[e.id]=l.length<<1,l.push((t=>e.dynamicSlot(t))));s[i.id]=l.length<<1,l.push((e=>L(e,i,t)))}}let u=l.map((e=>e(s)));return new G(e,o,u,s,a,r)}}function Y(e,t){if(1&t)return 2;let n=t>>1,i=e.status[n];if(4==i)throw new Error("Cyclic dependency between fields and/or facets");if(2&i)return i;e.status[n]=4;let r=e.computeSlot(e,e.config.dynamicSlots[n]);return e.status[n]=2|r}function q(e,t){return 1&t?e.config.staticValues[t>>1]:e.values[t>>1]}const H=I.define(),J=I.define({combine:e=>e.some((e=>e)),static:!0}),K=I.define({combine:e=>e.length?e[0]:void 0,static:!0}),ee=I.define(),te=I.define(),ne=I.define(),ie=I.define({combine:e=>!!e.length&&e[0]});class re{constructor(e,t){this.type=e,this.value=t}static define(){return new oe}}class oe{of(e){return new re(this,e)}}class se{constructor(e){this.map=e}of(e){return new ae(this,e)}}class ae{constructor(e,t){this.type=e,this.value=t}map(e){let t=this.type.map(this.value,e);return void 0===t?void 0:t==this.value?this:new ae(this.type,t)}is(e){return this.type==e}static define(e={}){return new se(e.map||(e=>e))}static mapEffects(e,t){if(!e.length)return e;let n=[];for(let i of e){let e=i.map(t);e&&n.push(e)}return n}}ae.reconfigure=ae.define(),ae.appendConfig=ae.define();class le{constructor(e,t,n,i,r,o){this.startState=e,this.changes=t,this.selection=n,this.effects=i,this.annotations=r,this.scrollIntoView=o,this._doc=null,this._state=null,n&&W(n,t.newLength),r.some((e=>e.type==le.time))||(this.annotations=r.concat(le.time.of(Date.now())))}static create(e,t,n,i,r,o){return new le(e,t,n,i,r,o)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){return this._state||this.startState.applyTransaction(this),this._state}annotation(e){for(let t of this.annotations)if(t.type==e)return t.value}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(e){let t=this.annotation(le.userEvent);return!(!t||!(t==e||t.length>e.length&&t.slice(0,e.length)==e&&"."==t[e.length]))}}function ce(e,t){let n=[];for(let i=0,r=0;;){let o,s;if(i<e.length&&(r==t.length||t[r]>=e[i]))o=e[i++],s=e[i++];else{if(!(r<t.length))return n;o=t[r++],s=t[r++]}!n.length||n[n.length-1]<o?n.push(o,s):n[n.length-1]<s&&(n[n.length-1]=s)}}function ue(e,t,n){var i;let r,o,s;return n?(r=t.changes,o=k.empty(t.changes.length),s=e.changes.compose(t.changes)):(r=t.changes.map(e.changes),o=e.changes.mapDesc(t.changes,!0),s=e.changes.compose(r)),{changes:s,selection:t.selection?t.selection.map(o):null===(i=e.selection)||void 0===i?void 0:i.map(r),effects:ae.mapEffects(e.effects,r).concat(ae.mapEffects(t.effects,o)),annotations:e.annotations.length?e.annotations.concat(t.annotations):t.annotations,scrollIntoView:e.scrollIntoView||t.scrollIntoView}}function he(e,t,n){let i=t.selection,r=pe(t.annotations);return t.userEvent&&(r=r.concat(le.userEvent.of(t.userEvent))),{changes:t.changes instanceof k?t.changes:k.of(t.changes||[],n,e.facet(K)),selection:i&&(i instanceof A?i:A.single(i.anchor,i.head)),effects:pe(t.effects),annotations:r,scrollIntoView:!!t.scrollIntoView}}function fe(e,t,n){let i=he(e,t.length?t[0]:{},e.doc.length);t.length&&!1===t[0].filter&&(n=!1);for(let r=1;r<t.length;r++){!1===t[r].filter&&(n=!1);let o=!!t[r].sequential;i=ue(i,he(e,t[r],o?i.changes.newLength:e.doc.length),o)}let r=le.create(e,i.changes,i.selection,i.effects,i.annotations,i.scrollIntoView);return function(e){let t=e.startState,n=t.facet(ne),i=e;for(let r=n.length-1;r>=0;r--){let o=n[r](e);o&&Object.keys(o).length&&(i=ue(e,he(t,o,e.changes.newLength),!0))}return i==e?e:le.create(t,e.changes,e.selection,i.effects,i.annotations,i.scrollIntoView)}(n?function(e){let t=e.startState,n=!0;for(let i of t.facet(ee)){let t=i(e);if(!1===t){n=!1;break}Array.isArray(t)&&(n=!0===n?t:ce(n,t))}if(!0!==n){let i,r;if(!1===n)r=e.changes.invertedDesc,i=k.empty(t.doc.length);else{let t=e.changes.filter(n);i=t.changes,r=t.filtered.invertedDesc}e=le.create(t,i,e.selection&&e.selection.map(r),ae.mapEffects(e.effects,r),e.annotations,e.scrollIntoView)}let i=t.facet(te);for(let n=i.length-1;n>=0;n--){let r=i[n](e);e=r instanceof le?r:Array.isArray(r)&&1==r.length&&r[0]instanceof le?r[0]:fe(t,pe(r),!1)}return e}(r):r)}le.time=re.define(),le.userEvent=re.define(),le.addToHistory=re.define(),le.remote=re.define();const de=[];function pe(e){return null==e?de:Array.isArray(e)?e:[e]}var me;t.CharCategory=void 0,(me=t.CharCategory||(t.CharCategory={}))[me.Word=0]="Word",me[me.Space=1]="Space",me[me.Other=2]="Other";const ge=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;let Oe;try{Oe=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(e){}class ve{constructor(e,t,n,i,r,o){this.config=e,this.doc=t,this.selection=n,this.values=i,this.status=e.statusTemplate.slice(),this.computeSlot=r,o&&(o._state=this);for(let e=0;e<this.config.dynamicSlots.length;e++)Y(this,e<<1);this.computeSlot=null}field(e,t=!0){let n=this.config.address[e.id];if(null!=n)return Y(this,n),q(this,n);if(t)throw new RangeError("Field is not present in this state")}update(...e){return fe(this,e,!0)}applyTransaction(e){let t,n=this.config,{base:i,compartments:r}=n;for(let t of e.effects)t.is(B.reconfigure)?(n&&(r=new Map,n.compartments.forEach(((e,t)=>r.set(t,e))),n=null),r.set(t.value.compartment,t.value.extension)):t.is(ae.reconfigure)?(n=null,i=t.value):t.is(ae.appendConfig)&&(n=null,i=pe(i).concat(t.value));n?t=e.startState.values.slice():(n=G.resolve(i,r,this),t=new ve(n,this.doc,this.selection,n.dynamicSlots.map((()=>null)),((e,t)=>t.reconfigure(e,this)),null).values),new ve(n,e.newDoc,e.newSelection,t,((t,n)=>n.update(t,e)),e)}replaceSelection(e){return"string"==typeof e&&(e=this.toText(e)),this.changeByRange((t=>({changes:{from:t.from,to:t.to,insert:e},range:A.cursor(t.from+e.length)})))}changeByRange(e){let t=this.selection,n=e(t.ranges[0]),i=this.changes(n.changes),r=[n.range],o=pe(n.effects);for(let n=1;n<t.ranges.length;n++){let s=e(t.ranges[n]),a=this.changes(s.changes),l=a.map(i);for(let e=0;e<n;e++)r[e]=r[e].map(l);let c=i.mapDesc(a,!0);r.push(s.range.map(c)),i=i.compose(l),o=ae.mapEffects(o,l).concat(ae.mapEffects(pe(s.effects),c))}return{changes:i,selection:A.create(r,t.mainIndex),effects:o}}changes(e=[]){return e instanceof k?e:k.of(e,this.doc.length,this.facet(ve.lineSeparator))}toText(e){return n.of(e.split(this.facet(ve.lineSeparator)||w))}sliceDoc(e=0,t=this.doc.length){return this.doc.sliceString(e,t,this.lineBreak)}facet(e){let t=this.config.address[e.id];return null==t?e.default:(Y(this,t),q(this,t))}toJSON(e){let t={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(e)for(let n in e){let i=e[n];i instanceof X&&(t[n]=i.spec.toJSON(this.field(e[n]),this))}return t}static fromJSON(e,t={},n){if(!e||"string"!=typeof e.doc)throw new RangeError("Invalid JSON representation for EditorState");let i=[];if(n)for(let t in n){let r=n[t],o=e[t];i.push(r.init((e=>r.spec.fromJSON(o,e))))}return ve.create({doc:e.doc,selection:A.fromJSON(e.selection),extensions:t.extensions?i.concat([t.extensions]):i})}static create(e={}){let t=G.resolve(e.extensions||[],new Map),i=e.doc instanceof n?e.doc:n.of((e.doc||"").split(t.staticFacet(ve.lineSeparator)||w)),r=e.selection?e.selection instanceof A?e.selection:A.single(e.selection.anchor,e.selection.head):A.single(0);return W(r,i.length),t.staticFacet(J)||(r=r.asSingle()),new ve(t,i,r,t.dynamicSlots.map((()=>null)),((e,t)=>t.create(e)),null)}get tabSize(){return this.facet(ve.tabSize)}get lineBreak(){return this.facet(ve.lineSeparator)||"\n"}get readOnly(){return this.facet(ie)}phrase(e,...t){for(let t of this.facet(ve.phrases))if(Object.prototype.hasOwnProperty.call(t,e)){e=t[e];break}return t.length&&(e=e.replace(/\$(\$|\d*)/g,((e,n)=>{if("$"==n)return"$";let i=+(n||1);return i>t.length?e:t[i-1]}))),e}languageDataAt(e,t,n=-1){let i=[];for(let r of this.facet(H))for(let o of r(this,t,n))Object.prototype.hasOwnProperty.call(o,e)&&i.push(o[e]);return i}charCategorizer(e){return n=this.languageDataAt("wordChars",e).join(""),e=>{if(!/\S/.test(e))return t.CharCategory.Space;if(function(e){if(Oe)return Oe.test(e);for(let t=0;t<e.length;t++){let n=e[t];if(/\w/.test(n)||n>""&&(n.toUpperCase()!=n.toLowerCase()||ge.test(n)))return!0}return!1}(e))return t.CharCategory.Word;for(let i=0;i<n.length;i++)if(e.indexOf(n[i])>-1)return t.CharCategory.Word;return t.CharCategory.Other};var n}wordAt(e){let{text:n,from:i,length:r}=this.doc.lineAt(e),o=this.charCategorizer(e),s=e-i,a=e-i;for(;s>0;){let e=p(n,s,!1);if(o(n.slice(e,s))!=t.CharCategory.Word)break;s=e}for(;a<r;){let e=p(n,a);if(o(n.slice(a,e))!=t.CharCategory.Word)break;a=e}return s==a?null:A.range(s+i,a+i)}}ve.allowMultipleSelections=J,ve.tabSize=I.define({combine:e=>e.length?e[0]:4}),ve.lineSeparator=K,ve.readOnly=ie,ve.phrases=I.define({compare(e,t){let n=Object.keys(e),i=Object.keys(t);return n.length==i.length&&n.every((n=>e[n]==t[n]))}}),ve.languageData=H,ve.changeFilter=ee,ve.transactionFilter=te,ve.transactionExtender=ne,B.reconfigure=ae.define();class ye{eq(e){return this==e}range(e,t=e){return be.create(e,t,this)}}ye.prototype.startSide=ye.prototype.endSide=0,ye.prototype.point=!1,ye.prototype.mapMode=t.MapMode.TrackDel;class be{constructor(e,t,n){this.from=e,this.to=t,this.value=n}static create(e,t,n){return new be(e,t,n)}}function we(e,t){return e.from-t.from||e.value.startSide-t.value.startSide}class Se{constructor(e,t,n,i){this.from=e,this.to=t,this.value=n,this.maxPoint=i}get length(){return this.to[this.to.length-1]}findIndex(e,t,n,i=0){let r=n?this.to:this.from;for(let o=i,s=r.length;;){if(o==s)return o;let i=o+s>>1,a=r[i]-e||(n?this.value[i].endSide:this.value[i].startSide)-t;if(i==o)return a>=0?o:s;a>=0?s=i:o=i+1}}between(e,t,n,i){for(let r=this.findIndex(t,-1e9,!0),o=this.findIndex(n,1e9,!1,r);r<o;r++)if(!1===i(this.from[r]+e,this.to[r]+e,this.value[r]))return!1}map(e,t){let n=[],i=[],r=[],o=-1,s=-1;for(let a=0;a<this.value.length;a++){let l,c,u=this.value[a],h=this.from[a]+e,f=this.to[a]+e;if(h==f){let e=t.mapPos(h,u.startSide,u.mapMode);if(null==e)continue;if(l=c=e,u.startSide!=u.endSide&&(c=t.mapPos(h,u.endSide),c<l))continue}else if(l=t.mapPos(h,u.startSide),c=t.mapPos(f,u.endSide),l>c||l==c&&u.startSide>0&&u.endSide<=0)continue;(c-l||u.endSide-u.startSide)<0||(o<0&&(o=l),u.point&&(s=Math.max(s,c-l)),n.push(u),i.push(l-o),r.push(c-o))}return{mapped:n.length?new Se(i,r,n,s):null,pos:o}}}class xe{constructor(e,t,n,i){this.chunkPos=e,this.chunk=t,this.nextLayer=n,this.maxPoint=i}static create(e,t,n,i){return new xe(e,t,n,i)}get length(){let e=this.chunk.length-1;return e<0?0:Math.max(this.chunkEnd(e),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let e=this.nextLayer.size;for(let t of this.chunk)e+=t.value.length;return e}chunkEnd(e){return this.chunkPos[e]+this.chunk[e].length}update(e){let{add:t=[],sort:n=!1,filterFrom:i=0,filterTo:r=this.length}=e,o=e.filter;if(0==t.length&&!o)return this;if(n&&(t=t.slice().sort(we)),this.isEmpty)return t.length?xe.of(t):this;let s=new Te(this,null,-1).goto(0),a=0,l=[],c=new ke;for(;s.value||a<t.length;)if(a<t.length&&(s.from-t[a].from||s.startSide-t[a].value.startSide)>=0){let e=t[a++];c.addInner(e.from,e.to,e.value)||l.push(e)}else 1==s.rangeIndex&&s.chunkIndex<this.chunk.length&&(a==t.length||this.chunkEnd(s.chunkIndex)<t[a].from)&&(!o||i>this.chunkEnd(s.chunkIndex)||r<this.chunkPos[s.chunkIndex])&&c.addChunk(this.chunkPos[s.chunkIndex],this.chunk[s.chunkIndex])?s.nextChunk():((!o||i>s.to||r<s.from||o(s.from,s.to,s.value))&&(c.addInner(s.from,s.to,s.value)||l.push(be.create(s.from,s.to,s.value))),s.next());return c.finishInner(this.nextLayer.isEmpty&&!l.length?xe.empty:this.nextLayer.update({add:l,filter:o,filterFrom:i,filterTo:r}))}map(e){if(e.empty||this.isEmpty)return this;let t=[],n=[],i=-1;for(let r=0;r<this.chunk.length;r++){let o=this.chunkPos[r],s=this.chunk[r],a=e.touchesRange(o,o+s.length);if(!1===a)i=Math.max(i,s.maxPoint),t.push(s),n.push(e.mapPos(o));else if(!0===a){let{mapped:r,pos:a}=s.map(o,e);r&&(i=Math.max(i,r.maxPoint),t.push(r),n.push(a))}}let r=this.nextLayer.map(e);return 0==t.length?r:new xe(n,t,r||xe.empty,i)}between(e,t,n){if(!this.isEmpty){for(let i=0;i<this.chunk.length;i++){let r=this.chunkPos[i],o=this.chunk[i];if(t>=r&&e<=r+o.length&&!1===o.between(r,e-r,t-r,n))return}this.nextLayer.between(e,t,n)}}iter(e=0){return $e.from([this]).goto(e)}get isEmpty(){return this.nextLayer==this}static iter(e,t=0){return $e.from(e).goto(t)}static compare(e,t,n,i,r=-1){let o=e.filter((e=>e.maxPoint>0||!e.isEmpty&&e.maxPoint>=r)),s=t.filter((e=>e.maxPoint>0||!e.isEmpty&&e.maxPoint>=r)),a=Qe(o,s,n),l=new Ce(o,a,r),c=new Ce(s,a,r);n.iterGaps(((e,t,n)=>Re(l,e,c,t,n,i))),n.empty&&0==n.length&&Re(l,0,c,0,0,i)}static eq(e,t,n=0,i){null==i&&(i=1e9);let r=e.filter((e=>!e.isEmpty&&t.indexOf(e)<0)),o=t.filter((t=>!t.isEmpty&&e.indexOf(t)<0));if(r.length!=o.length)return!1;if(!r.length)return!0;let s=Qe(r,o),a=new Ce(r,s,0).goto(n),l=new Ce(o,s,0).goto(n);for(;;){if(a.to!=l.to||!Ee(a.active,l.active)||a.point&&(!l.point||!a.point.eq(l.point)))return!1;if(a.to>i)return!0;a.next(),l.next()}}static spans(e,t,n,i,r=-1){let o=new Ce(e,null,r).goto(t),s=t,a=o.openStart;for(;;){let e=Math.min(o.to,n);if(o.point?(i.point(s,e,o.point,o.activeForPoint(o.to),a,o.pointRank),a=o.openEnd(e)+(o.to>e?1:0)):e>s&&(i.span(s,e,o.active,a),a=o.openEnd(e)),o.to>n)break;s=o.to,o.next()}return a}static of(e,t=!1){let n=new ke;for(let i of e instanceof be?[e]:t?function(e){if(e.length>1)for(let t=e[0],n=1;n<e.length;n++){let i=e[n];if(we(t,i)>0)return e.slice().sort(we);t=i}return e}(e):e)n.add(i.from,i.to,i.value);return n.finish()}}xe.empty=new xe([],[],null,-1),xe.empty.nextLayer=xe.empty;class ke{constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}finishChunk(e){this.chunks.push(new Se(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,e&&(this.from=[],this.to=[],this.value=[])}add(e,t,n){this.addInner(e,t,n)||(this.nextLayer||(this.nextLayer=new ke)).add(e,t,n)}addInner(e,t,n){let i=e-this.lastTo||n.startSide-this.last.endSide;if(i<=0&&(e-this.lastFrom||n.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");return!(i<0||(250==this.from.length&&this.finishChunk(!0),this.chunkStart<0&&(this.chunkStart=e),this.from.push(e-this.chunkStart),this.to.push(t-this.chunkStart),this.last=n,this.lastFrom=e,this.lastTo=t,this.value.push(n),n.point&&(this.maxPoint=Math.max(this.maxPoint,t-e)),0))}addChunk(e,t){if((e-this.lastTo||t.value[0].startSide-this.last.endSide)<0)return!1;this.from.length&&this.finishChunk(!0),this.setMaxPoint=Math.max(this.setMaxPoint,t.maxPoint),this.chunks.push(t),this.chunkPos.push(e);let n=t.value.length-1;return this.last=t.value[n],this.lastFrom=t.from[n]+e,this.lastTo=t.to[n]+e,!0}finish(){return this.finishInner(xe.empty)}finishInner(e){if(this.from.length&&this.finishChunk(!1),0==this.chunks.length)return e;let t=xe.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(e):e,this.setMaxPoint);return this.from=null,t}}function Qe(e,t,n){let i=new Map;for(let t of e)for(let e=0;e<t.chunk.length;e++)t.chunk[e].maxPoint<=0&&i.set(t.chunk[e],t.chunkPos[e]);let r=new Set;for(let e of t)for(let t=0;t<e.chunk.length;t++){let o=i.get(e.chunk[t]);null==o||(n?n.mapPos(o):o)!=e.chunkPos[t]||(null==n?void 0:n.touchesRange(o,o+e.chunk[t].length))||r.add(e.chunk[t])}return r}class Te{constructor(e,t,n,i=0){this.layer=e,this.skip=t,this.minPoint=n,this.rank=i}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(e,t=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(e,t,!1),this}gotoInner(e,t,n){for(;this.chunkIndex<this.layer.chunk.length;){let t=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has(t)||this.layer.chunkEnd(this.chunkIndex)<e||t.maxPoint<this.minPoint))break;this.chunkIndex++,n=!1}if(this.chunkIndex<this.layer.chunk.length){let i=this.layer.chunk[this.chunkIndex].findIndex(e-this.layer.chunkPos[this.chunkIndex],t,!0);(!n||this.rangeIndex<i)&&this.setRangeIndex(i)}this.next()}forward(e,t){(this.to-e||this.endSide-t)<0&&this.gotoInner(e,t,!0)}next(){for(;;){if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}{let e=this.layer.chunkPos[this.chunkIndex],t=this.layer.chunk[this.chunkIndex],n=e+t.from[this.rangeIndex];if(this.from=n,this.to=e+t.to[this.rangeIndex],this.value=t.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}}setRangeIndex(e){if(e==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)for(;this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]);)this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=e}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(e){return this.from-e.from||this.startSide-e.startSide||this.rank-e.rank||this.to-e.to||this.endSide-e.endSide}}class $e{constructor(e){this.heap=e}static from(e,t=null,n=-1){let i=[];for(let r=0;r<e.length;r++)for(let o=e[r];!o.isEmpty;o=o.nextLayer)o.maxPoint>=n&&i.push(new Te(o,t,n,r));return 1==i.length?i[0]:new $e(i)}get startSide(){return this.value?this.value.startSide:0}goto(e,t=-1e9){for(let n of this.heap)n.goto(e,t);for(let e=this.heap.length>>1;e>=0;e--)Pe(this.heap,e);return this.next(),this}forward(e,t){for(let n of this.heap)n.forward(e,t);for(let e=this.heap.length>>1;e>=0;e--)Pe(this.heap,e);(this.to-e||this.value.endSide-t)<0&&this.next()}next(){if(0==this.heap.length)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let e=this.heap[0];this.from=e.from,this.to=e.to,this.value=e.value,this.rank=e.rank,e.value&&e.next(),Pe(this.heap,0)}}}function Pe(e,t){for(let n=e[t];;){let i=1+(t<<1);if(i>=e.length)break;let r=e[i];if(i+1<e.length&&r.compare(e[i+1])>=0&&(r=e[i+1],i++),n.compare(r)<0)break;e[i]=n,e[t]=r,t=i}}class Ce{constructor(e,t,n){this.minPoint=n,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=$e.from(e,t,n)}goto(e,t=-1e9){return this.cursor.goto(e,t),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=e,this.endSide=t,this.openStart=-1,this.next(),this}forward(e,t){for(;this.minActive>-1&&(this.activeTo[this.minActive]-e||this.active[this.minActive].endSide-t)<0;)this.removeActive(this.minActive);this.cursor.forward(e,t)}removeActive(e){Ae(this.active,e),Ae(this.activeTo,e),Ae(this.activeRank,e),this.minActive=Me(this.active,this.activeTo)}addActive(e){let t=0,{value:n,to:i,rank:r}=this.cursor;for(;t<this.activeRank.length&&this.activeRank[t]<=r;)t++;We(this.active,t,n),We(this.activeTo,t,i),We(this.activeRank,t,r),e&&We(e,t,this.cursor.from),this.minActive=Me(this.active,this.activeTo)}next(){let e=this.to,t=this.point;this.point=null;let n=this.openStart<0?[]:null,i=0;for(;;){let r=this.minActive;if(r>-1&&(this.activeTo[r]-this.cursor.from||this.active[r].endSide-this.cursor.startSide)<0){if(this.activeTo[r]>e){this.to=this.activeTo[r],this.endSide=this.active[r].endSide;break}this.removeActive(r),n&&Ae(n,r)}else{if(!this.cursor.value){this.to=this.endSide=1e9;break}if(this.cursor.from>e){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}{let r=this.cursor.value;if(r.point){if(!(t&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)){this.point=r,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=r.endSide,this.cursor.from<e&&(i=1),this.cursor.next(),this.forward(this.to,this.endSide);break}this.cursor.next()}else this.addActive(n),this.cursor.next()}}}if(n){let t=0;for(;t<n.length&&n[t]<e;)t++;this.openStart=t+i}}activeForPoint(e){if(!this.active.length)return this.active;let t=[];for(let n=this.active.length-1;n>=0&&!(this.activeRank[n]<this.pointRank);n--)(this.activeTo[n]>e||this.activeTo[n]==e&&this.active[n].endSide>=this.point.endSide)&&t.push(this.active[n]);return t.reverse()}openEnd(e){let t=0;for(let n=this.activeTo.length-1;n>=0&&this.activeTo[n]>e;n--)t++;return t}}function Re(e,t,n,i,r,o){e.goto(t),n.goto(i);let s=i+r,a=i,l=i-t;for(;;){let t=e.to+l-n.to||e.endSide-n.endSide,i=t<0?e.to+l:n.to,r=Math.min(i,s);if(e.point||n.point?e.point&&n.point&&(e.point==n.point||e.point.eq(n.point))&&Ee(e.activeForPoint(e.to+l),n.activeForPoint(n.to))||o.comparePoint(a,r,e.point,n.point):r>a&&!Ee(e.active,n.active)&&o.compareRange(a,r,e.active,n.active),i>s)break;a=i,t<=0&&e.next(),t>=0&&n.next()}}function Ee(e,t){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!=t[n]&&!e[n].eq(t[n]))return!1;return!0}function Ae(e,t){for(let n=t,i=e.length-1;n<i;n++)e[n]=e[n+1];e.pop()}function We(e,t,n){for(let n=e.length-1;n>=t;n--)e[n+1]=e[n];e[t]=n}function Me(e,t){let n=-1,i=1e9;for(let r=0;r<t.length;r++)(t[r]-i||e[r].endSide-e[n].endSide)<0&&(n=r,i=t[r]);return n}t.Annotation=re,t.AnnotationType=oe,t.ChangeDesc=x,t.ChangeSet=k,t.Compartment=B,t.EditorSelection=A,t.EditorState=ve,t.Facet=I,t.Line=u,t.Prec=U,t.Range=be,t.RangeSet=xe,t.RangeSetBuilder=ke,t.RangeValue=ye,t.SelectionRange=E,t.StateEffect=ae,t.StateEffectType=se,t.StateField=X,t.Text=n,t.Transaction=le,t.codePointAt=y,t.codePointSize=b,t.combineConfig=function(e,t,n={}){let i={};for(let t of e)for(let e of Object.keys(t)){let r=t[e],o=i[e];if(void 0===o)i[e]=r;else if(o===r||void 0===r);else{if(!Object.hasOwnProperty.call(n,e))throw new Error("Config merge conflict for field "+e);i[e]=n[e](o,r)}}for(let e in t)void 0===i[e]&&(i[e]=t[e]);return i},t.countColumn=function(e,t,n=e.length){let i=0;for(let r=0;r<n;)9==e.charCodeAt(r)?(i+=t-i%t,r++):(i++,r=p(e,r));return i},t.findClusterBreak=p,t.findColumn=function(e,t,n,i){for(let i=0,r=0;;){if(r>=t)return i;if(i==e.length)break;r+=9==e.charCodeAt(i)?n-r%n:1,i=p(e,i)}return!0===i?-1:e.length},t.fromCodePoint=function(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}},642:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(40),r=n(223),o=n(691);function s(e){let t;return t=11==e.nodeType?e.getSelection?e:e.ownerDocument:e,t.getSelection()}function a(e,t){return!!t&&(e==t||e.contains(1!=t.nodeType?t.parentNode:t))}function l(e,t){if(!t.anchorNode)return!1;try{return a(e,t.anchorNode)}catch(e){return!1}}function c(e){return 3==e.nodeType?w(e,0,e.nodeValue.length).getClientRects():1==e.nodeType?e.getClientRects():[]}function u(e,t,n,i){return!!n&&(f(e,t,n,i,-1)||f(e,t,n,i,1))}function h(e){for(var t=0;;t++)if(!(e=e.previousSibling))return t}function f(e,t,n,i,r){for(;;){if(e==n&&t==i)return!0;if(t==(r<0?0:d(e))){if("DIV"==e.nodeName)return!1;let n=e.parentNode;if(!n||1!=n.nodeType)return!1;t=h(e)+(r<0?0:1),e=n}else{if(1!=e.nodeType)return!1;if(1==(e=e.childNodes[t+(r<0?-1:0)]).nodeType&&"false"==e.contentEditable)return!1;t=r<0?d(e):0}}}function d(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}const p={left:0,right:0,top:0,bottom:0};function m(e,t){let n=t?e.left:e.right;return{left:n,right:n,top:e.top,bottom:e.bottom}}function g(e){return{left:0,right:e.innerWidth,top:0,bottom:e.innerHeight}}class O{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(e){return this.anchorNode==e.anchorNode&&this.anchorOffset==e.anchorOffset&&this.focusNode==e.focusNode&&this.focusOffset==e.focusOffset}setRange(e){this.set(e.anchorNode,e.anchorOffset,e.focusNode,e.focusOffset)}set(e,t,n,i){this.anchorNode=e,this.anchorOffset=t,this.focusNode=n,this.focusOffset=i}}let v,y=null;function b(e){if(e.setActive)return e.setActive();if(y)return e.focus(y);let t=[];for(let n=e;n&&(t.push(n,n.scrollTop,n.scrollLeft),n!=n.ownerDocument);n=n.parentNode);if(e.focus(null==y?{get preventScroll(){return y={preventScroll:!0},!0}}:void 0),!y){y=!1;for(let e=0;e<t.length;){let n=t[e++],i=t[e++],r=t[e++];n.scrollTop!=i&&(n.scrollTop=i),n.scrollLeft!=r&&(n.scrollLeft=r)}}}function w(e,t,n=t){let i=v||(v=document.createRange());return i.setEnd(e,n),i.setStart(e,t),i}function S(e,t,n){let i={key:t,code:t,keyCode:n,which:n,cancelable:!0},r=new KeyboardEvent("keydown",i);r.synthetic=!0,e.dispatchEvent(r);let o=new KeyboardEvent("keyup",i);return o.synthetic=!0,e.dispatchEvent(o),r.defaultPrevented||o.defaultPrevented}function x(e){for(;e.attributes.length;)e.removeAttributeNode(e.attributes[0])}class k{constructor(e,t,n=!0){this.node=e,this.offset=t,this.precise=n}static before(e,t){return new k(e.parentNode,h(e),t)}static after(e,t){return new k(e.parentNode,h(e)+1,t)}}const Q=[];class T{constructor(){this.parent=null,this.dom=null,this.dirty=2}get editorView(){if(!this.parent)throw new Error("Accessing view in orphan content view");return this.parent.editorView}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(e){let t=this.posAtStart;for(let n of this.children){if(n==e)return t;t+=n.length+n.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(e){return this.posBefore(e)+e.length}coordsAt(e,t){return null}sync(e){if(2&this.dirty){let t,n=this.dom,i=null;for(let r of this.children){if(r.dirty){if(!r.dom&&(t=i?i.nextSibling:n.firstChild)){let e=T.get(t);e&&(e.parent||e.constructor!=r.constructor)||r.reuseDOM(t)}r.sync(e),r.dirty=0}if(t=i?i.nextSibling:n.firstChild,e&&!e.written&&e.node==n&&t!=r.dom&&(e.written=!0),r.dom.parentNode==n)for(;t&&t!=r.dom;)t=$(t);else n.insertBefore(r.dom,t);i=r.dom}for(t=i?i.nextSibling:n.firstChild,t&&e&&e.node==n&&(e.written=!0);t;)t=$(t)}else if(1&this.dirty)for(let t of this.children)t.dirty&&(t.sync(e),t.dirty=0)}reuseDOM(e){}localPosFromDOM(e,t){let n;if(e==this.dom)n=this.dom.childNodes[t];else{let i=0==d(e)?0:0==t?-1:1;for(;;){let t=e.parentNode;if(t==this.dom)break;0==i&&t.firstChild!=t.lastChild&&(i=e==t.firstChild?-1:1),e=t}n=i<0?e:e.nextSibling}if(n==this.dom.firstChild)return 0;for(;n&&!T.get(n);)n=n.nextSibling;if(!n)return this.length;for(let e=0,t=0;;e++){let i=this.children[e];if(i.dom==n)return t;t+=i.length+i.breakAfter}}domBoundsAround(e,t,n=0){let i=-1,r=-1,o=-1,s=-1;for(let a=0,l=n,c=n;a<this.children.length;a++){let n=this.children[a],u=l+n.length;if(l<e&&u>t)return n.domBoundsAround(e,t,l);if(u>=e&&-1==i&&(i=a,r=l),l>t&&n.dom.parentNode==this.dom){o=a,s=c;break}c=u,l=u+n.breakAfter}return{from:r,to:s<0?n+this.length:s,startDOM:(i?this.children[i-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:o<this.children.length&&o>=0?this.children[o].dom:null}}markDirty(e=!1){this.dirty|=2,this.markParentsDirty(e)}markParentsDirty(e){for(let t=this.parent;t;t=t.parent){if(e&&(t.dirty|=2),1&t.dirty)return;t.dirty|=1,e=!1}}setParent(e){this.parent!=e&&(this.parent=e,this.dirty&&this.markParentsDirty(!0))}setDOM(e){this.dom&&(this.dom.cmView=null),this.dom=e,e.cmView=this}get rootView(){for(let e=this;;){let t=e.parent;if(!t)return e;e=t}}replaceChildren(e,t,n=Q){this.markDirty();for(let n=e;n<t;n++){let e=this.children[n];e.parent==this&&e.destroy()}this.children.splice(e,t-e,...n);for(let e=0;e<n.length;e++)n[e].setParent(this)}ignoreMutation(e){return!1}ignoreEvent(e){return!1}childCursor(e=this.length){return new P(this.children,e,this.children.length)}childPos(e,t=1){return this.childCursor().findPos(e,t)}toString(){let e=this.constructor.name.replace("View","");return e+(this.children.length?"("+this.children.join()+")":this.length?"["+("Text"==e?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(e){return e.cmView}get isEditable(){return!0}merge(e,t,n,i,r,o){return!1}become(e){return!1}getSide(){return 0}destroy(){this.parent=null}}function $(e){let t=e.nextSibling;return e.parentNode.removeChild(e),t}T.prototype.breakAfter=0;class P{constructor(e,t,n){this.children=e,this.pos=t,this.i=n,this.off=0}findPos(e,t=1){for(;;){if(e>this.pos||e==this.pos&&(t>0||0==this.i||this.children[this.i-1].breakAfter))return this.off=e-this.pos,this;let n=this.children[--this.i];this.pos-=n.length+n.breakAfter}}}function C(e,t,n,i,r,o,s,a,l){let{children:c}=e,u=c.length?c[t]:null,h=o.length?o[o.length-1]:null,f=h?h.breakAfter:s;if(!(t==i&&u&&!s&&!f&&o.length<2&&u.merge(n,r,o.length?h:null,0==n,a,l))){if(i<c.length){let e=c[i];e&&r<e.length?(t==i&&(e=e.split(r),r=0),!f&&h&&e.merge(0,r,h,!0,0,l)?o[o.length-1]=e:(r&&e.merge(0,r,null,!1,0,l),o.push(e))):(null==e?void 0:e.breakAfter)&&(h?h.breakAfter=1:s=1),i++}for(u&&(u.breakAfter=s,n>0&&(!s&&o.length&&u.merge(n,u.length,o[0],!1,a,0)?u.breakAfter=o.shift().breakAfter:(n<u.length||u.children.length&&0==u.children[u.children.length-1].length)&&u.merge(n,u.length,null,!1,a,0),t++));t<i&&o.length;)if(c[i-1].become(o[o.length-1]))i--,o.pop(),l=o.length?0:a;else{if(!c[t].become(o[0]))break;t++,o.shift(),a=o.length?0:l}!o.length&&t&&i<c.length&&!c[t-1].breakAfter&&c[i].merge(0,0,c[t-1],!1,a,l)&&t--,(t<i||o.length)&&e.replaceChildren(t,i,o)}}function R(e,t,n,i,r,o){let s=e.childCursor(),{i:a,off:l}=s.findPos(n,1),{i:c,off:u}=s.findPos(t,-1),h=t-n;for(let e of i)h+=e.length;e.length+=h,C(e,c,u,a,l,i,0,r,o)}let E="undefined"!=typeof navigator?navigator:{userAgent:"",vendor:"",platform:""},A="undefined"!=typeof document?document:{documentElement:{style:{}}};const W=/Edge\/(\d+)/.exec(E.userAgent),M=/MSIE \d/.test(E.userAgent),I=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(E.userAgent),_=!!(M||I||W),D=!_&&/gecko\/(\d+)/i.test(E.userAgent),z=!_&&/Chrome\/(\d+)/.exec(E.userAgent),N="webkitFontSmoothing"in A.documentElement.style,L=!_&&/Apple Computer/.test(E.vendor),j=L&&(/Mobile\/\w+/.test(E.userAgent)||E.maxTouchPoints>2);var X,Z={mac:j||/Mac/.test(E.platform),windows:/Win/.test(E.platform),linux:/Linux|X11/.test(E.platform),ie:_,ie_version:M?A.documentMode||6:I?+I[1]:W?+W[1]:0,gecko:D,gecko_version:D?+(/Firefox\/(\d+)/.exec(E.userAgent)||[0,0])[1]:0,chrome:!!z,chrome_version:z?+z[1]:0,ios:j,android:/Android\b/.test(E.userAgent),webkit:N,safari:L,webkit_version:N?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0,tabSize:null!=A.documentElement.style.tabSize?"tab-size":"-moz-tab-size"};class U extends T{constructor(e){super(),this.text=e}get length(){return this.text.length}createDOM(e){this.setDOM(e||document.createTextNode(this.text))}sync(e){this.dom||this.createDOM(),this.dom.nodeValue!=this.text&&(e&&e.node==this.dom&&(e.written=!0),this.dom.nodeValue=this.text)}reuseDOM(e){3==e.nodeType&&this.createDOM(e)}merge(e,t,n){return(!n||n instanceof U&&!(this.length-(t-e)+n.length>256))&&(this.text=this.text.slice(0,e)+(n?n.text:"")+this.text.slice(t),this.markDirty(),!0)}split(e){let t=new U(this.text.slice(e));return this.text=this.text.slice(0,e),this.markDirty(),t}localPosFromDOM(e,t){return e==this.dom?t:t?this.text.length:0}domAtPos(e){return new k(this.dom,e)}domBoundsAround(e,t,n){return{from:n,to:n+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(e,t){return B(this.dom,e,t)}}class V extends T{constructor(e,t=[],n=0){super(),this.mark=e,this.children=t,this.length=n;for(let e of t)e.setParent(this)}setAttrs(e){if(x(e),this.mark.class&&(e.className=this.mark.class),this.mark.attrs)for(let t in this.mark.attrs)e.setAttribute(t,this.mark.attrs[t]);return e}reuseDOM(e){e.nodeName==this.mark.tagName.toUpperCase()&&(this.setDOM(e),this.dirty|=6)}sync(e){this.dom?4&this.dirty&&this.setAttrs(this.dom):this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),super.sync(e)}merge(e,t,n,i,r,o){return!(n&&(!(n instanceof V&&n.mark.eq(this.mark))||e&&r<=0||t<this.length&&o<=0)||(R(this,e,t,n?n.children:[],r-1,o-1),this.markDirty(),0))}split(e){let t=[],n=0,i=-1,r=0;for(let o of this.children){let s=n+o.length;s>e&&t.push(n<e?o.split(e-n):o),i<0&&n>=e&&(i=r),n=s,r++}let o=this.length-e;return this.length=e,i>-1&&(this.children.length=i,this.markDirty()),new V(this.mark,t,o)}domAtPos(e){return J(this.dom,this.children,e)}coordsAt(e,t){return ee(this,e,t)}}function B(e,t,n){let i=e.nodeValue.length;t>i&&(t=i);let r=t,o=t,s=0;0==t&&n<0||t==i&&n>=0?Z.chrome||Z.gecko||(t?(r--,s=1):o<i&&(o++,s=-1)):n<0?r--:o<i&&o++;let a=w(e,r,o).getClientRects();if(!a.length)return p;let l=a[(s?s<0:n>=0)?0:a.length-1];return Z.safari&&!s&&0==l.width&&(l=Array.prototype.find.call(a,(e=>e.width))||l),s?m(l,s<0):l||null}class F extends T{constructor(e,t,n){super(),this.widget=e,this.length=t,this.side=n,this.prevWidget=null}static create(e,t,n){return new(e.customView||F)(e,t,n)}split(e){let t=F.create(this.widget,this.length-e,this.side);return this.length-=e,t}sync(){this.dom&&this.widget.updateDOM(this.dom)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(this.editorView)),this.dom.contentEditable="false")}getSide(){return this.side}merge(e,t,n,i,r,o){return!(n&&(!(n instanceof F&&this.widget.compare(n.widget))||e>0&&r<=0||t<this.length&&o<=0)||(this.length=e+(n?n.length:0)+(this.length-t),0))}become(e){return e.length==this.length&&e instanceof F&&e.side==this.side&&this.widget.constructor==e.widget.constructor&&(this.widget.eq(e.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=e.widget,!0)}ignoreMutation(){return!0}ignoreEvent(e){return this.widget.ignoreEvent(e)}get overrideDOMText(){if(0==this.length)return i.Text.empty;let e=this;for(;e.parent;)e=e.parent;let t=e.editorView,n=t&&t.state.doc,r=this.posAtStart;return n?n.slice(r,r+this.length):i.Text.empty}domAtPos(e){return 0==e?k.before(this.dom):k.after(this.dom,e==this.length)}domBoundsAround(){return null}coordsAt(e,t){let n=this.dom.getClientRects(),i=null;if(!n.length)return p;for(let t=e>0?n.length-1:0;i=n[t],!(e>0?0==t:t==n.length-1||i.top<i.bottom);t+=e>0?-1:1);return 0==e&&t>0||e==this.length&&t<=0?i:m(i,0==e)}get isEditable(){return!1}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class G extends F{domAtPos(e){let{topView:t,text:n}=this.widget;return t?Y(e,0,t,n,((e,t)=>e.domAtPos(t)),(e=>new k(n,Math.min(e,n.nodeValue.length)))):new k(n,Math.min(e,n.nodeValue.length))}sync(){this.setDOM(this.widget.toDOM())}localPosFromDOM(e,t){let{topView:n,text:i}=this.widget;return n?q(e,t,n,i):Math.min(t,this.length)}ignoreMutation(){return!1}get overrideDOMText(){return null}coordsAt(e,t){let{topView:n,text:i}=this.widget;return n?Y(e,t,n,i,((e,t,n)=>e.coordsAt(t,n)),((e,t)=>B(i,e,t))):B(i,e,t)}destroy(){var e;super.destroy(),null===(e=this.widget.topView)||void 0===e||e.destroy()}get isEditable(){return!0}}function Y(e,t,n,i,r,o){if(n instanceof V){for(let s of n.children){let n=a(s.dom,i),l=n?i.nodeValue.length:s.length;if(e<l||e==l&&s.getSide()<=0)return n?Y(e,t,s,i,r,o):r(s,e,t);e-=l}return r(n,n.length,-1)}return n.dom==i?o(e,t):r(n,e,t)}function q(e,t,n,i){if(n instanceof V)for(let r of n.children){let n=0,o=a(r.dom,i);if(a(r.dom,e))return n+(o?q(e,t,r,i):r.localPosFromDOM(e,t));n+=o?i.nodeValue.length:r.length}else if(n.dom==i)return Math.min(t,i.nodeValue.length);return n.localPosFromDOM(e,t)}class H extends T{constructor(e){super(),this.side=e}get length(){return 0}merge(){return!1}become(e){return e instanceof H&&e.side==this.side}split(){return new H(this.side)}sync(){if(!this.dom){let e=document.createElement("img");e.className="cm-widgetBuffer",e.setAttribute("aria-hidden","true"),this.setDOM(e)}}getSide(){return this.side}domAtPos(e){return k.before(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(e){let t=this.dom.getBoundingClientRect(),n=function(e,t){let n=e.parent,i=n?n.children.indexOf(e):-1;for(;n&&i>=0;)if(t<0?i>0:i<n.children.length){let e=n.children[i+t];if(e instanceof U){let n=e.coordsAt(t<0?e.length:0,t);if(n)return n}i+=t}else{if(!(n instanceof V&&n.parent)){let e=n.dom.lastChild;if(e&&"BR"==e.nodeName)return e.getClientRects()[0];break}i=n.parent.children.indexOf(n)+(t<0?0:1),n=n.parent}}(this,this.side>0?-1:1);return n&&n.top<t.bottom&&n.bottom>t.top?{left:t.left,right:t.right,top:n.top,bottom:n.bottom}:t}get overrideDOMText(){return i.Text.empty}}function J(e,t,n){let i=0;for(let r=0;i<t.length;i++){let o=t[i],s=r+o.length;if(!(s==r&&o.getSide()<=0)){if(n>r&&n<s&&o.dom.parentNode==e)return o.domAtPos(n-r);if(n<=r)break;r=s}}for(;i>0;i--){let n=t[i-1].dom;if(n.parentNode==e)return k.after(n)}return new k(e,0)}function K(e,t,n){let i,{children:r}=e;n>0&&t instanceof V&&r.length&&(i=r[r.length-1])instanceof V&&i.mark.eq(t.mark)?K(i,t.children[0],n-1):(r.push(t),t.setParent(e)),e.length+=t.length}function ee(e,t,n){for(let i=0,r=0;r<e.children.length;r++){let o,s=e.children[r],a=i+s.length;if((n<=0||a==e.length||s.getSide()>0?a>=t:a>t)&&(t<a||r+1==e.children.length||(o=e.children[r+1]).length||o.getSide()>0)){let e=0;if(a==i){if(s.getSide()<=0)continue;e=n=-s.getSide()}let r=s.coordsAt(Math.max(0,t-i),n);return e&&r?m(r,n<0):r}i=a}let i=e.dom.lastChild;if(!i)return e.dom.getBoundingClientRect();let r=c(i);return r[r.length-1]||null}function te(e,t){for(let n in e)"class"==n&&t.class?t.class+=" "+e.class:"style"==n&&t.style?t.style+=";"+e.style:t[n]=e[n];return t}function ne(e,t){if(e==t)return!0;if(!e||!t)return!1;let n=Object.keys(e),i=Object.keys(t);if(n.length!=i.length)return!1;for(let r of n)if(-1==i.indexOf(r)||e[r]!==t[r])return!1;return!0}function ie(e,t,n){let i=null;if(t)for(let r in t)n&&r in n||e.removeAttribute(i=r);if(n)for(let r in n)t&&t[r]==n[r]||e.setAttribute(i=r,n[r]);return!!i}U.prototype.children=F.prototype.children=H.prototype.children=Q;class re{eq(e){return!1}updateDOM(e){return!1}compare(e){return this==e||this.constructor==e.constructor&&this.eq(e)}get estimatedHeight(){return-1}ignoreEvent(e){return!0}get customView(){return null}destroy(e){}}t.BlockType=void 0,(X=t.BlockType||(t.BlockType={}))[X.Text=0]="Text",X[X.WidgetBefore=1]="WidgetBefore",X[X.WidgetAfter=2]="WidgetAfter",X[X.WidgetRange=3]="WidgetRange";class oe extends i.RangeValue{constructor(e,t,n,i){super(),this.startSide=e,this.endSide=t,this.widget=n,this.spec=i}get heightRelevant(){return!1}static mark(e){return new se(e)}static widget(e){let t=e.side||0,n=!!e.block;return t+=n?t>0?3e8:-4e8:t>0?1e8:-1e8,new le(e,t,t,n,e.widget||null,!1)}static replace(e){let t,n,i=!!e.block;if(e.isBlockGap)t=-5e8,n=4e8;else{let{start:r,end:o}=ce(e,i);t=(r?i?-3e8:-1:5e8)-1,n=1+(o?i?2e8:1:-6e8)}return new le(e,t,n,i,e.widget||null,!0)}static line(e){return new ae(e)}static set(e,t=!1){return i.RangeSet.of(e,t)}hasHeight(){return!!this.widget&&this.widget.estimatedHeight>-1}}oe.none=i.RangeSet.empty;class se extends oe{constructor(e){let{start:t,end:n}=ce(e);super(t?-1:5e8,n?1:-6e8,null,e),this.tagName=e.tagName||"span",this.class=e.class||"",this.attrs=e.attributes||null}eq(e){return this==e||e instanceof se&&this.tagName==e.tagName&&this.class==e.class&&ne(this.attrs,e.attrs)}range(e,t=e){if(e>=t)throw new RangeError("Mark decorations may not be empty");return super.range(e,t)}}se.prototype.point=!1;class ae extends oe{constructor(e){super(-2e8,-2e8,null,e)}eq(e){return e instanceof ae&&ne(this.spec.attributes,e.spec.attributes)}range(e,t=e){if(t!=e)throw new RangeError("Line decoration ranges must be zero-length");return super.range(e,t)}}ae.prototype.mapMode=i.MapMode.TrackBefore,ae.prototype.point=!0;class le extends oe{constructor(e,t,n,r,o,s){super(t,n,o,e),this.block=r,this.isReplace=s,this.mapMode=r?t<=0?i.MapMode.TrackBefore:i.MapMode.TrackAfter:i.MapMode.TrackDel}get type(){return this.startSide<this.endSide?t.BlockType.WidgetRange:this.startSide<=0?t.BlockType.WidgetBefore:t.BlockType.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&this.widget.estimatedHeight>=5}eq(e){return e instanceof le&&((t=this.widget)==(n=e.widget)||!!(t&&n&&t.compare(n)))&&this.block==e.block&&this.startSide==e.startSide&&this.endSide==e.endSide;var t,n}range(e,t=e){if(this.isReplace&&(e>t||e==t&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&t!=e)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(e,t)}}function ce(e,t=!1){let{inclusiveStart:n,inclusiveEnd:i}=e;return null==n&&(n=e.inclusive),null==i&&(i=e.inclusive),{start:null!=n?n:t,end:null!=i?i:t}}function ue(e,t,n,i=0){let r=n.length-1;r>=0&&n[r]+i>=e?n[r]=Math.max(n[r],t):n.push(e,t)}le.prototype.point=!0;class he extends T{constructor(){super(...arguments),this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(e,t,n,i,r,o){if(n){if(!(n instanceof he))return!1;this.dom||n.transferDOM(this)}return i&&this.setDeco(n?n.attrs:null),R(this,e,t,n?n.children:[],r,o),!0}split(e){let t=new he;if(t.breakAfter=this.breakAfter,0==this.length)return t;let{i:n,off:i}=this.childPos(e);i&&(t.append(this.children[n].split(i),0),this.children[n].merge(i,this.children[n].length,null,!1,0,0),n++);for(let e=n;e<this.children.length;e++)t.append(this.children[e],0);for(;n>0&&0==this.children[n-1].length;)this.children[--n].destroy();return this.children.length=n,this.markDirty(),this.length=e,t}transferDOM(e){this.dom&&(this.markDirty(),e.setDOM(this.dom),e.prevAttrs=void 0===this.prevAttrs?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null)}setDeco(e){ne(this.attrs,e)||(this.dom&&(this.prevAttrs=this.attrs,this.markDirty()),this.attrs=e)}append(e,t){K(this,e,t)}addLineDeco(e){let t=e.spec.attributes,n=e.spec.class;t&&(this.attrs=te(t,this.attrs||{})),n&&(this.attrs=te({class:n},this.attrs||{}))}domAtPos(e){return J(this.dom,this.children,e)}reuseDOM(e){"DIV"==e.nodeName&&(this.setDOM(e),this.dirty|=6)}sync(e){var t;this.dom?4&this.dirty&&(x(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0):(this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0),void 0!==this.prevAttrs&&(ie(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0),super.sync(e);let n=this.dom.lastChild;for(;n&&T.get(n)instanceof V;)n=n.lastChild;if(!(n&&this.length&&("BR"==n.nodeName||0!=(null===(t=T.get(n))||void 0===t?void 0:t.isEditable)||Z.ios&&this.children.some((e=>e instanceof U))))){let e=document.createElement("BR");e.cmIgnore=!0,this.dom.appendChild(e)}}measureTextSize(){if(0==this.children.length||this.length>20)return null;let e=0;for(let t of this.children){if(!(t instanceof U))return null;let n=c(t.dom);if(1!=n.length)return null;e+=n[0].width}return{lineHeight:this.dom.getBoundingClientRect().height,charWidth:e/this.length}}coordsAt(e,t){return ee(this,e,t)}become(e){return!1}get type(){return t.BlockType.Text}static find(e,t){for(let n=0,i=0;n<e.children.length;n++){let r=e.children[n],o=i+r.length;if(o>=t){if(r instanceof he)return r;if(o>t)break}i=o+r.breakAfter}return null}}class fe extends T{constructor(e,t,n){super(),this.widget=e,this.length=t,this.type=n,this.breakAfter=0,this.prevWidget=null}merge(e,t,n,i,r,o){return!(n&&(!(n instanceof fe&&this.widget.compare(n.widget))||e>0&&r<=0||t<this.length&&o<=0)||(this.length=e+(n?n.length:0)+(this.length-t),0))}domAtPos(e){return 0==e?k.before(this.dom):k.after(this.dom,e==this.length)}split(e){let t=this.length-e;this.length=e;let n=new fe(this.widget,t,this.type);return n.breakAfter=this.breakAfter,n}get children(){return Q}sync(){this.dom&&this.widget.updateDOM(this.dom)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(this.editorView)),this.dom.contentEditable="false")}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):i.Text.empty}domBoundsAround(){return null}become(e){return e instanceof fe&&e.type==this.type&&e.widget.constructor==this.widget.constructor&&(e.widget.eq(this.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=e.widget,this.length=e.length,this.breakAfter=e.breakAfter,!0)}ignoreMutation(){return!0}ignoreEvent(e){return this.widget.ignoreEvent(e)}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class de{constructor(e,t,n,i){this.doc=e,this.pos=t,this.end=n,this.disallowBlockEffectsFor=i,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=e.iter(),this.skip=t}posCovered(){if(0==this.content.length)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let e=this.content[this.content.length-1];return!(e.breakAfter||e instanceof fe&&e.type==t.BlockType.WidgetBefore)}getLine(){return this.curLine||(this.content.push(this.curLine=new he),this.atCursorPos=!0),this.curLine}flushBuffer(e){this.pendingBuffer&&(this.curLine.append(pe(new H(-1),e),e.length),this.pendingBuffer=0)}addBlockWidget(e){this.flushBuffer([]),this.curLine=null,this.content.push(e)}finish(e){e?this.pendingBuffer=0:this.flushBuffer([]),this.posCovered()||this.getLine()}buildText(e,t,n){for(;e>0;){if(this.textOff==this.text.length){let{value:t,lineBreak:n,done:i}=this.cursor.next(this.skip);if(this.skip=0,i)throw new Error("Ran out of text content when drawing inline views");if(n){this.posCovered()||this.getLine(),this.content.length?this.content[this.content.length-1].breakAfter=1:this.breakAtStart=1,this.flushBuffer([]),this.curLine=null,e--;continue}this.text=t,this.textOff=0}let i=Math.min(this.text.length-this.textOff,e,512);this.flushBuffer(t.slice(0,n)),this.getLine().append(pe(new U(this.text.slice(this.textOff,this.textOff+i)),t),n),this.atCursorPos=!0,this.textOff+=i,e-=i,n=0}}span(e,t,n,i){this.buildText(t-e,n,i),this.pos=t,this.openStart<0&&(this.openStart=i)}point(e,n,i,r,o,s){if(this.disallowBlockEffectsFor[s]&&i instanceof le){if(i.block)throw new RangeError("Block decorations may not be specified via plugins");if(n>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let a=n-e;if(i instanceof le)if(i.block){let{type:e}=i;e!=t.BlockType.WidgetAfter||this.posCovered()||this.getLine(),this.addBlockWidget(new fe(i.widget||new me("div"),a,e))}else{let t=F.create(i.widget||new me("span"),a,i.startSide),s=this.atCursorPos&&!t.isEditable&&o<=r.length&&(e<n||i.startSide>0),l=!t.isEditable&&(e<n||i.startSide<=0),c=this.getLine();2!=this.pendingBuffer||s||(this.pendingBuffer=0),this.flushBuffer(r),s&&(c.append(pe(new H(1),r),o),o=r.length+Math.max(0,o-r.length)),c.append(pe(t,r),o),this.atCursorPos=l,this.pendingBuffer=l?e<n?1:2:0}else this.doc.lineAt(this.pos).from==this.pos&&this.getLine().addLineDeco(i);a&&(this.textOff+a<=this.text.length?this.textOff+=a:(this.skip+=a-(this.text.length-this.textOff),this.text="",this.textOff=0),this.pos=n),this.openStart<0&&(this.openStart=o)}static build(e,t,n,r,o){let s=new de(e,t,n,o);return s.openEnd=i.RangeSet.spans(r,t,n,s),s.openStart<0&&(s.openStart=s.openEnd),s.finish(s.openEnd),s}}function pe(e,t){for(let n of t)e=new V(n,[e],e.length);return e}class me extends re{constructor(e){super(),this.tag=e}eq(e){return e.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(e){return e.nodeName.toLowerCase()==this.tag}}const ge=i.Facet.define(),Oe=i.Facet.define(),ve=i.Facet.define(),ye=i.Facet.define(),be=i.Facet.define(),we=i.Facet.define(),Se=i.Facet.define({combine:e=>e.some((e=>e))});class xe{constructor(e,t="nearest",n="nearest",i=5,r=5){this.range=e,this.y=t,this.x=n,this.yMargin=i,this.xMargin=r}map(e){return e.empty?this:new xe(this.range.map(e),this.y,this.x,this.yMargin,this.xMargin)}}const ke=i.StateEffect.define({map:(e,t)=>e.map(t)});function Qe(e,t,n){let i=e.facet(ye);i.length?i[0](t):window.onerror?window.onerror(String(t),n,void 0,void 0,t):n?console.error(n+":",t):console.error(t)}const Te=i.Facet.define({combine:e=>!e.length||e[0]});let $e=0;const Pe=i.Facet.define();class Ce{constructor(e,t,n,i){this.id=e,this.create=t,this.domEventHandlers=n,this.extension=i(this)}static define(e,t){const{eventHandlers:n,provide:i,decorations:r}=t||{};return new Ce($e++,e,n,(e=>{let t=[Pe.of(e)];return r&&t.push(We.of((t=>{let n=t.plugin(e);return n?r(n):oe.none}))),i&&t.push(i(e)),t}))}static fromClass(e,t){return Ce.define((t=>new e(t)),t)}}class Re{constructor(e){this.spec=e,this.mustUpdate=null,this.value=null}update(e){if(this.value){if(this.mustUpdate){let e=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(e)}catch(t){if(Qe(e.state,t,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(e){}this.deactivate()}}}else if(this.spec)try{this.value=this.spec.create(e)}catch(t){Qe(e.state,t,"CodeMirror plugin crashed"),this.deactivate()}return this}destroy(e){var t;if(null===(t=this.value)||void 0===t?void 0:t.destroy)try{this.value.destroy()}catch(t){Qe(e.state,t,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}const Ee=i.Facet.define(),Ae=i.Facet.define(),We=i.Facet.define(),Me=i.Facet.define(),Ie=i.Facet.define(),_e=i.Facet.define();class De{constructor(e,t,n,i){this.fromA=e,this.toA=t,this.fromB=n,this.toB=i}join(e){return new De(Math.min(this.fromA,e.fromA),Math.max(this.toA,e.toA),Math.min(this.fromB,e.fromB),Math.max(this.toB,e.toB))}addToSet(e){let t=e.length,n=this;for(;t>0;t--){let i=e[t-1];if(!(i.fromA>n.toA)){if(i.toA<n.fromA)break;n=n.join(i),e.splice(t-1,1)}}return e.splice(t,0,n),e}static extendWithRanges(e,t){if(0==t.length)return e;let n=[];for(let i=0,r=0,o=0,s=0;;i++){let a=i==e.length?null:e[i],l=o-s,c=a?a.fromB:1e9;for(;r<t.length&&t[r]<c;){let e=t[r],i=t[r+1],o=Math.max(s,e),a=Math.min(c,i);if(o<=a&&new De(o+l,a+l,o,a).addToSet(n),i>c)break;r+=2}if(!a)return n;new De(a.fromA,a.toA,a.fromB,a.toB).addToSet(n),o=a.toA,s=a.toB}}}class ze{constructor(e,t,n){this.view=e,this.state=t,this.transactions=n,this.flags=0,this.startState=e.state,this.changes=i.ChangeSet.empty(this.startState.doc.length);for(let e of n)this.changes=this.changes.compose(e.changes);let r=[];this.changes.iterChangedRanges(((e,t,n,i)=>r.push(new De(e,t,n,i)))),this.changedRanges=r;let o=e.hasFocus;o!=e.inputState.notifiedFocused&&(e.inputState.notifiedFocused=o,this.flags|=1)}static create(e,t,n){return new ze(e,t,n)}get viewportChanged(){return(4&this.flags)>0}get heightChanged(){return(2&this.flags)>0}get geometryChanged(){return this.docChanged||(10&this.flags)>0}get focusChanged(){return(1&this.flags)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((e=>e.selection))}get empty(){return 0==this.flags&&0==this.transactions.length}}var Ne;t.Direction=void 0,(Ne=t.Direction||(t.Direction={}))[Ne.LTR=0]="LTR",Ne[Ne.RTL=1]="RTL";const Le=t.Direction.LTR,je=t.Direction.RTL;function Xe(e){let t=[];for(let n=0;n<e.length;n++)t.push(1<<+e[n]);return t}const Ze=Xe("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),Ue=Xe("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),Ve=Object.create(null),Be=[];for(let e of["()","[]","{}"]){let t=e.charCodeAt(0),n=e.charCodeAt(1);Ve[t]=n,Ve[n]=-t}const Fe=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;class Ge{constructor(e,t,n){this.from=e,this.to=t,this.level=n}get dir(){return this.level%2?je:Le}side(e,t){return this.dir==t==e?this.to:this.from}static find(e,t,n,i){let r=-1;for(let o=0;o<e.length;o++){let s=e[o];if(s.from<=t&&s.to>=t){if(s.level==n)return o;(r<0||(0!=i?i<0?s.from<t:s.to>t:e[r].level>s.level))&&(r=o)}}if(r<0)throw new RangeError("Index out of range");return r}}const Ye=[];function qe(e,t){let n=e.length,i=t==Le?1:2,r=t==Le?2:1;if(!e||1==i&&!Fe.test(e))return He(n);for(let t=0,r=i,s=i;t<n;t++){let n=(o=e.charCodeAt(t))<=247?Ze[o]:1424<=o&&o<=1524?2:1536<=o&&o<=1785?Ue[o-1536]:1774<=o&&o<=2220?4:8192<=o&&o<=8203||8204==o?256:1;512==n?n=r:8==n&&4==s&&(n=16),Ye[t]=4==n?2:n,7&n&&(s=n),r=n}var o;for(let e=0,t=i,r=i;e<n;e++){let i=Ye[e];if(128==i)e<n-1&&t==Ye[e+1]&&24&t?i=Ye[e]=t:Ye[e]=256;else if(64==i){let i=e+1;for(;i<n&&64==Ye[i];)i++;let o=e&&8==t||i<n&&8==Ye[i]?1==r?1:8:256;for(let t=e;t<i;t++)Ye[t]=o;e=i-1}else 8==i&&1==r&&(Ye[e]=1);t=i,7&i&&(r=i)}for(let t,o,s,a=0,l=0,c=0;a<n;a++)if(o=Ve[t=e.charCodeAt(a)])if(o<0){for(let e=l-3;e>=0;e-=3)if(Be[e+1]==-o){let t=Be[e+2],n=2&t?i:4&t?1&t?r:i:0;n&&(Ye[a]=Ye[Be[e]]=n),l=e;break}}else{if(189==Be.length)break;Be[l++]=a,Be[l++]=t,Be[l++]=c}else if(2==(s=Ye[a])||1==s){let e=s==i;c=e?0:1;for(let t=l-3;t>=0;t-=3){let n=Be[t+2];if(2&n)break;if(e)Be[t+2]|=2;else{if(4&n)break;Be[t+2]|=4}}}for(let e=0;e<n;e++)if(256==Ye[e]){let t=e+1;for(;t<n&&256==Ye[t];)t++;let r=1==(e?Ye[e-1]:i),o=r==(1==(t<n?Ye[t]:i))?r?1:2:i;for(let n=e;n<t;n++)Ye[n]=o;e=t-1}let s=[];if(1==i)for(let e=0;e<n;){let t=e,i=1!=Ye[e++];for(;e<n&&i==(1!=Ye[e]);)e++;if(i)for(let n=e;n>t;){let e=n,i=2!=Ye[--n];for(;n>t&&i==(2!=Ye[n-1]);)n--;s.push(new Ge(n,e,i?2:1))}else s.push(new Ge(t,e,0))}else for(let e=0;e<n;){let t=e,i=2==Ye[e++];for(;e<n&&i==(2==Ye[e]);)e++;s.push(new Ge(t,e,i?1:2))}return s}function He(e){return[new Ge(0,e,0)]}let Je="";function Ke(e,t,n,r,o){var s;let a=r.head-e.from,l=-1;if(0==a){if(!o||!e.length)return null;t[0].level!=n&&(a=t[0].side(!1,n),l=0)}else if(a==e.length){if(o)return null;let e=t[t.length-1];e.level!=n&&(a=e.side(!0,n),l=t.length-1)}l<0&&(l=Ge.find(t,a,null!==(s=r.bidiLevel)&&void 0!==s?s:-1,r.assoc));let c=t[l];a==c.side(o,n)&&(c=t[l+=o?1:-1],a=c.side(!o,n));let u=o==(c.dir==n),h=i.findClusterBreak(e.text,a,u);if(Je=e.text.slice(Math.min(a,h),Math.max(a,h)),h!=c.side(o,n))return i.EditorSelection.cursor(h+e.from,u?-1:1,c.level);let f=l==(o?t.length-1:0)?null:t[l+(o?1:-1)];return f||c.level==n?f&&f.level<c.level?i.EditorSelection.cursor(f.side(!o,n)+e.from,o?1:-1,f.level):i.EditorSelection.cursor(h+e.from,o?-1:1,c.level):i.EditorSelection.cursor(o?e.to:e.from,o?-1:1,n)}const et="￿";class tt{constructor(e,t){this.points=e,this.text="",this.lineSeparator=t.facet(i.EditorState.lineSeparator)}append(e){this.text+=e}lineBreak(){this.text+=et}readRange(e,t){if(!e)return this;let n=e.parentNode;for(let i=e;;){this.findPointBefore(n,i),this.readNode(i);let e=i.nextSibling;if(e==t)break;let r=T.get(i),o=T.get(e);(r&&o?r.breakAfter:(r?r.breakAfter:nt(i))||nt(e)&&("BR"!=i.nodeName||i.cmIgnore))&&this.lineBreak(),i=e}return this.findPointBefore(n,t),this}readTextNode(e){let t=e.nodeValue;for(let n of this.points)n.node==e&&(n.pos=this.text.length+Math.min(n.offset,t.length));for(let n=0,i=this.lineSeparator?null:/\r\n?|\n/g;;){let r,o=-1,s=1;if(this.lineSeparator?(o=t.indexOf(this.lineSeparator,n),s=this.lineSeparator.length):(r=i.exec(t))&&(o=r.index,s=r[0].length),this.append(t.slice(n,o<0?t.length:o)),o<0)break;if(this.lineBreak(),s>1)for(let t of this.points)t.node==e&&t.pos>this.text.length&&(t.pos-=s-1);n=o+s}}readNode(e){if(e.cmIgnore)return;let t=T.get(e),n=t&&t.overrideDOMText;if(null!=n){this.findPointInside(e,n.length);for(let e=n.iter();!e.next().done;)e.lineBreak?this.lineBreak():this.append(e.value)}else 3==e.nodeType?this.readTextNode(e):"BR"==e.nodeName?e.nextSibling&&this.lineBreak():1==e.nodeType&&this.readRange(e.firstChild,null)}findPointBefore(e,t){for(let n of this.points)n.node==e&&e.childNodes[n.offset]==t&&(n.pos=this.text.length)}findPointInside(e,t){for(let n of this.points)(3==e.nodeType?n.node==e:e.contains(n.node))&&(n.pos=this.text.length+Math.min(t,n.offset))}}function nt(e){return 1==e.nodeType&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(e.nodeName)}class it{constructor(e,t){this.node=e,this.offset=t,this.pos=-1}}class rt extends T{constructor(e){super(),this.view=e,this.compositionDeco=oe.none,this.decorations=[],this.dynamicDecorationMap=[],this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(e.contentDOM),this.children=[new he],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new De(0,0,0,e.state.doc.length)],0)}get root(){return this.view.root}get editorView(){return this.view}get length(){return this.view.state.doc.length}update(e){let t=e.changedRanges;this.minWidth>0&&t.length&&(t.every((({fromA:e,toA:t})=>t<this.minWidthFrom||e>this.minWidthTo))?(this.minWidthFrom=e.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=e.changes.mapPos(this.minWidthTo,1)):this.minWidth=this.minWidthFrom=this.minWidthTo=0),this.view.inputState.composing<0?this.compositionDeco=oe.none:(e.transactions.length||this.dirty)&&(this.compositionDeco=function(e,t){let n=st(e);if(!n)return oe.none;let{from:i,to:r,node:o,text:s}=n,a=t.mapPos(i,1),l=Math.max(a,t.mapPos(r,-1)),{state:c}=e,u=3==o.nodeType?o.nodeValue:new tt([],c).readRange(o.firstChild,null).text;if(l-a<u.length)if(c.doc.sliceString(a,Math.min(c.doc.length,a+u.length),et)==u)l=a+u.length;else{if(c.doc.sliceString(Math.max(0,l-u.length),l,et)!=u)return oe.none;a=l-u.length}else if(c.doc.sliceString(a,l,et)!=u)return oe.none;let h=T.get(o);return h instanceof G?h=h.widget.topView:h&&(h.parent=null),oe.set(oe.replace({widget:new at(o,s,h),inclusive:!0}).range(a,l))}(this.view,e.changes)),(Z.ie||Z.chrome)&&!this.compositionDeco.size&&e&&e.state.doc.lines!=e.startState.doc.lines&&(this.forceSelection=!0);let n=function(e,t,n){let r=new ct;return i.RangeSet.compare(e,t,n,r),r.changes}(this.decorations,this.updateDeco(),e.changes);return t=De.extendWithRanges(t,n),(0!=this.dirty||0!=t.length)&&(this.updateInner(t,e.startState.doc.length),e.transactions.length&&(this.lastUpdate=Date.now()),!0)}updateInner(e,t){this.view.viewState.mustMeasureContent=!0,this.updateChildren(e,t);let{observer:n}=this.view;n.ignore((()=>{this.dom.style.height=this.view.viewState.contentHeight+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let e=Z.chrome||Z.ios?{node:n.selectionRange.focusNode,written:!1}:void 0;this.sync(e),this.dirty=0,e&&(e.written||n.selectionRange.focusNode!=e.node)&&(this.forceSelection=!0),this.dom.style.height=""}));let i=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length)for(let e of this.children)e instanceof fe&&e.widget instanceof ot&&i.push(e.dom);n.updateGaps(i)}updateChildren(e,t){let n=this.childCursor(t);for(let t=e.length-1;;t--){let i=t>=0?e[t]:null;if(!i)break;let{fromA:r,toA:o,fromB:s,toB:a}=i,{content:l,breakAtStart:c,openStart:u,openEnd:h}=de.build(this.view.state.doc,s,a,this.decorations,this.dynamicDecorationMap),{i:f,off:d}=n.findPos(o,1),{i:p,off:m}=n.findPos(r,-1);C(this,p,m,f,d,l,c,u,h)}}updateSelection(e=!1,t=!1){if(e&&this.view.observer.readSelectionRange(),!t&&!this.mayControlSelection()||Z.ios&&this.view.inputState.rapidCompositionStart)return;let n=this.forceSelection;this.forceSelection=!1;let i=this.view.state.selection.main,r=this.domAtPos(i.anchor),o=i.empty?r:this.domAtPos(i.head);if(Z.gecko&&i.empty&&1==(a=r).node.nodeType&&a.node.firstChild&&(0==a.offset||"false"==a.node.childNodes[a.offset-1].contentEditable)&&(a.offset==a.node.childNodes.length||"false"==a.node.childNodes[a.offset].contentEditable)){let e=document.createTextNode("");this.view.observer.ignore((()=>r.node.insertBefore(e,r.node.childNodes[r.offset]||null))),r=o=new k(e,0),n=!0}var a;let l=this.view.observer.selectionRange;!n&&l.focusNode&&u(r.node,r.offset,l.anchorNode,l.anchorOffset)&&u(o.node,o.offset,l.focusNode,l.focusOffset)||(this.view.observer.ignore((()=>{Z.android&&Z.chrome&&this.dom.contains(l.focusNode)&&function(e,t){for(let n=e;n&&n!=t;n=n.assignedSlot||n.parentNode)if(1==n.nodeType&&"false"==n.contentEditable)return!0;return!1}(l.focusNode,this.dom)&&(this.dom.blur(),this.dom.focus({preventScroll:!0}));let e=s(this.root);if(i.empty){if(Z.gecko){let e=(t=r.node,n=r.offset,1!=t.nodeType?0:(n&&"false"==t.childNodes[n-1].contentEditable?1:0)|(n<t.childNodes.length&&"false"==t.childNodes[n].contentEditable?2:0));if(e&&3!=e){let t=lt(r.node,r.offset,1==e?1:-1);t&&(r=new k(t,1==e?0:t.nodeValue.length))}}e.collapse(r.node,r.offset),null!=i.bidiLevel&&null!=l.cursorBidiLevel&&(l.cursorBidiLevel=i.bidiLevel)}else if(e.extend)e.collapse(r.node,r.offset),e.extend(o.node,o.offset);else{let t=document.createRange();i.anchor>i.head&&([r,o]=[o,r]),t.setEnd(o.node,o.offset),t.setStart(r.node,r.offset),e.removeAllRanges(),e.addRange(t)}var t,n})),this.view.observer.setSelectionRange(r,o)),this.impreciseAnchor=r.precise?null:new k(l.anchorNode,l.anchorOffset),this.impreciseHead=o.precise?null:new k(l.focusNode,l.focusOffset)}enforceCursorAssoc(){if(this.compositionDeco.size)return;let e=this.view.state.selection.main,t=s(this.root);if(!e.empty||!e.assoc||!t.modify)return;let n=he.find(this,e.head);if(!n)return;let i=n.posAtStart;if(e.head==i||e.head==i+n.length)return;let r=this.coordsAt(e.head,-1),o=this.coordsAt(e.head,1);if(!r||!o||r.bottom>o.top)return;let a=this.domAtPos(e.head+e.assoc);t.collapse(a.node,a.offset),t.modify("move",e.assoc<0?"forward":"backward","lineboundary")}mayControlSelection(){return this.view.state.facet(Te)?this.root.activeElement==this.dom:l(this.dom,this.view.observer.selectionRange)}nearest(e){for(let t=e;t;){let e=T.get(t);if(e&&e.rootView==this)return e;t=t.parentNode}return null}posFromDOM(e,t){let n=this.nearest(e);if(!n)throw new RangeError("Trying to find position for a DOM position outside of the document");return n.localPosFromDOM(e,t)+n.posAtStart}domAtPos(e){let{i:t,off:n}=this.childCursor().findPos(e,-1);for(;t<this.children.length-1;){let e=this.children[t];if(n<e.length||e instanceof he)break;t++,n=0}return this.children[t].domAtPos(n)}coordsAt(e,n){for(let i=this.length,r=this.children.length-1;;r--){let o=this.children[r],s=i-o.breakAfter-o.length;if(e>s||e==s&&o.type!=t.BlockType.WidgetBefore&&o.type!=t.BlockType.WidgetAfter&&(!r||2==n||this.children[r-1].breakAfter||this.children[r-1].type==t.BlockType.WidgetBefore&&n>-2))return o.coordsAt(e-s,n);i=s}}measureVisibleLineHeights(e){let n=[],{from:i,to:r}=e,o=this.view.contentDOM.clientWidth,s=o>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,a=-1,l=this.view.textDirection==t.Direction.LTR;for(let e=0,t=0;t<this.children.length;t++){let u=this.children[t],h=e+u.length;if(h>r)break;if(e>=i){let t=u.dom.getBoundingClientRect();if(n.push(t.height),s){let n=u.dom.lastChild,i=n?c(n):[];if(i.length){let n=i[i.length-1],r=l?n.right-t.left:t.right-n.left;r>a&&(a=r,this.minWidth=o,this.minWidthFrom=e,this.minWidthTo=h)}}}e=h+u.breakAfter}return n}textDirectionAt(e){let{i:n}=this.childPos(e,1);return"rtl"==getComputedStyle(this.children[n].dom).direction?t.Direction.RTL:t.Direction.LTR}measureTextSize(){for(let e of this.children)if(e instanceof he){let t=e.measureTextSize();if(t)return t}let e,t,n=document.createElement("div");return n.className="cm-line",n.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore((()=>{this.dom.appendChild(n);let i=c(n.firstChild)[0];e=n.getBoundingClientRect().height,t=i?i.width/27:7,n.remove()})),{lineHeight:e,charWidth:t}}childCursor(e=this.length){let t=this.children.length;return t&&(e-=this.children[--t].length),new P(this.children,e,t)}computeBlockGapDeco(){let e=[],t=this.view.viewState;for(let n=0,i=0;;i++){let r=i==t.viewports.length?null:t.viewports[i],o=r?r.from-1:this.length;if(o>n){let i=t.lineBlockAt(o).bottom-t.lineBlockAt(n).top;e.push(oe.replace({widget:new ot(i),block:!0,inclusive:!0,isBlockGap:!0}).range(n,o))}if(!r)break;n=r.to+1}return oe.set(e)}updateDeco(){let e=this.view.state.facet(We).map(((e,t)=>(this.dynamicDecorationMap[t]="function"==typeof e)?e(this.view):e));for(let t=e.length;t<e.length+3;t++)this.dynamicDecorationMap[t]=!1;return this.decorations=[...e,this.compositionDeco,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco]}scrollIntoView(e){let n,{range:i}=e,r=this.coordsAt(i.head,i.empty?i.assoc:i.head>i.anchor?-1:1);if(!r)return;!i.empty&&(n=this.coordsAt(i.anchor,i.anchor>i.head?-1:1))&&(r={left:Math.min(r.left,n.left),top:Math.min(r.top,n.top),right:Math.max(r.right,n.right),bottom:Math.max(r.bottom,n.bottom)});let o=0,s=0,a=0,l=0;for(let e of this.view.state.facet(Ie).map((e=>e(this.view))))if(e){let{left:t,right:n,top:i,bottom:r}=e;null!=t&&(o=Math.max(o,t)),null!=n&&(s=Math.max(s,n)),null!=i&&(a=Math.max(a,i)),null!=r&&(l=Math.max(l,r))}let c={left:r.left-o,top:r.top-a,right:r.right+s,bottom:r.bottom+l};!function(e,t,n,i,r,o,s,a){let l=e.ownerDocument,c=l.defaultView;for(let u=e;u;)if(1==u.nodeType){let e,h=u==l.body;if(h)e=g(c);else{if(u.scrollHeight<=u.clientHeight&&u.scrollWidth<=u.clientWidth){u=u.parentNode;continue}let t=u.getBoundingClientRect();e={left:t.left,right:t.left+u.clientWidth,top:t.top,bottom:t.top+u.clientHeight}}let f=0,d=0;if("nearest"==r)t.top<e.top?(d=-(e.top-t.top+s),n>0&&t.bottom>e.bottom+d&&(d=t.bottom-e.bottom+d+s)):t.bottom>e.bottom&&(d=t.bottom-e.bottom+s,n<0&&t.top-d<e.top&&(d=-(e.top+d-t.top+s)));else{let i=t.bottom-t.top,o=e.bottom-e.top;d=("center"==r&&i<=o?t.top+i/2-o/2:"start"==r||"center"==r&&n<0?t.top-s:t.bottom-o+s)-e.top}if("nearest"==i?t.left<e.left?(f=-(e.left-t.left+o),n>0&&t.right>e.right+f&&(f=t.right-e.right+f+o)):t.right>e.right&&(f=t.right-e.right+o,n<0&&t.left<e.left+f&&(f=-(e.left+f-t.left+o))):f=("center"==i?t.left+(t.right-t.left)/2-(e.right-e.left)/2:"start"==i==a?t.left-o:t.right-(e.right-e.left)+o)-e.left,f||d)if(h)c.scrollBy(f,d);else{if(d){let e=u.scrollTop;u.scrollTop+=d,d=u.scrollTop-e}if(f){let e=u.scrollLeft;u.scrollLeft+=f,f=u.scrollLeft-e}t={left:t.left-f,top:t.top-d,right:t.right-f,bottom:t.bottom-d}}if(h)break;u=u.assignedSlot||u.parentNode,i=r="nearest"}else{if(11!=u.nodeType)break;u=u.host}}(this.view.scrollDOM,c,i.head<i.anchor?-1:1,e.x,e.y,e.xMargin,e.yMargin,this.view.textDirection==t.Direction.LTR)}}class ot extends re{constructor(e){super(),this.height=e}toDOM(){let e=document.createElement("div");return this.updateDOM(e),e}eq(e){return e.height==this.height}updateDOM(e){return e.style.height=this.height+"px",!0}get estimatedHeight(){return this.height}}function st(e){let t=e.observer.selectionRange,n=t.focusNode&&lt(t.focusNode,t.focusOffset,0);if(!n)return null;let i=e.docView.nearest(n);if(!i)return null;if(i instanceof he){let e=n;for(;e.parentNode!=i.dom;)e=e.parentNode;let t=e.previousSibling;for(;t&&!T.get(t);)t=t.previousSibling;let r=t?T.get(t).posAtEnd:i.posAtStart;return{from:r,to:r,node:e,text:n}}{for(;;){let{parent:e}=i;if(!e)return null;if(e instanceof he)break;i=e}let e=i.posAtStart;return{from:e,to:e+i.length,node:i.dom,text:n}}}class at extends re{constructor(e,t,n){super(),this.top=e,this.text=t,this.topView=n}eq(e){return this.top==e.top&&this.text==e.text}toDOM(){return this.top}ignoreEvent(){return!1}get customView(){return G}}function lt(e,t,n){for(;;){if(3==e.nodeType)return e;if(1==e.nodeType&&t>0&&n<=0)t=d(e=e.childNodes[t-1]);else{if(!(1==e.nodeType&&t<e.childNodes.length&&n>=0))return null;e=e.childNodes[t],t=0}}}class ct{constructor(){this.changes=[]}compareRange(e,t){ue(e,t,this.changes)}comparePoint(e,t){ue(e,t,this.changes)}}function ut(e,t){return t.left>e?t.left-e:Math.max(0,e-t.right)}function ht(e,t){return t.top>e?t.top-e:Math.max(0,e-t.bottom)}function ft(e,t){return e.top<t.bottom-1&&e.bottom>t.top+1}function dt(e,t){return t<e.top?{top:t,left:e.left,right:e.right,bottom:e.bottom}:e}function pt(e,t){return t>e.bottom?{top:e.top,left:e.left,right:e.right,bottom:t}:e}function mt(e,t,n){let i,r,o,s,a,l,u,h;for(let f=e.firstChild;f;f=f.nextSibling){let e=c(f);for(let c=0;c<e.length;c++){let d=e[c];r&&ft(r,d)&&(d=dt(pt(d,r.bottom),r.top));let p=ut(t,d),m=ht(n,d);if(0==p&&0==m)return 3==f.nodeType?gt(f,t,n):mt(f,t,n);(!i||s>m||s==m&&o>p)&&(i=f,r=d,o=p,s=m),0==p?n>d.bottom&&(!u||u.bottom<d.bottom)?(a=f,u=d):n<d.top&&(!h||h.top>d.top)&&(l=f,h=d):u&&ft(u,d)?u=pt(u,d.bottom):h&&ft(h,d)&&(h=dt(h,d.top))}}if(u&&u.bottom>=n?(i=a,r=u):h&&h.top<=n&&(i=l,r=h),!i)return{node:e,offset:0};let f=Math.max(r.left,Math.min(r.right,t));return 3==i.nodeType?gt(i,f,n):o||"true"!=i.contentEditable?{node:e,offset:Array.prototype.indexOf.call(e.childNodes,i)+(t>=(r.left+r.right)/2?1:0)}:mt(i,f,n)}function gt(e,t,n){let i=e.nodeValue.length,r=-1,o=1e9,s=0;for(let a=0;a<i;a++){let i=w(e,a,a+1).getClientRects();for(let l=0;l<i.length;l++){let c=i[l];if(c.top==c.bottom)continue;s||(s=t-c.left);let u=(c.top>n?c.top-n:n-c.bottom)-1;if(c.left-1<=t&&c.right+1>=t&&u<o){let n=t>=(c.left+c.right)/2,i=n;if((Z.chrome||Z.gecko)&&w(e,a).getBoundingClientRect().left==c.right&&(i=!n),u<=0)return{node:e,offset:a+(i?1:0)};r=a+(i?1:0),o=u}}}return{node:e,offset:r>-1?r:s>0?e.nodeValue.length:0}}function Ot(e,{x:n,y:i},r,o=-1){var s;let a,l=e.contentDOM.getBoundingClientRect(),c=l.top+e.viewState.paddingTop,{docHeight:u}=e.viewState,h=i-c;if(h<0)return 0;if(h>u)return e.state.doc.length;for(let n=e.defaultLineHeight/2,i=!1;a=e.elementAtHeight(h),a.type!=t.BlockType.Text;)for(;h=o>0?a.bottom+n:a.top-n,!(h>=0&&h<=u);){if(i)return r?null:0;i=!0,o=-o}i=c+h;let f=a.from;if(f<e.viewport.from)return 0==e.viewport.from?0:r?null:vt(e,l,a,n,i);if(f>e.viewport.to)return e.viewport.to==e.state.doc.length?e.state.doc.length:r?null:vt(e,l,a,n,i);let d=e.dom.ownerDocument,p=e.root.elementFromPoint?e.root:d,m=p.elementFromPoint(n,i);m&&!e.contentDOM.contains(m)&&(m=null),m||(n=Math.max(l.left+1,Math.min(l.right-1,n)),m=p.elementFromPoint(n,i),m&&!e.contentDOM.contains(m)&&(m=null));let g,O=-1;if(m&&0!=(null===(s=e.docView.nearest(m))||void 0===s?void 0:s.isEditable))if(d.caretPositionFromPoint){let e=d.caretPositionFromPoint(n,i);e&&({offsetNode:g,offset:O}=e)}else if(d.caretRangeFromPoint){let e=d.caretRangeFromPoint(n,i);e&&(({startContainer:g,startOffset:O}=e),Z.safari&&function(e,t,n){let i;if(3!=e.nodeType||t!=(i=e.nodeValue.length))return!1;for(let t=e.nextSibling;t;t=t.nextSibling)if(1!=t.nodeType||"BR"!=t.nodeName)return!1;return w(e,i-1,i).getBoundingClientRect().left>n}(g,O,n)&&(g=void 0))}if(!g||!e.docView.dom.contains(g)){let t=he.find(e.docView,f);if(!t)return h>a.top+a.height/2?a.to:a.from;({node:g,offset:O}=mt(t.dom,n,i))}return e.docView.posFromDOM(g,O)}function vt(e,t,n,r,o){let s=Math.round((r-t.left)*e.defaultCharacterWidth);e.lineWrapping&&n.height>1.5*e.defaultLineHeight&&(s+=Math.floor((o-n.top)/e.defaultLineHeight)*e.viewState.heightOracle.lineLength);let a=e.state.sliceDoc(n.from,n.to);return n.from+i.findColumn(a,s,e.state.tabSize)}function yt(e,t,n,r){let o=e.state.doc.lineAt(t.head),s=e.bidiSpans(o),a=e.textDirectionAt(o.from);for(let l=t,c=null;;){let t=Ke(o,s,a,l,n),u=Je;if(!t){if(o.number==(n?e.state.doc.lines:1))return l;u="\n",o=e.state.doc.line(o.number+(n?1:-1)),s=e.bidiSpans(o),t=i.EditorSelection.cursor(n?o.from:o.to)}if(c){if(!c(u))return l}else{if(!r)return t;c=r(u)}l=t}}function bt(e,t,n){let r=e.state.facet(Me).map((t=>t(e)));for(;;){let e=!1;for(let o of r)o.between(n.from-1,n.from+1,((r,o,s)=>{n.from>r&&n.from<o&&(n=t.from>n.from?i.EditorSelection.cursor(r,1):i.EditorSelection.cursor(o,-1),e=!0)}));if(!e)return n}}class wt{constructor(e){this.lastKeyCode=0,this.lastKeyTime=0,this.chromeScrollHack=-1,this.pendingIOSKey=void 0,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastEscPress=0,this.lastContextMenu=0,this.scrollHandlers=[],this.registeredEvents=[],this.customHandlers=[],this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.rapidCompositionStart=!1,this.mouseSelection=null;for(let t in Tt){let n=Tt[t];e.contentDOM.addEventListener(t,(i=>{Qt(e,i)&&!this.ignoreDuringComposition(i)&&("keydown"==t&&this.keydown(e,i)||(this.mustFlushObserver(i)&&e.observer.forceFlush(),this.runCustomHandlers(t,e,i)?i.preventDefault():n(e,i)))})),this.registeredEvents.push(t)}Z.chrome&&Z.chrome_version>=102&&e.scrollDOM.addEventListener("wheel",(()=>{this.chromeScrollHack<0?e.contentDOM.style.pointerEvents="none":window.clearTimeout(this.chromeScrollHack),this.chromeScrollHack=setTimeout((()=>{this.chromeScrollHack=-1,e.contentDOM.style.pointerEvents=""}),100)}),{passive:!0}),this.notifiedFocused=e.hasFocus,Z.safari&&e.contentDOM.addEventListener("input",(()=>null))}setSelectionOrigin(e){this.lastSelectionOrigin=e,this.lastSelectionTime=Date.now()}ensureHandlers(e,t){var n;let i;this.customHandlers=[];for(let r of t)if(i=null===(n=r.update(e).spec)||void 0===n?void 0:n.domEventHandlers){this.customHandlers.push({plugin:r.value,handlers:i});for(let t in i)this.registeredEvents.indexOf(t)<0&&"scroll"!=t&&(this.registeredEvents.push(t),e.contentDOM.addEventListener(t,(n=>{Qt(e,n)&&this.runCustomHandlers(t,e,n)&&n.preventDefault()})))}}runCustomHandlers(e,t,n){for(let i of this.customHandlers){let r=i.handlers[e];if(r)try{if(r.call(i.plugin,n,t)||n.defaultPrevented)return!0}catch(e){Qe(t.state,e)}}return!1}runScrollHandlers(e,t){for(let n of this.customHandlers){let i=n.handlers.scroll;if(i)try{i.call(n.plugin,t,e)}catch(t){Qe(e.state,t)}}}keydown(e,t){if(this.lastKeyCode=t.keyCode,this.lastKeyTime=Date.now(),9==t.keyCode&&Date.now()<this.lastEscPress+2e3)return!0;if(Z.android&&Z.chrome&&!t.synthetic&&(13==t.keyCode||8==t.keyCode))return e.observer.delayAndroidKey(t.key,t.keyCode),!0;let n;return!(!Z.ios||!(n=St.find((e=>e.keyCode==t.keyCode)))||t.ctrlKey||t.altKey||t.metaKey||t.synthetic||(this.pendingIOSKey=n,setTimeout((()=>this.flushIOSKey(e)),250),0))}flushIOSKey(e){let t=this.pendingIOSKey;return!!t&&(this.pendingIOSKey=void 0,S(e.contentDOM,t.key,t.keyCode))}ignoreDuringComposition(e){return!!/^key/.test(e.type)&&(this.composing>0||!!(Z.safari&&Date.now()-this.compositionEndedAt<100)&&(this.compositionEndedAt=0,!0))}mustFlushObserver(e){return"keydown"==e.type&&229!=e.keyCode||"compositionend"==e.type&&!Z.ios}startMouseSelection(e){this.mouseSelection&&this.mouseSelection.destroy(),this.mouseSelection=e}update(e){this.mouseSelection&&this.mouseSelection.update(e),e.transactions.length&&(this.lastKeyCode=this.lastSelectionTime=0)}destroy(){this.mouseSelection&&this.mouseSelection.destroy()}}const St=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],xt=[16,17,18,20,91,92,224,225];class kt{constructor(e,t,n,r){this.view=e,this.style=n,this.mustSelect=r,this.lastEvent=t;let o=e.contentDOM.ownerDocument;o.addEventListener("mousemove",this.move=this.move.bind(this)),o.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=t.shiftKey,this.multiple=e.state.facet(i.EditorState.allowMultipleSelections)&&function(e,t){let n=e.state.facet(ge);return n.length?n[0](t):Z.mac?t.metaKey:t.ctrlKey}(e,t),this.dragMove=function(e,t){let n=e.state.facet(Oe);return n.length?n[0](t):Z.mac?!t.altKey:!t.ctrlKey}(e,t),this.dragging=!(!function(e,t){let{main:n}=e.state.selection;if(n.empty)return!1;let i=s(e.root);if(0==i.rangeCount)return!0;let r=i.getRangeAt(0).getClientRects();for(let e=0;e<r.length;e++){let n=r[e];if(n.left<=t.clientX&&n.right>=t.clientX&&n.top<=t.clientY&&n.bottom>=t.clientY)return!0}return!1}(e,t)||1!=Nt(t))&&null,!1===this.dragging&&(t.preventDefault(),this.select(t))}move(e){if(0==e.buttons)return this.destroy();!1===this.dragging&&this.select(this.lastEvent=e)}up(e){null==this.dragging&&this.select(this.lastEvent),this.dragging||e.preventDefault(),this.destroy()}destroy(){let e=this.view.contentDOM.ownerDocument;e.removeEventListener("mousemove",this.move),e.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=null}select(e){let t=this.style.get(e,this.extend,this.multiple);!this.mustSelect&&t.eq(this.view.state.selection)&&t.main.assoc==this.view.state.selection.main.assoc||this.view.dispatch({selection:t,userEvent:"select.pointer",scrollIntoView:!0}),this.mustSelect=!1}update(e){e.docChanged&&this.dragging&&(this.dragging=this.dragging.map(e.changes)),this.style.update(e)&&setTimeout((()=>this.select(this.lastEvent)),20)}}function Qt(e,t){if(!t.bubbles)return!0;if(t.defaultPrevented)return!1;for(let n,i=t.target;i!=e.contentDOM;i=i.parentNode)if(!i||11==i.nodeType||(n=T.get(i))&&n.ignoreEvent(t))return!1;return!0}const Tt=Object.create(null),$t=Z.ie&&Z.ie_version<15||Z.ios&&Z.webkit_version<604;function Pt(e,t){let n,{state:r}=e,o=1,s=r.toText(t),a=s.lines==r.selection.ranges.length;if(null!=jt&&r.selection.ranges.every((e=>e.empty))&&jt==s.toString()){let e=-1;n=r.changeByRange((n=>{let l=r.doc.lineAt(n.from);if(l.from==e)return{range:n};e=l.from;let c=r.toText((a?s.line(o++).text:t)+r.lineBreak);return{changes:{from:l.from,insert:c},range:i.EditorSelection.cursor(n.from+c.length)}}))}else n=a?r.changeByRange((e=>{let t=s.line(o++);return{changes:{from:e.from,to:e.to,insert:t.text},range:i.EditorSelection.cursor(e.from+t.length)}})):r.replaceSelection(s);e.dispatch(n,{userEvent:"input.paste",scrollIntoView:!0})}Tt.keydown=(e,t)=>{e.inputState.setSelectionOrigin("select"),27==t.keyCode?e.inputState.lastEscPress=Date.now():xt.indexOf(t.keyCode)<0&&(e.inputState.lastEscPress=0)};let Ct=0;function Rt(e,t,n,r){if(1==r)return i.EditorSelection.cursor(t,n);if(2==r)return function(e,t,n=1){let r=e.charCategorizer(t),o=e.doc.lineAt(t),s=t-o.from;if(0==o.length)return i.EditorSelection.cursor(t);0==s?n=1:s==o.length&&(n=-1);let a=s,l=s;n<0?a=i.findClusterBreak(o.text,s,!1):l=i.findClusterBreak(o.text,s);let c=r(o.text.slice(a,l));for(;a>0;){let e=i.findClusterBreak(o.text,a,!1);if(r(o.text.slice(e,a))!=c)break;a=e}for(;l<o.length;){let e=i.findClusterBreak(o.text,l);if(r(o.text.slice(l,e))!=c)break;l=e}return i.EditorSelection.range(a+o.from,l+o.from)}(e.state,t,n);{let n=he.find(e.docView,t),r=e.state.doc.lineAt(n?n.posAtEnd:t),o=n?n.posAtStart:r.from,s=n?n.posAtEnd:r.to;return s<e.state.doc.length&&s==r.to&&s++,i.EditorSelection.range(o,s)}}Tt.touchstart=(e,t)=>{Ct=Date.now(),e.inputState.setSelectionOrigin("select.pointer")},Tt.touchmove=e=>{e.inputState.setSelectionOrigin("select.pointer")},Tt.mousedown=(e,t)=>{if(e.observer.flush(),Ct>Date.now()-2e3&&1==Nt(t))return;let n=null;for(let i of e.state.facet(ve))if(n=i(e,t),n)break;if(n||0!=t.button||(n=function(e,t){let n=Mt(e,t),r=Nt(t),o=e.state.selection,s=n,a=t;return{update(e){e.docChanged&&(n&&(n.pos=e.changes.mapPos(n.pos)),o=o.map(e.changes),a=null)},get(t,l,c){let u;if(a&&t.clientX==a.clientX&&t.clientY==a.clientY?u=s:(u=s=Mt(e,t),a=t),!u||!n)return o;let h=Rt(e,u.pos,u.bias,r);if(n.pos!=u.pos&&!l){let t=Rt(e,n.pos,n.bias,r),o=Math.min(t.from,h.from),s=Math.max(t.to,h.to);h=o<h.from?i.EditorSelection.range(o,s):i.EditorSelection.range(s,o)}return l?o.replaceRange(o.main.extend(h.from,h.to)):c?o.addRange(h):i.EditorSelection.create([h])}}}(e,t)),n){let i=e.root.activeElement!=e.contentDOM;i&&e.observer.ignore((()=>b(e.contentDOM))),e.inputState.startMouseSelection(new kt(e,t,n,i))}};let Et=(e,t)=>e>=t.top&&e<=t.bottom,At=(e,t,n)=>Et(t,n)&&e>=n.left&&e<=n.right;function Wt(e,t,n,i){let r=he.find(e.docView,t);if(!r)return 1;let o=t-r.posAtStart;if(0==o)return 1;if(o==r.length)return-1;let s=r.coordsAt(o,-1);if(s&&At(n,i,s))return-1;let a=r.coordsAt(o,1);return a&&At(n,i,a)?1:s&&Et(i,s)?-1:1}function Mt(e,t){let n=e.posAtCoords({x:t.clientX,y:t.clientY},!1);return{pos:n,bias:Wt(e,n,t.clientX,t.clientY)}}const It=Z.ie&&Z.ie_version<=11;let _t=null,Dt=0,zt=0;function Nt(e){if(!It)return e.detail;let t=_t,n=zt;return _t=e,zt=Date.now(),Dt=!t||n>Date.now()-400&&Math.abs(t.clientX-e.clientX)<2&&Math.abs(t.clientY-e.clientY)<2?(Dt+1)%3:1}function Lt(e,t,n,i){if(!n)return;let r=e.posAtCoords({x:t.clientX,y:t.clientY},!1);t.preventDefault();let{mouseSelection:o}=e.inputState,s=i&&o&&o.dragging&&o.dragMove?{from:o.dragging.from,to:o.dragging.to}:null,a={from:r,insert:n},l=e.state.changes(s?[s,a]:a);e.focus(),e.dispatch({changes:l,selection:{anchor:l.mapPos(r,-1),head:l.mapPos(r,1)},userEvent:s?"move.drop":"input.drop"})}Tt.dragstart=(e,t)=>{let{selection:{main:n}}=e.state,{mouseSelection:i}=e.inputState;i&&(i.dragging=n),t.dataTransfer&&(t.dataTransfer.setData("Text",e.state.sliceDoc(n.from,n.to)),t.dataTransfer.effectAllowed="copyMove")},Tt.drop=(e,t)=>{if(!t.dataTransfer)return;if(e.state.readOnly)return t.preventDefault();let n=t.dataTransfer.files;if(n&&n.length){t.preventDefault();let i=Array(n.length),r=0,o=()=>{++r==n.length&&Lt(e,t,i.filter((e=>null!=e)).join(e.state.lineBreak),!1)};for(let e=0;e<n.length;e++){let t=new FileReader;t.onerror=o,t.onload=()=>{/[\x00-\x08\x0e-\x1f]{2}/.test(t.result)||(i[e]=t.result),o()},t.readAsText(n[e])}}else Lt(e,t,t.dataTransfer.getData("Text"),!0)},Tt.paste=(e,t)=>{if(e.state.readOnly)return t.preventDefault();e.observer.flush();let n=$t?null:t.clipboardData;n?(Pt(e,n.getData("text/plain")),t.preventDefault()):function(e){let t=e.dom.parentNode;if(!t)return;let n=t.appendChild(document.createElement("textarea"));n.style.cssText="position: fixed; left: -10000px; top: 10px",n.focus(),setTimeout((()=>{e.focus(),n.remove(),Pt(e,n.value)}),50)}(e)};let jt=null;function Xt(e){setTimeout((()=>{e.hasFocus!=e.inputState.notifiedFocused&&e.update([])}),10)}function Zt(e,t){if(e.docView.compositionDeco.size){e.inputState.rapidCompositionStart=t;try{e.update([])}finally{e.inputState.rapidCompositionStart=!1}}}Tt.copy=Tt.cut=(e,t)=>{let{text:n,ranges:i,linewise:r}=function(e){let t=[],n=[],i=!1;for(let i of e.selection.ranges)i.empty||(t.push(e.sliceDoc(i.from,i.to)),n.push(i));if(!t.length){let r=-1;for(let{from:i}of e.selection.ranges){let o=e.doc.lineAt(i);o.number>r&&(t.push(o.text),n.push({from:o.from,to:Math.min(e.doc.length,o.to+1)})),r=o.number}i=!0}return{text:t.join(e.lineBreak),ranges:n,linewise:i}}(e.state);if(!n&&!r)return;jt=r?n:null;let o=$t?null:t.clipboardData;o?(t.preventDefault(),o.clearData(),o.setData("text/plain",n)):function(e,t){let n=e.dom.parentNode;if(!n)return;let i=n.appendChild(document.createElement("textarea"));i.style.cssText="position: fixed; left: -10000px; top: 10px",i.value=t,i.focus(),i.selectionEnd=t.length,i.selectionStart=0,setTimeout((()=>{i.remove(),e.focus()}),50)}(e,n),"cut"!=t.type||e.state.readOnly||e.dispatch({changes:i,scrollIntoView:!0,userEvent:"delete.cut"})},Tt.focus=Xt,Tt.blur=e=>{e.observer.clearSelectionRange(),Xt(e)},Tt.compositionstart=Tt.compositionupdate=e=>{null==e.inputState.compositionFirstChange&&(e.inputState.compositionFirstChange=!0),e.inputState.composing<0&&(e.inputState.composing=0,e.docView.compositionDeco.size&&(e.observer.flush(),Zt(e,!0)))},Tt.compositionend=e=>{e.inputState.composing=-1,e.inputState.compositionEndedAt=Date.now(),e.inputState.compositionFirstChange=null,setTimeout((()=>{e.inputState.composing<0&&Zt(e,!1)}),50)},Tt.contextmenu=e=>{e.inputState.lastContextMenu=Date.now()},Tt.beforeinput=(e,t)=>{var n;let i;if(Z.chrome&&Z.android&&(i=St.find((e=>e.inputType==t.inputType)))&&(e.observer.delayAndroidKey(i.key,i.keyCode),"Backspace"==i.key||"Delete"==i.key)){let t=(null===(n=window.visualViewport)||void 0===n?void 0:n.height)||0;setTimeout((()=>{var n;((null===(n=window.visualViewport)||void 0===n?void 0:n.height)||0)>t+10&&e.hasFocus&&(e.contentDOM.blur(),e.focus())}),100)}};const Ut=["pre-wrap","normal","pre-line","break-spaces"];class Vt{constructor(){this.doc=i.Text.empty,this.lineWrapping=!1,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.lineLength=30,this.heightChanged=!1}heightForGap(e,t){let n=this.doc.lineAt(t).number-this.doc.lineAt(e).number+1;return this.lineWrapping&&(n+=Math.ceil((t-e-n*this.lineLength*.5)/this.lineLength)),this.lineHeight*n}heightForLine(e){return this.lineWrapping?(1+Math.max(0,Math.ceil((e-this.lineLength)/(this.lineLength-5))))*this.lineHeight:this.lineHeight}setDoc(e){return this.doc=e,this}mustRefreshForWrapping(e){return Ut.indexOf(e)>-1!=this.lineWrapping}mustRefreshForHeights(e){let t=!1;for(let n=0;n<e.length;n++){let i=e[n];i<0?n++:this.heightSamples[Math.floor(10*i)]||(t=!0,this.heightSamples[Math.floor(10*i)]=!0)}return t}refresh(e,t,n,i,r){let o=Ut.indexOf(e)>-1,s=Math.round(t)!=Math.round(this.lineHeight)||this.lineWrapping!=o;if(this.lineWrapping=o,this.lineHeight=t,this.charWidth=n,this.lineLength=i,s){this.heightSamples={};for(let e=0;e<r.length;e++){let t=r[e];t<0?e++:this.heightSamples[Math.floor(10*t)]=!0}}return s}}class Bt{constructor(e,t){this.from=e,this.heights=t,this.index=0}get more(){return this.index<this.heights.length}}class Ft{constructor(e,t,n,i,r){this.from=e,this.length=t,this.top=n,this.height=i,this.type=r}get to(){return this.from+this.length}get bottom(){return this.top+this.height}join(e){let t=(Array.isArray(this.type)?this.type:[this]).concat(Array.isArray(e.type)?e.type:[e]);return new Ft(this.from,this.length+e.length,this.top,this.height+e.height,t)}}var Gt;!function(e){e[e.ByPos=0]="ByPos",e[e.ByHeight=1]="ByHeight",e[e.ByPosNoHeight=2]="ByPosNoHeight"}(Gt||(Gt={}));const Yt=.001;class qt{constructor(e,t,n=2){this.length=e,this.height=t,this.flags=n}get outdated(){return(2&this.flags)>0}set outdated(e){this.flags=(e?2:0)|-3&this.flags}setHeight(e,t){this.height!=t&&(Math.abs(this.height-t)>Yt&&(e.heightChanged=!0),this.height=t)}replace(e,t,n){return qt.of(n)}decomposeLeft(e,t){t.push(this)}decomposeRight(e,t){t.push(this)}applyChanges(e,t,n,i){let r=this;for(let o=i.length-1;o>=0;o--){let{fromA:s,toA:a,fromB:l,toB:c}=i[o],u=r.lineAt(s,Gt.ByPosNoHeight,t,0,0),h=u.to>=a?u:r.lineAt(a,Gt.ByPosNoHeight,t,0,0);for(c+=h.to-a,a=h.to;o>0&&u.from<=i[o-1].toA;)s=i[o-1].fromA,l=i[o-1].fromB,o--,s<u.from&&(u=r.lineAt(s,Gt.ByPosNoHeight,t,0,0));l+=u.from-s,s=u.from;let f=nn.build(n,e,l,c);r=r.replace(s,a,f)}return r.updateHeight(n,0)}static empty(){return new Jt(0,0)}static of(e){if(1==e.length)return e[0];let t=0,n=e.length,i=0,r=0;for(;;)if(t==n)if(i>2*r){let r=e[t-1];r.break?e.splice(--t,1,r.left,null,r.right):e.splice(--t,1,r.left,r.right),n+=1+r.break,i-=r.size}else{if(!(r>2*i))break;{let t=e[n];t.break?e.splice(n,1,t.left,null,t.right):e.splice(n,1,t.left,t.right),n+=2+t.break,r-=t.size}}else if(i<r){let n=e[t++];n&&(i+=n.size)}else{let t=e[--n];t&&(r+=t.size)}let o=0;return null==e[t-1]?(o=1,t--):null==e[t]&&(o=1,n++),new en(qt.of(e.slice(0,t)),o,qt.of(e.slice(n)))}}qt.prototype.size=1;class Ht extends qt{constructor(e,t,n){super(e,t),this.type=n}blockAt(e,t,n,i){return new Ft(i,this.length,n,this.height,this.type)}lineAt(e,t,n,i,r){return this.blockAt(0,n,i,r)}forEachLine(e,t,n,i,r,o){e<=r+this.length&&t>=r&&o(this.blockAt(0,n,i,r))}updateHeight(e,t=0,n=!1,i){return i&&i.from<=t&&i.more&&this.setHeight(e,i.heights[i.index++]),this.outdated=!1,this}toString(){return`block(${this.length})`}}class Jt extends Ht{constructor(e,n){super(e,n,t.BlockType.Text),this.collapsed=0,this.widgetHeight=0}replace(e,t,n){let i=n[0];return 1==n.length&&(i instanceof Jt||i instanceof Kt&&4&i.flags)&&Math.abs(this.length-i.length)<10?(i instanceof Kt?i=new Jt(i.length,this.height):i.height=this.height,this.outdated||(i.outdated=!1),i):qt.of(n)}updateHeight(e,t=0,n=!1,i){return i&&i.from<=t&&i.more?this.setHeight(e,i.heights[i.index++]):(n||this.outdated)&&this.setHeight(e,Math.max(this.widgetHeight,e.heightForLine(this.length-this.collapsed))),this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class Kt extends qt{constructor(e){super(e,0)}lines(e,t){let n=e.lineAt(t).number,i=e.lineAt(t+this.length).number;return{firstLine:n,lastLine:i,lineHeight:this.height/(i-n+1)}}blockAt(e,n,i,r){let{firstLine:o,lastLine:s,lineHeight:a}=this.lines(n,r),l=Math.max(0,Math.min(s-o,Math.floor((e-i)/a))),{from:c,length:u}=n.line(o+l);return new Ft(c,u,i+a*l,a,t.BlockType.Text)}lineAt(e,n,i,r,o){if(n==Gt.ByHeight)return this.blockAt(e,i,r,o);if(n==Gt.ByPosNoHeight){let{from:n,to:r}=i.lineAt(e);return new Ft(n,r-n,0,0,t.BlockType.Text)}let{firstLine:s,lineHeight:a}=this.lines(i,o),{from:l,length:c,number:u}=i.lineAt(e);return new Ft(l,c,r+a*(u-s),a,t.BlockType.Text)}forEachLine(e,n,i,r,o,s){let{firstLine:a,lineHeight:l}=this.lines(i,o);for(let c=Math.max(e,o),u=Math.min(o+this.length,n);c<=u;){let n=i.lineAt(c);c==e&&(r+=l*(n.number-a)),s(new Ft(n.from,n.length,r,l,t.BlockType.Text)),r+=l,c=n.to+1}}replace(e,t,n){let i=this.length-t;if(i>0){let e=n[n.length-1];e instanceof Kt?n[n.length-1]=new Kt(e.length+i):n.push(null,new Kt(i-1))}if(e>0){let t=n[0];t instanceof Kt?n[0]=new Kt(e+t.length):n.unshift(new Kt(e-1),null)}return qt.of(n)}decomposeLeft(e,t){t.push(new Kt(e-1),null)}decomposeRight(e,t){t.push(null,new Kt(this.length-e-1))}updateHeight(e,t=0,n=!1,i){let r=t+this.length;if(i&&i.from<=t+this.length&&i.more){let n=[],o=Math.max(t,i.from),s=-1,a=e.heightChanged;for(i.from>t&&n.push(new Kt(i.from-t-1).updateHeight(e,t));o<=r&&i.more;){let t=e.doc.lineAt(o).length;n.length&&n.push(null);let r=i.heights[i.index++];-1==s?s=r:Math.abs(r-s)>=Yt&&(s=-2);let a=new Jt(t,r);a.outdated=!1,n.push(a),o+=t+1}o<=r&&n.push(null,new Kt(r-o).updateHeight(e,o));let l=qt.of(n);return e.heightChanged=a||s<0||Math.abs(l.height-this.height)>=Yt||Math.abs(s-this.lines(e.doc,t).lineHeight)>=Yt,l}return(n||this.outdated)&&(this.setHeight(e,e.heightForGap(t,t+this.length)),this.outdated=!1),this}toString(){return`gap(${this.length})`}}class en extends qt{constructor(e,t,n){super(e.length+t+n.length,e.height+n.height,t|(e.outdated||n.outdated?2:0)),this.left=e,this.right=n,this.size=e.size+n.size}get break(){return 1&this.flags}blockAt(e,t,n,i){let r=n+this.left.height;return e<r?this.left.blockAt(e,t,n,i):this.right.blockAt(e,t,r,i+this.left.length+this.break)}lineAt(e,t,n,i,r){let o=i+this.left.height,s=r+this.left.length+this.break,a=t==Gt.ByHeight?e<o:e<s,l=a?this.left.lineAt(e,t,n,i,r):this.right.lineAt(e,t,n,o,s);if(this.break||(a?l.to<s:l.from>s))return l;let c=t==Gt.ByPosNoHeight?Gt.ByPosNoHeight:Gt.ByPos;return a?l.join(this.right.lineAt(s,c,n,o,s)):this.left.lineAt(s,c,n,i,r).join(l)}forEachLine(e,t,n,i,r,o){let s=i+this.left.height,a=r+this.left.length+this.break;if(this.break)e<a&&this.left.forEachLine(e,t,n,i,r,o),t>=a&&this.right.forEachLine(e,t,n,s,a,o);else{let l=this.lineAt(a,Gt.ByPos,n,i,r);e<l.from&&this.left.forEachLine(e,l.from-1,n,i,r,o),l.to>=e&&l.from<=t&&o(l),t>l.to&&this.right.forEachLine(l.to+1,t,n,s,a,o)}}replace(e,t,n){let i=this.left.length+this.break;if(t<i)return this.balanced(this.left.replace(e,t,n),this.right);if(e>this.left.length)return this.balanced(this.left,this.right.replace(e-i,t-i,n));let r=[];e>0&&this.decomposeLeft(e,r);let o=r.length;for(let e of n)r.push(e);if(e>0&&tn(r,o-1),t<this.length){let e=r.length;this.decomposeRight(t,r),tn(r,e)}return qt.of(r)}decomposeLeft(e,t){let n=this.left.length;if(e<=n)return this.left.decomposeLeft(e,t);t.push(this.left),this.break&&(n++,e>=n&&t.push(null)),e>n&&this.right.decomposeLeft(e-n,t)}decomposeRight(e,t){let n=this.left.length,i=n+this.break;if(e>=i)return this.right.decomposeRight(e-i,t);e<n&&this.left.decomposeRight(e,t),this.break&&e<i&&t.push(null),t.push(this.right)}balanced(e,t){return e.size>2*t.size||t.size>2*e.size?qt.of(this.break?[e,null,t]:[e,t]):(this.left=e,this.right=t,this.height=e.height+t.height,this.outdated=e.outdated||t.outdated,this.size=e.size+t.size,this.length=e.length+this.break+t.length,this)}updateHeight(e,t=0,n=!1,i){let{left:r,right:o}=this,s=t+r.length+this.break,a=null;return i&&i.from<=t+r.length&&i.more?a=r=r.updateHeight(e,t,n,i):r.updateHeight(e,t,n),i&&i.from<=s+o.length&&i.more?a=o=o.updateHeight(e,s,n,i):o.updateHeight(e,s,n),a?this.balanced(r,o):(this.height=this.left.height+this.right.height,this.outdated=!1,this)}toString(){return this.left+(this.break?" ":"-")+this.right}}function tn(e,t){let n,i;null==e[t]&&(n=e[t-1])instanceof Kt&&(i=e[t+1])instanceof Kt&&e.splice(t-1,3,new Kt(n.length+1+i.length))}class nn{constructor(e,t){this.pos=e,this.oracle=t,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=e}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(e,t){if(this.lineStart>-1){let e=Math.min(t,this.lineEnd),n=this.nodes[this.nodes.length-1];n instanceof Jt?n.length+=e-this.pos:(e>this.pos||!this.isCovered)&&this.nodes.push(new Jt(e-this.pos,-1)),this.writtenTo=e,t>e&&(this.nodes.push(null),this.writtenTo++,this.lineStart=-1)}this.pos=t}point(e,t,n){if(e<t||n.heightRelevant){let i=n.widget?n.widget.estimatedHeight:0;i<0&&(i=this.oracle.lineHeight);let r=t-e;n.block?this.addBlock(new Ht(r,i,n.type)):(r||i>=5)&&this.addLineDeco(i,r)}else t>e&&this.span(e,t);this.lineEnd>-1&&this.lineEnd<this.pos&&(this.lineEnd=this.oracle.doc.lineAt(this.pos).to)}enterLine(){if(this.lineStart>-1)return;let{from:e,to:t}=this.oracle.doc.lineAt(this.pos);this.lineStart=e,this.lineEnd=t,this.writtenTo<e&&((this.writtenTo<e-1||null==this.nodes[this.nodes.length-1])&&this.nodes.push(this.blankContent(this.writtenTo,e-1)),this.nodes.push(null)),this.pos>e&&this.nodes.push(new Jt(this.pos-e,-1)),this.writtenTo=this.pos}blankContent(e,t){let n=new Kt(t-e);return this.oracle.doc.lineAt(e).to==t&&(n.flags|=4),n}ensureLine(){this.enterLine();let e=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(e instanceof Jt)return e;let t=new Jt(0,-1);return this.nodes.push(t),t}addBlock(e){this.enterLine(),e.type!=t.BlockType.WidgetAfter||this.isCovered||this.ensureLine(),this.nodes.push(e),this.writtenTo=this.pos=this.pos+e.length,e.type!=t.BlockType.WidgetBefore&&(this.covering=e)}addLineDeco(e,t){let n=this.ensureLine();n.length+=t,n.collapsed+=t,n.widgetHeight=Math.max(n.widgetHeight,e),this.writtenTo=this.pos=this.pos+t}finish(e){let t=0==this.nodes.length?null:this.nodes[this.nodes.length-1];!(this.lineStart>-1)||t instanceof Jt||this.isCovered?(this.writtenTo<this.pos||null==t)&&this.nodes.push(this.blankContent(this.writtenTo,this.pos)):this.nodes.push(new Jt(0,-1));let n=e;for(let e of this.nodes)e instanceof Jt&&e.updateHeight(this.oracle,n),n+=e?e.length:1;return this.nodes}static build(e,t,n,r){let o=new nn(n,e);return i.RangeSet.spans(t,n,r,o,0),o.finish(n)}}class rn{constructor(){this.changes=[]}compareRange(){}comparePoint(e,t,n,i){(e<t||n&&n.heightRelevant||i&&i.heightRelevant)&&ue(e,t,this.changes,5)}}function on(e,t){let n=e.getBoundingClientRect(),i=Math.max(0,n.left),r=Math.min(innerWidth,n.right),o=Math.max(0,n.top),s=Math.min(innerHeight,n.bottom),a=e.ownerDocument.body;for(let t=e.parentNode;t&&t!=a;)if(1==t.nodeType){let e=t,n=window.getComputedStyle(e);if((e.scrollHeight>e.clientHeight||e.scrollWidth>e.clientWidth)&&"visible"!=n.overflow){let t=e.getBoundingClientRect();i=Math.max(i,t.left),r=Math.min(r,t.right),o=Math.max(o,t.top),s=Math.min(s,t.bottom)}t="absolute"==n.position||"fixed"==n.position?e.offsetParent:e.parentNode}else{if(11!=t.nodeType)break;t=t.host}return{left:i-n.left,right:Math.max(i,r)-n.left,top:o-(n.top+t),bottom:Math.max(o,s)-(n.top+t)}}function sn(e,t){let n=e.getBoundingClientRect();return{left:0,right:n.right-n.left,top:t,bottom:n.bottom-(n.top+t)}}class an{constructor(e,t,n){this.from=e,this.to=t,this.size=n}static same(e,t){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++){let i=e[n],r=t[n];if(i.from!=r.from||i.to!=r.to||i.size!=r.size)return!1}return!0}draw(e){return oe.replace({widget:new ln(this.size,e)}).range(this.from,this.to)}}class ln extends re{constructor(e,t){super(),this.size=e,this.vertical=t}eq(e){return e.size==this.size&&e.vertical==this.vertical}toDOM(){let e=document.createElement("div");return this.vertical?e.style.height=this.size+"px":(e.style.width=this.size+"px",e.style.height="2px",e.style.display="inline-block"),e}get estimatedHeight(){return this.vertical?this.size:-1}}class cn{constructor(e){this.state=e,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.heightOracle=new Vt,this.scaler=gn,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=t.Direction.RTL,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1,this.stateDeco=e.facet(We).filter((e=>"function"!=typeof e)),this.heightMap=qt.empty().applyChanges(this.stateDeco,i.Text.empty,this.heightOracle.setDoc(e.doc),[new De(0,0,0,e.doc.length)]),this.viewport=this.getViewport(0,null),this.updateViewportLines(),this.updateForViewport(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=oe.set(this.lineGaps.map((e=>e.draw(!1)))),this.computeVisibleRanges()}updateForViewport(){let e=[this.viewport],{main:t}=this.state.selection;for(let n=0;n<=1;n++){let i=n?t.head:t.anchor;if(!e.some((({from:e,to:t})=>i>=e&&i<=t))){let{from:t,to:n}=this.lineBlockAt(i);e.push(new un(t,n))}}this.viewports=e.sort(((e,t)=>e.from-t.from)),this.scaler=this.heightMap.height<=7e6?gn:new On(this.heightOracle.doc,this.heightMap,this.viewports)}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.state.doc,0,0,(e=>{this.viewportLines.push(1==this.scaler.scale?e:vn(e,this.scaler))}))}update(e,t=null){this.state=e.state;let n=this.stateDeco;this.stateDeco=this.state.facet(We).filter((e=>"function"!=typeof e));let r=e.changedRanges,o=De.extendWithRanges(r,function(e,t,n){let r=new rn;return i.RangeSet.compare(e,t,n,r,0),r.changes}(n,this.stateDeco,e?e.changes:i.ChangeSet.empty(this.state.doc.length))),s=this.heightMap.height;this.heightMap=this.heightMap.applyChanges(this.stateDeco,e.startState.doc,this.heightOracle.setDoc(this.state.doc),o),this.heightMap.height!=s&&(e.flags|=2);let a=o.length?this.mapViewport(this.viewport,e.changes):this.viewport;(t&&(t.range.head<a.from||t.range.head>a.to)||!this.viewportIsAppropriate(a))&&(a=this.getViewport(0,t));let l=!e.changes.empty||2&e.flags||a.from!=this.viewport.from||a.to!=this.viewport.to;this.viewport=a,this.updateForViewport(),l&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,e.changes))),e.flags|=this.computeVisibleRanges(),t&&(this.scrollTarget=t),!this.mustEnforceCursorAssoc&&e.selectionSet&&e.view.lineWrapping&&e.state.selection.main.empty&&e.state.selection.main.assoc&&(this.mustEnforceCursorAssoc=!0)}measure(e){let n=e.contentDOM,i=window.getComputedStyle(n),r=this.heightOracle,o=i.whiteSpace;this.defaultTextDirection="rtl"==i.direction?t.Direction.RTL:t.Direction.LTR;let s=this.heightOracle.mustRefreshForWrapping(o),a=s||this.mustMeasureContent||this.contentDOMHeight!=n.clientHeight;this.contentDOMHeight=n.clientHeight,this.mustMeasureContent=!1;let l=0,c=0,u=parseInt(i.paddingTop)||0,h=parseInt(i.paddingBottom)||0;this.paddingTop==u&&this.paddingBottom==h||(this.paddingTop=u,this.paddingBottom=h,l|=10),this.editorWidth!=e.scrollDOM.clientWidth&&(r.lineWrapping&&(a=!0),this.editorWidth=e.scrollDOM.clientWidth,l|=8);let f=(this.printing?sn:on)(n,this.paddingTop),d=f.top-this.pixelViewport.top,p=f.bottom-this.pixelViewport.bottom;this.pixelViewport=f;let m=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(m!=this.inView&&(this.inView=m,m&&(a=!0)),!this.inView)return 0;let g=n.clientWidth;if(this.contentDOMWidth==g&&this.editorHeight==e.scrollDOM.clientHeight||(this.contentDOMWidth=g,this.editorHeight=e.scrollDOM.clientHeight,l|=8),a){let t=e.docView.measureVisibleLineHeights(this.viewport);if(r.mustRefreshForHeights(t)&&(s=!0),s||r.lineWrapping&&Math.abs(g-this.contentDOMWidth)>r.charWidth){let{lineHeight:n,charWidth:i}=e.docView.measureTextSize();s=r.refresh(o,n,i,g/i,t),s&&(e.docView.minWidth=0,l|=8)}d>0&&p>0?c=Math.max(d,p):d<0&&p<0&&(c=Math.min(d,p)),r.heightChanged=!1;for(let n of this.viewports){let i=n.from==this.viewport.from?t:e.docView.measureVisibleLineHeights(n);this.heightMap=this.heightMap.updateHeight(r,0,s,new Bt(n.from,i))}r.heightChanged&&(l|=2)}let O=!this.viewportIsAppropriate(this.viewport,c)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);return O&&(this.viewport=this.getViewport(c,this.scrollTarget)),this.updateForViewport(),(2&l||O)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(s?[]:this.lineGaps)),l|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc&&(this.mustEnforceCursorAssoc=!1,e.docView.enforceCursorAssoc()),l}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(e,t){let n=.5-Math.max(-.5,Math.min(.5,e/1e3/2)),i=this.heightMap,r=this.state.doc,{visibleTop:o,visibleBottom:s}=this,a=new un(i.lineAt(o-1e3*n,Gt.ByHeight,r,0,0).from,i.lineAt(s+1e3*(1-n),Gt.ByHeight,r,0,0).to);if(t){let{head:e}=t.range;if(e<a.from||e>a.to){let n,o=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),s=i.lineAt(e,Gt.ByPos,r,0,0);n="center"==t.y?(s.top+s.bottom)/2-o/2:"start"==t.y||"nearest"==t.y&&e<a.from?s.top:s.bottom-o,a=new un(i.lineAt(n-500,Gt.ByHeight,r,0,0).from,i.lineAt(n+o+500,Gt.ByHeight,r,0,0).to)}}return a}mapViewport(e,t){let n=t.mapPos(e.from,-1),i=t.mapPos(e.to,1);return new un(this.heightMap.lineAt(n,Gt.ByPos,this.state.doc,0,0).from,this.heightMap.lineAt(i,Gt.ByPos,this.state.doc,0,0).to)}viewportIsAppropriate({from:e,to:t},n=0){if(!this.inView)return!0;let{top:i}=this.heightMap.lineAt(e,Gt.ByPos,this.state.doc,0,0),{bottom:r}=this.heightMap.lineAt(t,Gt.ByPos,this.state.doc,0,0),{visibleTop:o,visibleBottom:s}=this;return(0==e||i<=o-Math.max(10,Math.min(-n,250)))&&(t==this.state.doc.length||r>=s+Math.max(10,Math.min(n,250)))&&i>o-2e3&&r<s+2e3}mapLineGaps(e,t){if(!e.length||t.empty)return e;let n=[];for(let i of e)t.touchesRange(i.from,i.to)||n.push(new an(t.mapPos(i.from),t.mapPos(i.to),i.size));return n}ensureLineGaps(e){let n=[];if(this.defaultTextDirection!=t.Direction.LTR)return n;for(let t of this.viewportLines){if(t.length<4e3)continue;let i,r,o=hn(t.from,t.to,this.stateDeco);if(o.total<4e3)continue;if(this.heightOracle.lineWrapping){let e=2e3/this.heightOracle.lineLength*this.heightOracle.lineHeight;i=fn(o,(this.visibleTop-t.top-e)/t.height),r=fn(o,(this.visibleBottom-t.top+e)/t.height)}else{let e=o.total*this.heightOracle.charWidth,t=2e3*this.heightOracle.charWidth;i=fn(o,(this.pixelViewport.left-t)/e),r=fn(o,(this.pixelViewport.right+t)/e)}let s=[];i>t.from&&s.push({from:t.from,to:i}),r<t.to&&s.push({from:r,to:t.to});let a=this.state.selection.main;a.from>=t.from&&a.from<=t.to&&pn(s,a.from-10,a.from+10),!a.empty&&a.to>=t.from&&a.to<=t.to&&pn(s,a.to-10,a.to+10);for(let{from:i,to:r}of s)r-i>1e3&&n.push(mn(e,(e=>e.from>=t.from&&e.to<=t.to&&Math.abs(e.from-i)<1e3&&Math.abs(e.to-r)<1e3))||new an(i,r,this.gapSize(t,i,r,o)))}return n}gapSize(e,t,n,i){let r=dn(i,n)-dn(i,t);return this.heightOracle.lineWrapping?e.height*r:i.total*this.heightOracle.charWidth*r}updateLineGaps(e){an.same(e,this.lineGaps)||(this.lineGaps=e,this.lineGapDeco=oe.set(e.map((e=>e.draw(this.heightOracle.lineWrapping)))))}computeVisibleRanges(){let e=this.stateDeco;this.lineGaps.length&&(e=e.concat(this.lineGapDeco));let t=[];i.RangeSet.spans(e,this.viewport.from,this.viewport.to,{span(e,n){t.push({from:e,to:n})},point(){}},20);let n=t.length!=this.visibleRanges.length||this.visibleRanges.some(((e,n)=>e.from!=t[n].from||e.to!=t[n].to));return this.visibleRanges=t,n?4:0}lineBlockAt(e){return e>=this.viewport.from&&e<=this.viewport.to&&this.viewportLines.find((t=>t.from<=e&&t.to>=e))||vn(this.heightMap.lineAt(e,Gt.ByPos,this.state.doc,0,0),this.scaler)}lineBlockAtHeight(e){return vn(this.heightMap.lineAt(this.scaler.fromDOM(e),Gt.ByHeight,this.state.doc,0,0),this.scaler)}elementAtHeight(e){return vn(this.heightMap.blockAt(this.scaler.fromDOM(e),this.state.doc,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class un{constructor(e,t){this.from=e,this.to=t}}function hn(e,t,n){let r=[],o=e,s=0;return i.RangeSet.spans(n,e,t,{span(){},point(e,t){e>o&&(r.push({from:o,to:e}),s+=e-o),o=t}},20),o<t&&(r.push({from:o,to:t}),s+=t-o),{total:s,ranges:r}}function fn({total:e,ranges:t},n){if(n<=0)return t[0].from;if(n>=1)return t[t.length-1].to;let i=Math.floor(e*n);for(let e=0;;e++){let{from:n,to:r}=t[e],o=r-n;if(i<=o)return n+i;i-=o}}function dn(e,t){let n=0;for(let{from:i,to:r}of e.ranges){if(t<=r){n+=t-i;break}n+=r-i}return n/e.total}function pn(e,t,n){for(let i=0;i<e.length;i++){let r=e[i];if(r.from<n&&r.to>t){let o=[];r.from<t&&o.push({from:r.from,to:t}),r.to>n&&o.push({from:n,to:r.to}),e.splice(i,1,...o),i+=o.length-1}}}function mn(e,t){for(let n of e)if(t(n))return n}const gn={toDOM:e=>e,fromDOM:e=>e,scale:1};class On{constructor(e,t,n){let i=0,r=0,o=0;this.viewports=n.map((({from:n,to:r})=>{let o=t.lineAt(n,Gt.ByPos,e,0,0).top,s=t.lineAt(r,Gt.ByPos,e,0,0).bottom;return i+=s-o,{from:n,to:r,top:o,bottom:s,domTop:0,domBottom:0}})),this.scale=(7e6-i)/(t.height-i);for(let e of this.viewports)e.domTop=o+(e.top-r)*this.scale,o=e.domBottom=e.domTop+(e.bottom-e.top),r=e.bottom}toDOM(e){for(let t=0,n=0,i=0;;t++){let r=t<this.viewports.length?this.viewports[t]:null;if(!r||e<r.top)return i+(e-n)*this.scale;if(e<=r.bottom)return r.domTop+(e-r.top);n=r.bottom,i=r.domBottom}}fromDOM(e){for(let t=0,n=0,i=0;;t++){let r=t<this.viewports.length?this.viewports[t]:null;if(!r||e<r.domTop)return n+(e-i)/this.scale;if(e<=r.domBottom)return r.top+(e-r.domTop);n=r.bottom,i=r.domBottom}}}function vn(e,t){if(1==t.scale)return e;let n=t.toDOM(e.top),i=t.toDOM(e.bottom);return new Ft(e.from,e.length,n,i-n,Array.isArray(e.type)?e.type.map((e=>vn(e,t))):e.type)}const yn=i.Facet.define({combine:e=>e.join(" ")}),bn=i.Facet.define({combine:e=>e.indexOf(!0)>-1}),wn=r.StyleModule.newName(),Sn=r.StyleModule.newName(),xn=r.StyleModule.newName(),kn={"&light":"."+Sn,"&dark":"."+xn};function Qn(e,t,n){return new r.StyleModule(t,{finish:t=>/&/.test(t)?t.replace(/&\w*/,(t=>{if("&"==t)return e;if(!n||!n[t])throw new RangeError(`Unsupported selector: ${t}`);return n[t]})):e+" "+t})}const Tn=Qn("."+wn,{"&.cm-editor":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0},".cm-content":{margin:0,flexGrow:2,minHeight:"100%",display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere"},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 4px"},".cm-selectionLayer":{zIndex:-1,contain:"size style"},".cm-selectionBackground":{position:"absolute"},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{zIndex:100,contain:"size style",pointerEvents:"none"},"&.cm-focused .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{visibility:"hidden"},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{visibility:"hidden"},"100%":{}},".cm-cursor, .cm-dropCursor":{position:"absolute",borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#444"},"&.cm-focused .cm-cursor":{display:"block"},"&light .cm-activeLine":{backgroundColor:"#f3f9ff"},"&dark .cm-activeLine":{backgroundColor:"#223039"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{display:"flex",height:"100%",boxSizing:"border-box",left:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},kn),$n={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},Pn=Z.ie&&Z.ie_version<=11;class Cn{constructor(e,t,n){this.view=e,this.onChange=t,this.onScrollChanged=n,this.active=!1,this.selectionRange=new O,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.scrollTargets=[],this.intersection=null,this.resize=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.parentCheck=-1,this.dom=e.contentDOM,this.observer=new MutationObserver((t=>{for(let e of t)this.queue.push(e);(Z.ie&&Z.ie_version<=11||Z.ios&&e.composing)&&t.some((e=>"childList"==e.type&&e.removedNodes.length||"characterData"==e.type&&e.oldValue.length>e.target.nodeValue.length))?this.flushSoon():this.flush()})),Pn&&(this.onCharData=e=>{this.queue.push({target:e.target,type:"characterData",oldValue:e.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),window.addEventListener("resize",this.onResize=this.onResize.bind(this)),"function"==typeof ResizeObserver&&(this.resize=new ResizeObserver((()=>{this.view.docView.lastUpdate<Date.now()-75&&this.onResize()})),this.resize.observe(e.scrollDOM)),window.addEventListener("beforeprint",this.onPrint=this.onPrint.bind(this)),this.start(),window.addEventListener("scroll",this.onScroll=this.onScroll.bind(this)),"function"==typeof IntersectionObserver&&(this.intersection=new IntersectionObserver((e=>{this.parentCheck<0&&(this.parentCheck=setTimeout(this.listenForScroll.bind(this),1e3)),e.length>0&&e[e.length-1].intersectionRatio>0!=this.intersecting&&(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView&&this.onScrollChanged(document.createEvent("Event")))}),{}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((e=>{e.length>0&&e[e.length-1].intersectionRatio>0&&this.onScrollChanged(document.createEvent("Event"))}),{})),this.listenForScroll(),this.readSelectionRange(),this.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)}onScroll(e){this.intersecting&&this.flush(!1),this.onScrollChanged(e)}onResize(){this.resizeTimeout<0&&(this.resizeTimeout=setTimeout((()=>{this.resizeTimeout=-1,this.view.requestMeasure()}),50))}onPrint(){this.view.viewState.printing=!0,this.view.measure(),setTimeout((()=>{this.view.viewState.printing=!1,this.view.requestMeasure()}),500)}updateGaps(e){if(this.gapIntersection&&(e.length!=this.gaps.length||this.gaps.some(((t,n)=>t!=e[n])))){this.gapIntersection.disconnect();for(let t of e)this.gapIntersection.observe(t);this.gaps=e}}onSelectionChange(e){if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:t}=this,n=this.selectionRange;if(t.state.facet(Te)?t.root.activeElement!=this.dom:!l(t.dom,n))return;let i=n.anchorNode&&t.docView.nearest(n.anchorNode);i&&i.ignoreEvent(e)||((Z.ie&&Z.ie_version<=11||Z.android&&Z.chrome)&&!t.state.selection.main.empty&&n.focusNode&&u(n.focusNode,n.focusOffset,n.anchorNode,n.anchorOffset)?this.flushSoon():this.flush(!1))}readSelectionRange(){let{root:e}=this.view,t=s(e),n=Z.safari&&11==e.nodeType&&function(){let e=document.activeElement;for(;e&&e.shadowRoot;)e=e.shadowRoot.activeElement;return e}()==this.view.contentDOM&&function(e){let t=null;function n(e){e.preventDefault(),e.stopImmediatePropagation(),t=e.getTargetRanges()[0]}if(e.contentDOM.addEventListener("beforeinput",n,!0),document.execCommand("indent"),e.contentDOM.removeEventListener("beforeinput",n,!0),!t)return null;let i=t.startContainer,r=t.startOffset,o=t.endContainer,s=t.endOffset,a=e.docView.domAtPos(e.state.selection.main.anchor);return u(a.node,a.offset,o,s)&&([i,r,o,s]=[o,s,i,r]),{anchorNode:i,anchorOffset:r,focusNode:o,focusOffset:s}}(this.view)||t;return!this.selectionRange.eq(n)&&(this.selectionRange.setRange(n),this.selectionChanged=!0)}setSelectionRange(e,t){this.selectionRange.set(e.node,e.offset,t.node,t.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let e=0,t=null;for(let n=this.dom;n;)if(1==n.nodeType)!t&&e<this.scrollTargets.length&&this.scrollTargets[e]==n?e++:t||(t=this.scrollTargets.slice(0,e)),t&&t.push(n),n=n.assignedSlot||n.parentNode;else{if(11!=n.nodeType)break;n=n.host}if(e<this.scrollTargets.length&&!t&&(t=this.scrollTargets.slice(0,e)),t){for(let e of this.scrollTargets)e.removeEventListener("scroll",this.onScroll);for(let e of this.scrollTargets=t)e.addEventListener("scroll",this.onScroll)}}ignore(e){if(!this.active)return e();try{return this.stop(),e()}finally{this.start(),this.clear()}}start(){this.active||(this.observer.observe(this.dom,$n),Pn&&this.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.active=!0)}stop(){this.active&&(this.active=!1,this.observer.disconnect(),Pn&&this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData))}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(e,t){this.delayedAndroidKey||requestAnimationFrame((()=>{let e=this.delayedAndroidKey;this.delayedAndroidKey=null,this.delayedFlush=-1,this.flush()||S(this.view.contentDOM,e.key,e.keyCode)})),this.delayedAndroidKey&&"Enter"!=e||(this.delayedAndroidKey={key:e,keyCode:t})}flushSoon(){this.delayedFlush<0&&(this.delayedFlush=window.setTimeout((()=>{this.delayedFlush=-1,this.flush()}),20))}forceFlush(){this.delayedFlush>=0&&(window.clearTimeout(this.delayedFlush),this.delayedFlush=-1,this.flush())}processRecords(){let e=this.queue;for(let t of this.observer.takeRecords())e.push(t);e.length&&(this.queue=[]);let t=-1,n=-1,i=!1;for(let r of e){let e=this.readMutation(r);e&&(e.typeOver&&(i=!0),-1==t?({from:t,to:n}=e):(t=Math.min(e.from,t),n=Math.max(e.to,n)))}return{from:t,to:n,typeOver:i}}flush(e=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return;e&&this.readSelectionRange();let{from:t,to:n,typeOver:i}=this.processRecords(),r=this.selectionChanged&&l(this.dom,this.selectionRange);if(t<0&&!r)return;this.selectionChanged=!1;let o=this.view.state,s=this.onChange(t,n,i);return this.view.state==o&&this.view.update([]),s}readMutation(e){let t=this.view.docView.nearest(e.target);if(!t||t.ignoreMutation(e))return null;if(t.markDirty("attributes"==e.type),"attributes"==e.type&&(t.dirty|=4),"childList"==e.type){let n=Rn(t,e.previousSibling||e.target.previousSibling,-1),i=Rn(t,e.nextSibling||e.target.nextSibling,1);return{from:n?t.posAfter(n):t.posAtStart,to:i?t.posBefore(i):t.posAtEnd,typeOver:!1}}return"characterData"==e.type?{from:t.posAtStart,to:t.posAtEnd,typeOver:e.target.nodeValue==e.oldValue}:null}destroy(){var e,t,n;this.stop(),null===(e=this.intersection)||void 0===e||e.disconnect(),null===(t=this.gapIntersection)||void 0===t||t.disconnect(),null===(n=this.resize)||void 0===n||n.disconnect();for(let e of this.scrollTargets)e.removeEventListener("scroll",this.onScroll);window.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onResize),window.removeEventListener("beforeprint",this.onPrint),this.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout)}}function Rn(e,t,n){for(;t;){let i=T.get(t);if(i&&i.parent==e)return i;let r=t.parentNode;t=r!=e.dom?r:n>0?t.nextSibling:t.previousSibling}return null}class En{constructor(e={}){this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.style.cssText="position: absolute; top: -10000px",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),this._dispatch=e.dispatch||(e=>this.update([e])),this.dispatch=this.dispatch.bind(this),this.root=e.root||function(e){for(;e;){if(e&&(9==e.nodeType||11==e.nodeType&&e.host))return e;e=e.assignedSlot||e.parentNode}return null}(e.parent)||document,this.viewState=new cn(e.state||i.EditorState.create(e)),this.plugins=this.state.facet(Pe).map((e=>new Re(e)));for(let e of this.plugins)e.update(this);this.observer=new Cn(this,((e,t,n)=>function(e,t,n,r){let o,s,l=e.state.selection.main;if(t>-1){let r=e.docView.domBoundsAround(t,n,0);if(!r||e.state.readOnly)return!1;let{from:a,to:c}=r,u=e.docView.impreciseHead||e.docView.impreciseAnchor?[]:function(e){let t=[];if(e.root.activeElement!=e.contentDOM)return t;let{anchorNode:n,anchorOffset:i,focusNode:r,focusOffset:o}=e.observer.selectionRange;return n&&(t.push(new it(n,i)),r==n&&o==i||t.push(new it(r,o))),t}(e),h=new tt(u,e.state);h.readRange(r.startDOM,r.endDOM);let f=l.from,d=null;(8===e.inputState.lastKeyCode&&e.inputState.lastKeyTime>Date.now()-100||Z.android&&h.text.length<c-a)&&(f=l.to,d="end");let p=function(e,t,n,i){let r=Math.min(e.length,t.length),o=0;for(;o<r&&e.charCodeAt(o)==t.charCodeAt(o);)o++;if(o==r&&e.length==t.length)return null;let s=e.length,a=t.length;for(;s>0&&a>0&&e.charCodeAt(s-1)==t.charCodeAt(a-1);)s--,a--;return"end"==i&&(n-=s+Math.max(0,o-Math.min(s,a))-o),s<o&&e.length<t.length?(o-=n<=o&&n>=s?o-n:0,a=o+(a-s),s=o):a<o&&(o-=n<=o&&n>=a?o-n:0,s=o+(s-a),a=o),{from:o,toA:s,toB:a}}(e.state.doc.sliceString(a,c,et),h.text,f-a,d);p&&(Z.chrome&&13==e.inputState.lastKeyCode&&p.toB==p.from+2&&"￿￿"==h.text.slice(p.from,p.toB)&&p.toB--,o={from:a+p.from,to:a+p.toA,insert:i.Text.of(h.text.slice(p.from,p.toB).split(et))}),s=function(e,t){if(0==e.length)return null;let n=e[0].pos,r=2==e.length?e[1].pos:n;return n>-1&&r>-1?i.EditorSelection.single(n+t,r+t):null}(u,a)}else if(e.hasFocus||!e.state.facet(Te)){let t=e.observer.selectionRange,{impreciseHead:n,impreciseAnchor:r}=e.docView,o=n&&n.node==t.focusNode&&n.offset==t.focusOffset||!a(e.contentDOM,t.focusNode)?e.state.selection.main.head:e.docView.posFromDOM(t.focusNode,t.focusOffset),c=r&&r.node==t.anchorNode&&r.offset==t.anchorOffset||!a(e.contentDOM,t.anchorNode)?e.state.selection.main.anchor:e.docView.posFromDOM(t.anchorNode,t.anchorOffset);o==l.head&&c==l.anchor||(s=i.EditorSelection.single(c,o))}if(!o&&!s)return!1;if(!o&&r&&!l.empty&&s&&s.main.empty?o={from:l.from,to:l.to,insert:e.state.doc.slice(l.from,l.to)}:o&&o.from>=l.from&&o.to<=l.to&&(o.from!=l.from||o.to!=l.to)&&l.to-l.from-(o.to-o.from)<=4?o={from:l.from,to:l.to,insert:e.state.doc.slice(l.from,o.from).append(o.insert).append(e.state.doc.slice(o.to,l.to))}:(Z.mac||Z.android)&&o&&o.from==o.to&&o.from==l.head-1&&"."==o.insert.toString()&&(o={from:l.from,to:l.to,insert:i.Text.of([" "])}),o){let t=e.state;if(Z.ios&&e.inputState.flushIOSKey(e))return!0;if(Z.android&&(o.from==l.from&&o.to==l.to&&1==o.insert.length&&2==o.insert.lines&&S(e.contentDOM,"Enter",13)||o.from==l.from-1&&o.to==l.to&&0==o.insert.length&&S(e.contentDOM,"Backspace",8)||o.from==l.from&&o.to==l.to+1&&0==o.insert.length&&S(e.contentDOM,"Delete",46)))return!0;let n,r=o.insert.toString();if(e.state.facet(we).some((t=>t(e,o.from,o.to,r))))return!0;if(e.inputState.composing>=0&&e.inputState.composing++,o.from>=l.from&&o.to<=l.to&&o.to-o.from>=(l.to-l.from)/3&&(!s||s.main.empty&&s.main.from==o.from+o.insert.length)&&e.inputState.composing<0){let i=l.from<o.from?t.sliceDoc(l.from,o.from):"",r=l.to>o.to?t.sliceDoc(o.to,l.to):"";n=t.replaceSelection(e.state.toText(i+o.insert.sliceString(0,void 0,e.state.lineBreak)+r))}else{let r=t.changes(o),a=s&&!t.selection.main.eq(s.main)&&s.main.to<=r.newLength?s.main:void 0;if(t.selection.ranges.length>1&&e.inputState.composing>=0&&o.to<=l.to&&o.to>=l.to-10){let s=e.state.sliceDoc(o.from,o.to),c=st(e)||e.state.doc.lineAt(l.head),u=l.to-o.to,h=l.to-l.from;n=t.changeByRange((n=>{if(n.from==l.from&&n.to==l.to)return{changes:r,range:a||n.map(r)};let f=n.to-u,d=f-s.length;if(n.to-n.from!=h||e.state.sliceDoc(d,f)!=s||c&&n.to>=c.from&&n.from<=c.to)return{range:n};let p=t.changes({from:d,to:f,insert:o.insert}),m=n.to-l.to;return{changes:p,range:a?i.EditorSelection.range(Math.max(0,a.anchor+m),Math.max(0,a.head+m)):n.map(p)}}))}else n={changes:r,selection:a&&t.selection.replaceRange(a)}}let a="input.type";return e.composing&&(a+=".compose",e.inputState.compositionFirstChange&&(a+=".start",e.inputState.compositionFirstChange=!1)),e.dispatch(n,{scrollIntoView:!0,userEvent:a}),!0}if(s&&!s.main.eq(l)){let t=!1,n="select";return e.inputState.lastSelectionTime>Date.now()-50&&("select"==e.inputState.lastSelectionOrigin&&(t=!0),n=e.inputState.lastSelectionOrigin),e.dispatch({selection:s,scrollIntoView:t,userEvent:n}),!0}return!1}(this,e,t,n)),(e=>{this.inputState.runScrollHandlers(this,e),this.observer.intersecting&&this.measure()})),this.inputState=new wt(this),this.inputState.ensureHandlers(this,this.plugins),this.docView=new rt(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure(),e.parent&&e.parent.appendChild(this.dom)}get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return this.inputState.composing>0}get compositionStarted(){return this.inputState.composing>=0}dispatch(...e){this._dispatch(1==e.length&&e[0]instanceof i.Transaction?e[0]:this.state.update(...e))}update(e){if(0!=this.updateState)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let t,n=!1,r=!1,o=this.state;for(let t of e){if(t.startState!=o)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");o=t.state}if(this.destroyed)return void(this.viewState.state=o);if(this.observer.clear(),o.facet(i.EditorState.phrases)!=this.state.facet(i.EditorState.phrases))return this.setState(o);t=ze.create(this,o,e);let s=this.viewState.scrollTarget;try{this.updateState=2;for(let t of e){if(s&&(s=s.map(t.changes)),t.scrollIntoView){let{main:e}=t.state.selection;s=new xe(e.empty?e:i.EditorSelection.cursor(e.head,e.head>e.anchor?-1:1))}for(let e of t.effects)e.is(ke)&&(s=e.value)}this.viewState.update(t,s),this.bidiCache=Mn.update(this.bidiCache,t.changes),t.empty||(this.updatePlugins(t),this.inputState.update(t)),n=this.docView.update(t),this.state.facet(_e)!=this.styleModules&&this.mountStyles(),r=this.updateAttrs(),this.showAnnouncements(e),this.docView.updateSelection(n,e.some((e=>e.isUserEvent("select.pointer"))))}finally{this.updateState=0}if(t.startState.facet(yn)!=t.state.facet(yn)&&(this.viewState.mustMeasureContent=!0),(n||r||s||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)&&this.requestMeasure(),!t.empty)for(let e of this.state.facet(be))e(t)}setState(e){if(0!=this.updateState)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed)return void(this.viewState.state=e);this.updateState=2;let t=this.hasFocus;try{for(let e of this.plugins)e.destroy(this);this.viewState=new cn(e),this.plugins=e.facet(Pe).map((e=>new Re(e))),this.pluginMap.clear();for(let e of this.plugins)e.update(this);this.docView=new rt(this),this.inputState.ensureHandlers(this,this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}t&&this.focus(),this.requestMeasure()}updatePlugins(e){let t=e.startState.facet(Pe),n=e.state.facet(Pe);if(t!=n){let i=[];for(let r of n){let n=t.indexOf(r);if(n<0)i.push(new Re(r));else{let t=this.plugins[n];t.mustUpdate=e,i.push(t)}}for(let t of this.plugins)t.mustUpdate!=e&&t.destroy(this);this.plugins=i,this.pluginMap.clear(),this.inputState.ensureHandlers(this,this.plugins)}else for(let t of this.plugins)t.mustUpdate=e;for(let e=0;e<this.plugins.length;e++)this.plugins[e].update(this)}measure(e=!0){if(this.destroyed)return;this.measureScheduled>-1&&cancelAnimationFrame(this.measureScheduled),this.measureScheduled=0,e&&this.observer.flush();let t=null;try{for(let e=0;;e++){this.updateState=1;let n=this.viewport,i=this.viewState.measure(this);if(!i&&!this.measureRequests.length&&null==this.viewState.scrollTarget)break;if(e>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let r=[];4&i||([this.measureRequests,r]=[r,this.measureRequests]);let o=r.map((e=>{try{return e.read(this)}catch(e){return Qe(this.state,e),Wn}})),s=ze.create(this,this.state,[]),a=!1,l=!1;s.flags|=i,t?t.flags|=i:t=s,this.updateState=2,s.empty||(this.updatePlugins(s),this.inputState.update(s),this.updateAttrs(),a=this.docView.update(s));for(let e=0;e<r.length;e++)if(o[e]!=Wn)try{let t=r[e];t.write&&t.write(o[e],this)}catch(e){Qe(this.state,e)}if(this.viewState.scrollTarget&&(this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,l=!0),a&&this.docView.updateSelection(!0),this.viewport.from==n.from&&this.viewport.to==n.to&&!l&&0==this.measureRequests.length)break}}finally{this.updateState=0,this.measureScheduled=-1}if(t&&!t.empty)for(let e of this.state.facet(be))e(t)}get themeClasses(){return wn+" "+(this.state.facet(bn)?xn:Sn)+" "+this.state.facet(yn)}updateAttrs(){let e=In(this,Ee,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),t={spellcheck:"false",autocorrect:"off",autocapitalize:"off",translate:"no",contenteditable:this.state.facet(Te)?"true":"false",class:"cm-content",style:`${Z.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};this.state.readOnly&&(t["aria-readonly"]="true"),In(this,Ae,t);let n=this.observer.ignore((()=>{let n=ie(this.contentDOM,this.contentAttrs,t),i=ie(this.dom,this.editorAttrs,e);return n||i}));return this.editorAttrs=e,this.contentAttrs=t,n}showAnnouncements(e){let t=!0;for(let n of e)for(let e of n.effects)e.is(En.announce)&&(t&&(this.announceDOM.textContent=""),t=!1,this.announceDOM.appendChild(document.createElement("div")).textContent=e.value)}mountStyles(){this.styleModules=this.state.facet(_e),r.StyleModule.mount(this.root,this.styleModules.concat(Tn).reverse())}readMeasured(){if(2==this.updateState)throw new Error("Reading the editor layout isn't allowed during an update");0==this.updateState&&this.measureScheduled>-1&&this.measure(!1)}requestMeasure(e){if(this.measureScheduled<0&&(this.measureScheduled=requestAnimationFrame((()=>this.measure()))),e){if(null!=e.key)for(let t=0;t<this.measureRequests.length;t++)if(this.measureRequests[t].key===e.key)return void(this.measureRequests[t]=e);this.measureRequests.push(e)}}plugin(e){let t=this.pluginMap.get(e);return(void 0===t||t&&t.spec!=e)&&this.pluginMap.set(e,t=this.plugins.find((t=>t.spec==e))||null),t&&t.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}elementAtHeight(e){return this.readMeasured(),this.viewState.elementAtHeight(e)}lineBlockAtHeight(e){return this.readMeasured(),this.viewState.lineBlockAtHeight(e)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(e){return this.viewState.lineBlockAt(e)}get contentHeight(){return this.viewState.contentHeight}moveByChar(e,t,n){return bt(this,e,yt(this,e,t,n))}moveByGroup(e,t){return bt(this,e,yt(this,e,t,(t=>function(e,t,n){let r=e.state.charCategorizer(t),o=r(n);return e=>{let t=r(e);return o==i.CharCategory.Space&&(o=t),o==t}}(this,e.head,t))))}moveToLineBoundary(e,n,r=!0){return function(e,n,r,o){let s=e.state.doc.lineAt(n.head),a=o&&e.lineWrapping?e.coordsAtPos(n.assoc<0&&n.head>s.from?n.head-1:n.head):null;if(a){let n=e.dom.getBoundingClientRect(),o=e.textDirectionAt(s.from),l=e.posAtCoords({x:r==(o==t.Direction.LTR)?n.right-1:n.left+1,y:(a.top+a.bottom)/2});if(null!=l)return i.EditorSelection.cursor(l,r?-1:1)}let l=he.find(e.docView,n.head),c=l?r?l.posAtEnd:l.posAtStart:r?s.to:s.from;return i.EditorSelection.cursor(c,r?-1:1)}(this,e,n,r)}moveVertically(e,t,n){return bt(this,e,function(e,t,n,r){let o=t.head,s=n?1:-1;if(o==(n?e.state.doc.length:0))return i.EditorSelection.cursor(o,t.assoc);let a,l=t.goalColumn,c=e.contentDOM.getBoundingClientRect(),u=e.coordsAtPos(o),h=e.documentTop;if(u)null==l&&(l=u.left-c.left),a=s<0?u.top:u.bottom;else{let t=e.viewState.lineBlockAt(o);null==l&&(l=Math.min(c.right-c.left,e.defaultCharacterWidth*(o-t.from))),a=(s<0?t.top:t.bottom)+h}let f=c.left+l,d=null!=r?r:e.defaultLineHeight>>1;for(let n=0;;n+=10){let r=a+(d+n)*s,u=Ot(e,{x:f,y:r},!1,s);if(r<c.top||r>c.bottom||(s<0?u<o:u>o))return i.EditorSelection.cursor(u,t.assoc,void 0,l)}}(this,e,t,n))}domAtPos(e){return this.docView.domAtPos(e)}posAtDOM(e,t=0){return this.docView.posFromDOM(e,t)}posAtCoords(e,t=!0){return this.readMeasured(),Ot(this,e,t)}coordsAtPos(e,n=1){this.readMeasured();let i=this.docView.coordsAt(e,n);if(!i||i.left==i.right)return i;let r=this.state.doc.lineAt(e),o=this.bidiSpans(r);return m(i,o[Ge.find(o,e-r.from,-1,n)].dir==t.Direction.LTR==n>0)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(e){return!this.state.facet(Se)||e<this.viewport.from||e>this.viewport.to?this.textDirection:(this.readMeasured(),this.docView.textDirectionAt(e))}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(e){if(e.length>An)return He(e.length);let t=this.textDirectionAt(e.from);for(let n of this.bidiCache)if(n.from==e.from&&n.dir==t)return n.order;let n=qe(e.text,t);return this.bidiCache.push(new Mn(e.from,e.to,t,n)),n}get hasFocus(){var e;return(document.hasFocus()||Z.safari&&(null===(e=this.inputState)||void 0===e?void 0:e.lastContextMenu)>Date.now()-3e4)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore((()=>{b(this.contentDOM),this.docView.updateSelection()}))}destroy(){for(let e of this.plugins)e.destroy(this);this.plugins=[],this.inputState.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1&&cancelAnimationFrame(this.measureScheduled),this.destroyed=!0}static scrollIntoView(e,t={}){return ke.of(new xe("number"==typeof e?i.EditorSelection.cursor(e):e,t.y,t.x,t.yMargin,t.xMargin))}static domEventHandlers(e){return Ce.define((()=>({})),{eventHandlers:e})}static theme(e,t){let n=r.StyleModule.newName(),i=[yn.of(n),_e.of(Qn(`.${n}`,e))];return t&&t.dark&&i.push(bn.of(!0)),i}static baseTheme(e){return i.Prec.lowest(_e.of(Qn("."+wn,e,kn)))}static findFromDOM(e){var t;let n=e.querySelector(".cm-content"),i=n&&T.get(n)||T.get(e);return(null===(t=null==i?void 0:i.rootView)||void 0===t?void 0:t.view)||null}}En.styleModule=_e,En.inputHandler=we,En.perLineTextDirection=Se,En.exceptionSink=ye,En.updateListener=be,En.editable=Te,En.mouseSelectionStyle=ve,En.dragMovesSelection=Oe,En.clickAddsSelectionRange=ge,En.decorations=We,En.atomicRanges=Me,En.scrollMargins=Ie,En.darkTheme=bn,En.contentAttributes=Ae,En.editorAttributes=Ee,En.lineWrapping=En.contentAttributes.of({class:"cm-lineWrapping"}),En.announce=i.StateEffect.define();const An=4096,Wn={};class Mn{constructor(e,t,n,i){this.from=e,this.to=t,this.dir=n,this.order=i}static update(e,n){if(n.empty)return e;let i=[],r=e.length?e[e.length-1].dir:t.Direction.LTR;for(let t=Math.max(0,e.length-10);t<e.length;t++){let o=e[t];o.dir!=r||n.touchesRange(o.from,o.to)||i.push(new Mn(n.mapPos(o.from,1),n.mapPos(o.to,-1),o.dir,o.order))}return i}}function In(e,t,n){for(let i=e.state.facet(t),r=i.length-1;r>=0;r--){let t=i[r],o="function"==typeof t?t(e):t;o&&te(o,n)}return n}const _n=Z.mac?"mac":Z.windows?"win":Z.linux?"linux":"key";function Dn(e,t,n){return t.altKey&&(e="Alt-"+e),t.ctrlKey&&(e="Ctrl-"+e),t.metaKey&&(e="Meta-"+e),!1!==n&&t.shiftKey&&(e="Shift-"+e),e}const zn=En.domEventHandlers({keydown:(e,t)=>Zn(jn(t.state),e,t,"editor")}),Nn=i.Facet.define({enables:zn}),Ln=new WeakMap;function jn(e){let t=e.facet(Nn),n=Ln.get(t);return n||Ln.set(t,n=function(e,t=_n){let n=Object.create(null),i=Object.create(null),r=(e,t)=>{let n=i[e];if(null==n)i[e]=t;else if(n!=t)throw new Error("Key binding "+e+" is used both as a regular binding and as a multi-stroke prefix")},o=(e,i,o,s)=>{let a=n[e]||(n[e]=Object.create(null)),l=i.split(/ (?!$)/).map((e=>function(e,t){const n=e.split(/-(?!$)/);let i,r,o,s,a=n[n.length-1];"Space"==a&&(a=" ");for(let e=0;e<n.length-1;++e){const a=n[e];if(/^(cmd|meta|m)$/i.test(a))s=!0;else if(/^a(lt)?$/i.test(a))i=!0;else if(/^(c|ctrl|control)$/i.test(a))r=!0;else if(/^s(hift)?$/i.test(a))o=!0;else{if(!/^mod$/i.test(a))throw new Error("Unrecognized modifier name: "+a);"mac"==t?s=!0:r=!0}}return i&&(a="Alt-"+a),r&&(a="Ctrl-"+a),s&&(a="Meta-"+a),o&&(a="Shift-"+a),a}(e,t)));for(let t=1;t<l.length;t++){let n=l.slice(0,t).join(" ");r(n,!0),a[n]||(a[n]={preventDefault:!0,commands:[t=>{let i=Xn={view:t,prefix:n,scope:e};return setTimeout((()=>{Xn==i&&(Xn=null)}),4e3),!0}]})}let c=l.join(" ");r(c,!1);let u=a[c]||(a[c]={preventDefault:!1,commands:[]});u.commands.push(o),s&&(u.preventDefault=!0)};for(let n of e){let e=n[t]||n.key;if(e)for(let t of n.scope?n.scope.split(" "):["editor"])o(t,e,n.run,n.preventDefault),n.shift&&o(t,"Shift-"+e,n.shift,n.preventDefault)}return n}(t.reduce(((e,t)=>e.concat(t)),[]))),n}let Xn=null;function Zn(e,t,n,i){let r=o.keyName(t),s=1==r.length&&" "!=r,a="",l=!1;Xn&&Xn.view==n&&Xn.scope==i&&(a=Xn.prefix+" ",(l=xt.indexOf(t.keyCode)<0)&&(Xn=null));let c,u=e=>{if(e){for(let t of e.commands)if(t(n))return!0;e.preventDefault&&(l=!0)}return!1},h=e[i];if(h){if(u(h[a+Dn(r,t,!s)]))return!0;if(s&&(t.shiftKey||t.altKey||t.metaKey)&&(c=o.base[t.keyCode])&&c!=r){if(u(h[a+Dn(c,t,!0)]))return!0}else if(s&&t.shiftKey&&u(h[a+Dn(r,t,!0)]))return!0}return l}const Un=!Z.ios,Vn=i.Facet.define({combine:e=>i.combineConfig(e,{cursorBlinkRate:1200,drawRangeCursor:!0},{cursorBlinkRate:(e,t)=>Math.min(e,t),drawRangeCursor:(e,t)=>e||t})});class Bn{constructor(e,t,n,i,r){this.left=e,this.top=t,this.width=n,this.height=i,this.className=r}draw(){let e=document.createElement("div");return e.className=this.className,this.adjust(e),e}adjust(e){e.style.left=this.left+"px",e.style.top=this.top+"px",this.width>=0&&(e.style.width=this.width+"px"),e.style.height=this.height+"px"}eq(e){return this.left==e.left&&this.top==e.top&&this.width==e.width&&this.height==e.height&&this.className==e.className}}const Fn=Ce.fromClass(class{constructor(e){this.view=e,this.rangePieces=[],this.cursors=[],this.measureReq={read:this.readPos.bind(this),write:this.drawSel.bind(this)},this.selectionLayer=e.scrollDOM.appendChild(document.createElement("div")),this.selectionLayer.className="cm-selectionLayer",this.selectionLayer.setAttribute("aria-hidden","true"),this.cursorLayer=e.scrollDOM.appendChild(document.createElement("div")),this.cursorLayer.className="cm-cursorLayer",this.cursorLayer.setAttribute("aria-hidden","true"),e.requestMeasure(this.measureReq),this.setBlinkRate()}setBlinkRate(){this.cursorLayer.style.animationDuration=this.view.state.facet(Vn).cursorBlinkRate+"ms"}update(e){let t=e.startState.facet(Vn)!=e.state.facet(Vn);(t||e.selectionSet||e.geometryChanged||e.viewportChanged)&&this.view.requestMeasure(this.measureReq),e.transactions.some((e=>e.scrollIntoView))&&(this.cursorLayer.style.animationName="cm-blink"==this.cursorLayer.style.animationName?"cm-blink2":"cm-blink"),t&&this.setBlinkRate()}readPos(){let{state:e}=this.view,n=e.facet(Vn),i=e.selection.ranges.map((e=>e.empty?[]:function(e,n){if(n.to<=e.viewport.from||n.from>=e.viewport.to)return[];let i=Math.max(n.from,e.viewport.from),r=Math.min(n.to,e.viewport.to),o=e.textDirection==t.Direction.LTR,s=e.contentDOM,a=s.getBoundingClientRect(),l=qn(e),c=window.getComputedStyle(s.firstChild),u=a.left+parseInt(c.paddingLeft)+Math.min(0,parseInt(c.textIndent)),h=a.right-parseInt(c.paddingRight),f=Jn(e,i),d=Jn(e,r),p=f.type==t.BlockType.Text?f:null,m=d.type==t.BlockType.Text?d:null;if(e.lineWrapping&&(p&&(p=Hn(e,i,p)),m&&(m=Hn(e,r,m))),p&&m&&p.from==m.from)return O(v(n.from,n.to,p));{let i=p?v(n.from,null,p):y(f,!1),r=m?v(null,n.to,m):y(d,!0),o=[];return(p||f).to<(m||d).from-1?o.push(g(u,i.bottom,h,r.top)):i.bottom<r.top&&e.elementAtHeight((i.bottom+r.top)/2).type==t.BlockType.Text&&(i.bottom=r.top=(i.bottom+r.top)/2),O(i).concat(o).concat(O(r))}function g(e,t,n,i){return new Bn(e-l.left,t-l.top-.01,n-e,i-t+.01,"cm-selectionBackground")}function O({top:e,bottom:t,horizontal:n}){let i=[];for(let r=0;r<n.length;r+=2)i.push(g(n[r],e,n[r+1],t));return i}function v(n,i,r){let s=1e9,a=-1e9,l=[];function c(n,i,c,f,d){let p=e.coordsAtPos(n,n==r.to?-2:2),m=e.coordsAtPos(c,c==r.from?2:-2);s=Math.min(p.top,m.top,s),a=Math.max(p.bottom,m.bottom,a),d==t.Direction.LTR?l.push(o&&i?u:p.left,o&&f?h:m.right):l.push(!o&&f?u:m.left,!o&&i?h:p.right)}let f=null!=n?n:r.from,d=null!=i?i:r.to;for(let t of e.visibleRanges)if(t.to>f&&t.from<d)for(let r=Math.max(t.from,f),o=Math.min(t.to,d);;){let t=e.state.doc.lineAt(r);for(let s of e.bidiSpans(t)){let e=s.from+t.from,a=s.to+t.from;if(e>=o)break;a>r&&c(Math.max(e,r),null==n&&e<=f,Math.min(a,o),null==i&&a>=d,s.dir)}if(r=t.to+1,r>=o)break}return 0==l.length&&c(f,null==n,d,null==i,e.textDirection),{top:s,bottom:a,horizontal:l}}function y(e,t){let n=a.top+(t?e.top:e.bottom);return{top:n,bottom:n,horizontal:[]}}}(this.view,e))).reduce(((e,t)=>e.concat(t))),r=[];for(let t of e.selection.ranges){let i=t==e.selection.main;if(t.empty?!i||Un:n.drawRangeCursor){let e=Kn(this.view,t,i);e&&r.push(e)}}return{rangePieces:i,cursors:r}}drawSel({rangePieces:e,cursors:t}){if(e.length!=this.rangePieces.length||e.some(((e,t)=>!e.eq(this.rangePieces[t])))){this.selectionLayer.textContent="";for(let t of e)this.selectionLayer.appendChild(t.draw());this.rangePieces=e}if(t.length!=this.cursors.length||t.some(((e,t)=>!e.eq(this.cursors[t])))){let e=this.cursorLayer.children;if(e.length!==t.length){this.cursorLayer.textContent="";for(const e of t)this.cursorLayer.appendChild(e.draw())}else t.forEach(((t,n)=>t.adjust(e[n])));this.cursors=t}}destroy(){this.selectionLayer.remove(),this.cursorLayer.remove()}}),Gn={".cm-line":{"& ::selection":{backgroundColor:"transparent !important"},"&::selection":{backgroundColor:"transparent !important"}}};Un&&(Gn[".cm-line"].caretColor="transparent !important");const Yn=i.Prec.highest(En.theme(Gn));function qn(e){let n=e.scrollDOM.getBoundingClientRect();return{left:(e.textDirection==t.Direction.LTR?n.left:n.right-e.scrollDOM.clientWidth)-e.scrollDOM.scrollLeft,top:n.top-e.scrollDOM.scrollTop}}function Hn(e,n,r){let o=i.EditorSelection.cursor(n);return{from:Math.max(r.from,e.moveToLineBoundary(o,!1,!0).from),to:Math.min(r.to,e.moveToLineBoundary(o,!0,!0).from),type:t.BlockType.Text}}function Jn(e,n){let i=e.lineBlockAt(n);if(Array.isArray(i.type))for(let e of i.type)if(e.to>n||e.to==n&&(e.to==i.to||e.type==t.BlockType.Text))return e;return i}function Kn(e,t,n){let i=e.coordsAtPos(t.head,t.assoc||1);if(!i)return null;let r=qn(e);return new Bn(i.left-r.left,i.top-r.top,-1,i.bottom-i.top,n?"cm-cursor cm-cursor-primary":"cm-cursor cm-cursor-secondary")}const ei=i.StateEffect.define({map:(e,t)=>null==e?null:t.mapPos(e)}),ti=i.StateField.define({create:()=>null,update:(e,t)=>(null!=e&&(e=t.changes.mapPos(e)),t.effects.reduce(((e,t)=>t.is(ei)?t.value:e),e))}),ni=Ce.fromClass(class{constructor(e){this.view=e,this.cursor=null,this.measureReq={read:this.readPos.bind(this),write:this.drawCursor.bind(this)}}update(e){var t;let n=e.state.field(ti);null==n?null!=this.cursor&&(null===(t=this.cursor)||void 0===t||t.remove(),this.cursor=null):(this.cursor||(this.cursor=this.view.scrollDOM.appendChild(document.createElement("div")),this.cursor.className="cm-dropCursor"),(e.startState.field(ti)!=n||e.docChanged||e.geometryChanged)&&this.view.requestMeasure(this.measureReq))}readPos(){let e=this.view.state.field(ti),t=null!=e&&this.view.coordsAtPos(e);if(!t)return null;let n=this.view.scrollDOM.getBoundingClientRect();return{left:t.left-n.left+this.view.scrollDOM.scrollLeft,top:t.top-n.top+this.view.scrollDOM.scrollTop,height:t.bottom-t.top}}drawCursor(e){this.cursor&&(e?(this.cursor.style.left=e.left+"px",this.cursor.style.top=e.top+"px",this.cursor.style.height=e.height+"px"):this.cursor.style.left="-100000px")}destroy(){this.cursor&&this.cursor.remove()}setDropPos(e){this.view.state.field(ti)!=e&&this.view.dispatch({effects:ei.of(e)})}},{eventHandlers:{dragover(e){this.setDropPos(this.view.posAtCoords({x:e.clientX,y:e.clientY}))},dragleave(e){e.target!=this.view.contentDOM&&this.view.contentDOM.contains(e.relatedTarget)||this.setDropPos(null)},dragend(){this.setDropPos(null)},drop(){this.setDropPos(null)}}});function ii(e,t,n,i,r){t.lastIndex=0;for(let o,s=e.iterRange(n,i),a=n;!s.next().done;a+=s.value.length)if(!s.lineBreak)for(;o=t.exec(s.value);)r(a+o.index,a+o.index+o[0].length,o)}class ri{constructor(e){let{regexp:t,decoration:n,boundary:i,maxLength:r=1e3}=e;if(!t.global)throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");this.regexp=t,this.getDeco="function"==typeof n?n:()=>n,this.boundary=i,this.maxLength=r}createDeco(e){let t=new i.RangeSetBuilder;for(let{from:n,to:i}of function(e,t){let n=e.visibleRanges;if(1==n.length&&n[0].from==e.viewport.from&&n[0].to==e.viewport.to)return n;let i=[];for(let{from:r,to:o}of n)r=Math.max(e.state.doc.lineAt(r).from,r-t),o=Math.min(e.state.doc.lineAt(o).to,o+t),i.length&&i[i.length-1].to>=r?i[i.length-1].to=o:i.push({from:r,to:o});return i}(e,this.maxLength))ii(e.state.doc,this.regexp,n,i,((n,i,r)=>t.add(n,i,this.getDeco(r,e,n))));return t.finish()}updateDeco(e,t){let n=1e9,i=-1;return e.docChanged&&e.changes.iterChanges(((t,r,o,s)=>{s>e.view.viewport.from&&o<e.view.viewport.to&&(n=Math.min(o,n),i=Math.max(s,i))})),e.viewportChanged||i-n>1e3?this.createDeco(e.view):i>-1?this.updateRange(e.view,t.map(e.changes),n,i):t}updateRange(e,t,n,i){for(let r of e.visibleRanges){let o=Math.max(r.from,n),s=Math.min(r.to,i);if(s>o){let n=e.state.doc.lineAt(o),i=n.to<s?e.state.doc.lineAt(s):n,a=Math.max(r.from,n.from),l=Math.min(r.to,i.to);if(this.boundary){for(;o>n.from;o--)if(this.boundary.test(n.text[o-1-n.from])){a=o;break}for(;s<i.to;s++)if(this.boundary.test(i.text[s-i.from])){l=s;break}}let c,u=[];if(n==i)for(this.regexp.lastIndex=a-n.from;(c=this.regexp.exec(n.text))&&c.index<l-n.from;){let t=c.index+n.from;u.push(this.getDeco(c,e,t).range(t,t+c[0].length))}else ii(e.state.doc,this.regexp,a,l,((t,n,i)=>u.push(this.getDeco(i,e,t).range(t,n))));t=t.update({filterFrom:a,filterTo:l,filter:(e,t)=>e<a||t>l,add:u})}}return t}}const oi=null!=/x/.unicode?"gu":"g",si=new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮\ufeff￹-￼]",oi),ai={0:"null",7:"bell",8:"backspace",10:"newline",11:"vertical tab",13:"carriage return",27:"escape",8203:"zero width space",8204:"zero width non-joiner",8205:"zero width joiner",8206:"left-to-right mark",8207:"right-to-left mark",8232:"line separator",8237:"left-to-right override",8238:"right-to-left override",8233:"paragraph separator",65279:"zero width no-break space",65532:"object replacement"};let li=null;const ci=i.Facet.define({combine(e){let t=i.combineConfig(e,{render:null,specialChars:si,addSpecialChars:null});return(t.replaceTabs=!function(){var e;if(null==li&&"undefined"!=typeof document&&document.body){let t=document.body.style;li=null!=(null!==(e=t.tabSize)&&void 0!==e?e:t.MozTabSize)}return li||!1}())&&(t.specialChars=new RegExp("\t|"+t.specialChars.source,oi)),t.addSpecialChars&&(t.specialChars=new RegExp(t.specialChars.source+"|"+t.addSpecialChars.source,oi)),t}});let ui=null;class hi extends re{constructor(e,t){super(),this.options=e,this.code=t}eq(e){return e.code==this.code}toDOM(e){let t=(n=this.code)>=32?"•":10==n?"␤":String.fromCharCode(9216+n);var n;let i=e.state.phrase("Control character")+" "+(ai[this.code]||"0x"+this.code.toString(16)),r=this.options.render&&this.options.render(this.code,i,t);if(r)return r;let o=document.createElement("span");return o.textContent=t,o.title=i,o.setAttribute("aria-label",i),o.className="cm-specialChar",o}ignoreEvent(){return!1}}class fi extends re{constructor(e){super(),this.width=e}eq(e){return e.width==this.width}toDOM(){let e=document.createElement("span");return e.textContent="\t",e.className="cm-tab",e.style.width=this.width+"px",e}ignoreEvent(){return!1}}const di=Ce.fromClass(class{constructor(){this.height=1e3,this.attrs={style:"padding-bottom: 1000px"}}update(e){let t=e.view.viewState.editorHeight-e.view.defaultLineHeight;t!=this.height&&(this.height=t,this.attrs={style:`padding-bottom: ${t}px`})}}),pi=oe.line({class:"cm-activeLine"}),mi=Ce.fromClass(class{constructor(e){this.decorations=this.getDeco(e)}update(e){(e.docChanged||e.selectionSet)&&(this.decorations=this.getDeco(e.view))}getDeco(e){let t=-1,n=[];for(let i of e.state.selection.ranges){if(!i.empty)return oe.none;let r=e.lineBlockAt(i.head);r.from>t&&(n.push(pi.range(r.from)),t=r.from)}return oe.set(n)}},{decorations:e=>e.decorations});class gi extends re{constructor(e){super(),this.content=e}toDOM(){let e=document.createElement("span");return e.className="cm-placeholder",e.style.pointerEvents="none",e.appendChild("string"==typeof this.content?document.createTextNode(this.content):this.content),"string"==typeof this.content?e.setAttribute("aria-label","placeholder "+this.content):e.setAttribute("aria-hidden","true"),e}ignoreEvent(){return!1}}const Oi=2e3;function vi(e,t){let n=e.posAtCoords({x:t.clientX,y:t.clientY},!1),r=e.state.doc.lineAt(n),o=n-r.from,s=o>Oi?-1:o==r.length?function(e,t){let n=e.coordsAtPos(e.viewport.from);return n?Math.round(Math.abs((n.left-t)/e.defaultCharacterWidth)):-1}(e,t.clientX):i.countColumn(r.text,e.state.tabSize,n-r.from);return{line:r.number,col:s,off:o}}const yi={Alt:[18,e=>e.altKey],Control:[17,e=>e.ctrlKey],Shift:[16,e=>e.shiftKey],Meta:[91,e=>e.metaKey]},bi={style:"cursor: crosshair"},wi="-10000px";class Si{constructor(e,t,n){this.facet=t,this.createTooltipView=n,this.input=e.state.facet(t),this.tooltips=this.input.filter((e=>e)),this.tooltipViews=this.tooltips.map(n)}update(e){let t=e.state.facet(this.facet),n=t.filter((e=>e));if(t===this.input){for(let t of this.tooltipViews)t.update&&t.update(e);return!1}let i=[];for(let t=0;t<n.length;t++){let r=n[t],o=-1;if(r){for(let e=0;e<this.tooltips.length;e++){let t=this.tooltips[e];t&&t.create==r.create&&(o=e)}if(o<0)i[t]=this.createTooltipView(r);else{let n=i[t]=this.tooltipViews[o];n.update&&n.update(e)}}}for(let e of this.tooltipViews)i.indexOf(e)<0&&e.dom.remove();return this.input=t,this.tooltips=n,this.tooltipViews=i,!0}}function xi(){return{top:0,left:0,bottom:innerHeight,right:innerWidth}}const ki=i.Facet.define({combine:e=>{var t,n,i;return{position:Z.ios?"absolute":(null===(t=e.find((e=>e.position)))||void 0===t?void 0:t.position)||"fixed",parent:(null===(n=e.find((e=>e.parent)))||void 0===n?void 0:n.parent)||null,tooltipSpace:(null===(i=e.find((e=>e.tooltipSpace)))||void 0===i?void 0:i.tooltipSpace)||xi}}}),Qi=Ce.fromClass(class{constructor(e){var t;this.view=e,this.inView=!0,this.lastTransaction=0,this.measureTimeout=-1;let n=e.state.facet(ki);this.position=n.position,this.parent=n.parent,this.classes=e.themeClasses,this.createContainer(),this.measureReq={read:this.readMeasure.bind(this),write:this.writeMeasure.bind(this),key:this},this.manager=new Si(e,Pi,(e=>this.createTooltip(e))),this.intersectionObserver="function"==typeof IntersectionObserver?new IntersectionObserver((e=>{Date.now()>this.lastTransaction-50&&e.length>0&&e[e.length-1].intersectionRatio<1&&this.measureSoon()}),{threshold:[1]}):null,this.observeIntersection(),null===(t=e.dom.ownerDocument.defaultView)||void 0===t||t.addEventListener("resize",this.measureSoon=this.measureSoon.bind(this)),this.maybeMeasure()}createContainer(){this.parent?(this.container=document.createElement("div"),this.container.style.position="relative",this.container.className=this.view.themeClasses,this.parent.appendChild(this.container)):this.container=this.view.dom}observeIntersection(){if(this.intersectionObserver){this.intersectionObserver.disconnect();for(let e of this.manager.tooltipViews)this.intersectionObserver.observe(e.dom)}}measureSoon(){this.measureTimeout<0&&(this.measureTimeout=setTimeout((()=>{this.measureTimeout=-1,this.maybeMeasure()}),50))}update(e){e.transactions.length&&(this.lastTransaction=Date.now());let t=this.manager.update(e);t&&this.observeIntersection();let n=t||e.geometryChanged,i=e.state.facet(ki);if(i.position!=this.position){this.position=i.position;for(let e of this.manager.tooltipViews)e.dom.style.position=this.position;n=!0}if(i.parent!=this.parent){this.parent&&this.container.remove(),this.parent=i.parent,this.createContainer();for(let e of this.manager.tooltipViews)this.container.appendChild(e.dom);n=!0}else this.parent&&this.view.themeClasses!=this.classes&&(this.classes=this.container.className=this.view.themeClasses);n&&this.maybeMeasure()}createTooltip(e){let t=e.create(this.view);if(t.dom.classList.add("cm-tooltip"),e.arrow&&!t.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")){let e=document.createElement("div");e.className="cm-tooltip-arrow",t.dom.appendChild(e)}return t.dom.style.position=this.position,t.dom.style.top=wi,this.container.appendChild(t.dom),t.mount&&t.mount(this.view),t}destroy(){var e,t;null===(e=this.view.dom.ownerDocument.defaultView)||void 0===e||e.removeEventListener("resize",this.measureSoon);for(let{dom:e}of this.manager.tooltipViews)e.remove();null===(t=this.intersectionObserver)||void 0===t||t.disconnect(),clearTimeout(this.measureTimeout)}readMeasure(){let e=this.view.dom.getBoundingClientRect();return{editor:e,parent:this.parent?this.container.getBoundingClientRect():e,pos:this.manager.tooltips.map(((e,t)=>{let n=this.manager.tooltipViews[t];return n.getCoords?n.getCoords(e.pos):this.view.coordsAtPos(e.pos)})),size:this.manager.tooltipViews.map((({dom:e})=>e.getBoundingClientRect())),space:this.view.state.facet(ki).tooltipSpace(this.view)}}writeMeasure(e){let{editor:n,space:i}=e,r=[];for(let o=0;o<this.manager.tooltips.length;o++){let s=this.manager.tooltips[o],a=this.manager.tooltipViews[o],{dom:l}=a,c=e.pos[o],u=e.size[o];if(!c||c.bottom<=Math.max(n.top,i.top)||c.top>=Math.min(n.bottom,i.bottom)||c.right<Math.max(n.left,i.left)-.1||c.left>Math.min(n.right,i.right)+.1){l.style.top=wi;continue}let h=s.arrow?a.dom.querySelector(".cm-tooltip-arrow"):null,f=h?7:0,d=u.right-u.left,p=u.bottom-u.top,m=a.offset||$i,g=this.view.textDirection==t.Direction.LTR,O=u.width>i.right-i.left?g?i.left:i.right-u.width:g?Math.min(c.left-(h?14:0)+m.x,i.right-d):Math.max(i.left,c.left-d+(h?14:0)-m.x),v=!!s.above;!s.strictSide&&(v?c.top-(u.bottom-u.top)-m.y<i.top:c.bottom+(u.bottom-u.top)+m.y>i.bottom)&&v==i.bottom-c.bottom>c.top-i.top&&(v=!v);let y=v?c.top-p-f-m.y:c.bottom+f+m.y,b=O+d;if(!0!==a.overlap)for(let e of r)e.left<b&&e.right>O&&e.top<y+p&&e.bottom>y&&(y=v?e.top-p-2-f:e.bottom+f+2);"absolute"==this.position?(l.style.top=y-e.parent.top+"px",l.style.left=O-e.parent.left+"px"):(l.style.top=y+"px",l.style.left=O+"px"),h&&(h.style.left=c.left+(g?m.x:-m.x)-(O+14-7)+"px"),!0!==a.overlap&&r.push({left:O,top:y,right:b,bottom:y+p}),l.classList.toggle("cm-tooltip-above",v),l.classList.toggle("cm-tooltip-below",!v),a.positioned&&a.positioned()}}maybeMeasure(){if(this.manager.tooltips.length&&(this.view.inView&&this.view.requestMeasure(this.measureReq),this.inView!=this.view.inView&&(this.inView=this.view.inView,!this.inView)))for(let e of this.manager.tooltipViews)e.dom.style.top=wi}},{eventHandlers:{scroll(){this.maybeMeasure()}}}),Ti=En.baseTheme({".cm-tooltip":{zIndex:100},"&light .cm-tooltip":{border:"1px solid #bbb",backgroundColor:"#f5f5f5"},"&light .cm-tooltip-section:not(:first-child)":{borderTop:"1px solid #bbb"},"&dark .cm-tooltip":{backgroundColor:"#333338",color:"white"},".cm-tooltip-arrow":{height:"7px",width:"14px",position:"absolute",zIndex:-1,overflow:"hidden","&:before, &:after":{content:"''",position:"absolute",width:0,height:0,borderLeft:"7px solid transparent",borderRight:"7px solid transparent"},".cm-tooltip-above &":{bottom:"-7px","&:before":{borderTop:"7px solid #bbb"},"&:after":{borderTop:"7px solid #f5f5f5",bottom:"1px"}},".cm-tooltip-below &":{top:"-7px","&:before":{borderBottom:"7px solid #bbb"},"&:after":{borderBottom:"7px solid #f5f5f5",top:"1px"}}},"&dark .cm-tooltip .cm-tooltip-arrow":{"&:before":{borderTopColor:"#333338",borderBottomColor:"#333338"},"&:after":{borderTopColor:"transparent",borderBottomColor:"transparent"}}}),$i={x:0,y:0},Pi=i.Facet.define({enables:[Qi,Ti]}),Ci=i.Facet.define();class Ri{constructor(e){this.view=e,this.mounted=!1,this.dom=document.createElement("div"),this.dom.classList.add("cm-tooltip-hover"),this.manager=new Si(e,Ci,(e=>this.createHostedView(e)))}static create(e){return new Ri(e)}createHostedView(e){let t=e.create(this.view);return t.dom.classList.add("cm-tooltip-section"),this.dom.appendChild(t.dom),this.mounted&&t.mount&&t.mount(this.view),t}mount(e){for(let t of this.manager.tooltipViews)t.mount&&t.mount(e);this.mounted=!0}positioned(){for(let e of this.manager.tooltipViews)e.positioned&&e.positioned()}update(e){this.manager.update(e)}}const Ei=Pi.compute([Ci],(e=>{let t=e.facet(Ci).filter((e=>e));return 0===t.length?null:{pos:Math.min(...t.map((e=>e.pos))),end:Math.max(...t.filter((e=>null!=e.end)).map((e=>e.end))),create:Ri.create,above:t[0].above,arrow:t.some((e=>e.arrow))}}));class Ai{constructor(e,t,n,i,r){this.view=e,this.source=t,this.field=n,this.setHover=i,this.hoverTime=r,this.hoverTimeout=-1,this.restartTimeout=-1,this.pending=null,this.lastMove={x:0,y:0,target:e.dom,time:0},this.checkHover=this.checkHover.bind(this),e.dom.addEventListener("mouseleave",this.mouseleave=this.mouseleave.bind(this)),e.dom.addEventListener("mousemove",this.mousemove=this.mousemove.bind(this))}update(){this.pending&&(this.pending=null,clearTimeout(this.restartTimeout),this.restartTimeout=setTimeout((()=>this.startHover()),20))}get active(){return this.view.state.field(this.field)}checkHover(){if(this.hoverTimeout=-1,this.active)return;let e=Date.now()-this.lastMove.time;e<this.hoverTime?this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime-e):this.startHover()}startHover(){clearTimeout(this.restartTimeout);let{lastMove:e}=this,n=this.view.contentDOM.contains(e.target)?this.view.posAtCoords(e):null;if(null==n)return;let i=this.view.coordsAtPos(n);if(null==i||e.y<i.top||e.y>i.bottom||e.x<i.left-this.view.defaultCharacterWidth||e.x>i.right+this.view.defaultCharacterWidth)return;let r=this.view.bidiSpans(this.view.state.doc.lineAt(n)).find((e=>e.from<=n&&e.to>=n)),o=r&&r.dir==t.Direction.RTL?-1:1,s=this.source(this.view,n,e.x<i.left?-o:o);if(null==s?void 0:s.then){let e=this.pending={pos:n};s.then((t=>{this.pending==e&&(this.pending=null,t&&this.view.dispatch({effects:this.setHover.of(t)}))}),(e=>Qe(this.view.state,e,"hover tooltip")))}else s&&this.view.dispatch({effects:this.setHover.of(s)})}mousemove(e){var t;this.lastMove={x:e.clientX,y:e.clientY,target:e.target,time:Date.now()},this.hoverTimeout<0&&(this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime));let n=this.active;if(n&&!function(e){for(let t=e;t;t=t.parentNode)if(1==t.nodeType&&t.classList.contains("cm-tooltip"))return!0;return!1}(this.lastMove.target)||this.pending){let{pos:i}=n||this.pending,r=null!==(t=null==n?void 0:n.end)&&void 0!==t?t:i;(i==r?this.view.posAtCoords(this.lastMove)==i:function(e,t,n,i,r,o){let s=document.createRange(),a=e.domAtPos(t),l=e.domAtPos(n);s.setEnd(l.node,l.offset),s.setStart(a.node,a.offset);let c=s.getClientRects();s.detach();for(let e=0;e<c.length;e++){let t=c[e];if(Math.max(t.top-r,r-t.bottom,t.left-i,i-t.right)<=6)return!0}return!1}(this.view,i,r,e.clientX,e.clientY))||(this.view.dispatch({effects:this.setHover.of(null)}),this.pending=null)}}mouseleave(){clearTimeout(this.hoverTimeout),this.hoverTimeout=-1,this.active&&this.view.dispatch({effects:this.setHover.of(null)})}destroy(){clearTimeout(this.hoverTimeout),this.view.dom.removeEventListener("mouseleave",this.mouseleave),this.view.dom.removeEventListener("mousemove",this.mousemove)}}const Wi=i.StateEffect.define(),Mi=Wi.of(null),Ii=i.Facet.define({combine(e){let t,n;for(let i of e)t=t||i.topContainer,n=n||i.bottomContainer;return{topContainer:t,bottomContainer:n}}}),_i=Ce.fromClass(class{constructor(e){this.input=e.state.facet(Ni),this.specs=this.input.filter((e=>e)),this.panels=this.specs.map((t=>t(e)));let t=e.state.facet(Ii);this.top=new Di(e,!0,t.topContainer),this.bottom=new Di(e,!1,t.bottomContainer),this.top.sync(this.panels.filter((e=>e.top))),this.bottom.sync(this.panels.filter((e=>!e.top)));for(let e of this.panels)e.dom.classList.add("cm-panel"),e.mount&&e.mount()}update(e){let t=e.state.facet(Ii);this.top.container!=t.topContainer&&(this.top.sync([]),this.top=new Di(e.view,!0,t.topContainer)),this.bottom.container!=t.bottomContainer&&(this.bottom.sync([]),this.bottom=new Di(e.view,!1,t.bottomContainer)),this.top.syncClasses(),this.bottom.syncClasses();let n=e.state.facet(Ni);if(n!=this.input){let t=n.filter((e=>e)),i=[],r=[],o=[],s=[];for(let n of t){let t,a=this.specs.indexOf(n);a<0?(t=n(e.view),s.push(t)):(t=this.panels[a],t.update&&t.update(e)),i.push(t),(t.top?r:o).push(t)}this.specs=t,this.panels=i,this.top.sync(r),this.bottom.sync(o);for(let e of s)e.dom.classList.add("cm-panel"),e.mount&&e.mount()}else for(let t of this.panels)t.update&&t.update(e)}destroy(){this.top.sync([]),this.bottom.sync([])}},{provide:e=>En.scrollMargins.of((t=>{let n=t.plugin(e);return n&&{top:n.top.scrollMargin(),bottom:n.bottom.scrollMargin()}}))});class Di{constructor(e,t,n){this.view=e,this.top=t,this.container=n,this.dom=void 0,this.classes="",this.panels=[],this.syncClasses()}sync(e){for(let t of this.panels)t.destroy&&e.indexOf(t)<0&&t.destroy();this.panels=e,this.syncDOM()}syncDOM(){if(0==this.panels.length)return void(this.dom&&(this.dom.remove(),this.dom=void 0));if(!this.dom){this.dom=document.createElement("div"),this.dom.className=this.top?"cm-panels cm-panels-top":"cm-panels cm-panels-bottom",this.dom.style[this.top?"top":"bottom"]="0";let e=this.container||this.view.dom;e.insertBefore(this.dom,this.top?e.firstChild:null)}let e=this.dom.firstChild;for(let t of this.panels)if(t.dom.parentNode==this.dom){for(;e!=t.dom;)e=zi(e);e=e.nextSibling}else this.dom.insertBefore(t.dom,e);for(;e;)e=zi(e)}scrollMargin(){return!this.dom||this.container?0:Math.max(0,this.top?this.dom.getBoundingClientRect().bottom-Math.max(0,this.view.scrollDOM.getBoundingClientRect().top):Math.min(innerHeight,this.view.scrollDOM.getBoundingClientRect().bottom)-this.dom.getBoundingClientRect().top)}syncClasses(){if(this.container&&this.classes!=this.view.themeClasses){for(let e of this.classes.split(" "))e&&this.container.classList.remove(e);for(let e of(this.classes=this.view.themeClasses).split(" "))e&&this.container.classList.add(e)}}}function zi(e){let t=e.nextSibling;return e.remove(),t}const Ni=i.Facet.define({enables:_i});class Li extends i.RangeValue{compare(e){return this==e||this.constructor==e.constructor&&this.eq(e)}eq(e){return!1}destroy(e){}}Li.prototype.elementClass="",Li.prototype.toDOM=void 0,Li.prototype.mapMode=i.MapMode.TrackBefore,Li.prototype.startSide=Li.prototype.endSide=-1,Li.prototype.point=!0;const ji=i.Facet.define(),Xi={class:"",renderEmptyElements:!1,elementStyle:"",markers:()=>i.RangeSet.empty,lineMarker:()=>null,lineMarkerChange:null,initialSpacer:null,updateSpacer:null,domEventHandlers:{}},Zi=i.Facet.define(),Ui=i.Facet.define({combine:e=>e.some((e=>e))});function Vi(e){let t=[Bi];return e&&!1===e.fixed&&t.push(Ui.of(!0)),t}const Bi=Ce.fromClass(class{constructor(e){this.view=e,this.prevViewport=e.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight+"px",this.gutters=e.state.facet(Zi).map((t=>new qi(e,t)));for(let e of this.gutters)this.dom.appendChild(e.dom);this.fixed=!e.state.facet(Ui),this.fixed&&(this.dom.style.position="sticky"),this.syncGutters(!1),e.scrollDOM.insertBefore(this.dom,e.contentDOM)}update(e){if(this.updateGutters(e)){let t=this.prevViewport,n=e.view.viewport,i=Math.min(t.to,n.to)-Math.max(t.from,n.from);this.syncGutters(i<.8*(n.to-n.from))}e.geometryChanged&&(this.dom.style.minHeight=this.view.contentHeight+"px"),this.view.state.facet(Ui)!=!this.fixed&&(this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":""),this.prevViewport=e.view.viewport}syncGutters(e){let n=this.dom.nextSibling;e&&this.dom.remove();let r=i.RangeSet.iter(this.view.state.facet(ji),this.view.viewport.from),o=[],s=this.gutters.map((e=>new Yi(e,this.view.viewport,-this.view.documentPadding.top)));for(let e of this.view.viewportLineBlocks){let n;if(Array.isArray(e.type)){for(let i of e.type)if(i.type==t.BlockType.Text){n=i;break}}else n=e.type==t.BlockType.Text?e:void 0;if(n){o.length&&(o=[]),Gi(r,o,e.from);for(let e of s)e.line(this.view,n,o)}}for(let e of s)e.finish();e&&this.view.scrollDOM.insertBefore(this.dom,n)}updateGutters(e){let t=e.startState.facet(Zi),n=e.state.facet(Zi),r=e.docChanged||e.heightChanged||e.viewportChanged||!i.RangeSet.eq(e.startState.facet(ji),e.state.facet(ji),e.view.viewport.from,e.view.viewport.to);if(t==n)for(let t of this.gutters)t.update(e)&&(r=!0);else{r=!0;let i=[];for(let r of n){let n=t.indexOf(r);n<0?i.push(new qi(this.view,r)):(this.gutters[n].update(e),i.push(this.gutters[n]))}for(let e of this.gutters)e.dom.remove(),i.indexOf(e)<0&&e.destroy();for(let e of i)this.dom.appendChild(e.dom);this.gutters=i}return r}destroy(){for(let e of this.gutters)e.destroy();this.dom.remove()}},{provide:e=>En.scrollMargins.of((n=>{let i=n.plugin(e);return i&&0!=i.gutters.length&&i.fixed?n.textDirection==t.Direction.LTR?{left:i.dom.offsetWidth}:{right:i.dom.offsetWidth}:null}))});function Fi(e){return Array.isArray(e)?e:[e]}function Gi(e,t,n){for(;e.value&&e.from<=n;)e.from==n&&t.push(e.value),e.next()}class Yi{constructor(e,t,n){this.gutter=e,this.height=n,this.localMarkers=[],this.i=0,this.cursor=i.RangeSet.iter(e.markers,t.from)}line(e,t,n){this.localMarkers.length&&(this.localMarkers=[]),Gi(this.cursor,this.localMarkers,t.from);let i=n.length?this.localMarkers.concat(n):this.localMarkers,r=this.gutter.config.lineMarker(e,t,i);r&&i.unshift(r);let o=this.gutter;if(0==i.length&&!o.config.renderEmptyElements)return;let s=t.top-this.height;if(this.i==o.elements.length){let n=new Hi(e,t.height,s,i);o.elements.push(n),o.dom.appendChild(n.dom)}else o.elements[this.i].update(e,t.height,s,i);this.height=t.bottom,this.i++}finish(){let e=this.gutter;for(;e.elements.length>this.i;){let t=e.elements.pop();e.dom.removeChild(t.dom),t.destroy()}}}class qi{constructor(e,t){this.view=e,this.config=t,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let n in t.domEventHandlers)this.dom.addEventListener(n,(i=>{let r=e.lineBlockAtHeight(i.clientY-e.documentTop);t.domEventHandlers[n](e,r,i)&&i.preventDefault()}));this.markers=Fi(t.markers(e)),t.initialSpacer&&(this.spacer=new Hi(e,0,0,[t.initialSpacer(e)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none")}update(e){let t=this.markers;if(this.markers=Fi(this.config.markers(e.view)),this.spacer&&this.config.updateSpacer){let t=this.config.updateSpacer(this.spacer.markers[0],e);t!=this.spacer.markers[0]&&this.spacer.update(e.view,0,0,[t])}let n=e.view.viewport;return!i.RangeSet.eq(this.markers,t,n.from,n.to)||!!this.config.lineMarkerChange&&this.config.lineMarkerChange(e)}destroy(){for(let e of this.elements)e.destroy()}}class Hi{constructor(e,t,n,i){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(e,t,n,i)}update(e,t,n,i){this.height!=t&&(this.dom.style.height=(this.height=t)+"px"),this.above!=n&&(this.dom.style.marginTop=(this.above=n)?n+"px":""),function(e,t){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].compare(t[n]))return!1;return!0}(this.markers,i)||this.setMarkers(e,i)}setMarkers(e,t){let n="cm-gutterElement",i=this.dom.firstChild;for(let r=0,o=0;;){let s=o,a=r<t.length?t[r++]:null,l=!1;if(a){let e=a.elementClass;e&&(n+=" "+e);for(let e=o;e<this.markers.length;e++)if(this.markers[e].compare(a)){s=e,l=!0;break}}else s=this.markers.length;for(;o<s;){let e=this.markers[o++];if(e.toDOM){e.destroy(i);let t=i.nextSibling;i.remove(),i=t}}if(!a)break;a.toDOM&&(l?i=i.nextSibling:this.dom.insertBefore(a.toDOM(e),i)),l&&o++}this.dom.className=n,this.markers=t}destroy(){this.setMarkers(null,[])}}const Ji=i.Facet.define(),Ki=i.Facet.define({combine:e=>i.combineConfig(e,{formatNumber:String,domEventHandlers:{}},{domEventHandlers(e,t){let n=Object.assign({},e);for(let e in t){let i=n[e],r=t[e];n[e]=i?(e,t,n)=>i(e,t,n)||r(e,t,n):r}return n}})});class er extends Li{constructor(e){super(),this.number=e}eq(e){return this.number==e.number}toDOM(){return document.createTextNode(this.number)}}function tr(e,t){return e.state.facet(Ki).formatNumber(t,e.state)}const nr=Zi.compute([Ki],(e=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers:e=>e.state.facet(Ji),lineMarker:(e,t,n)=>n.some((e=>e.toDOM))?null:new er(tr(e,e.state.doc.lineAt(t.from).number)),lineMarkerChange:e=>e.startState.facet(Ki)!=e.state.facet(Ki),initialSpacer:e=>new er(tr(e,ir(e.state.doc.lines))),updateSpacer(e,t){let n=tr(t.view,ir(t.view.state.doc.lines));return n==e.number?e:new er(n)},domEventHandlers:e.facet(Ki).domEventHandlers})));function ir(e){let t=9;for(;t<e;)t=10*t+9;return t}const rr=new class extends Li{constructor(){super(...arguments),this.elementClass="cm-activeLineGutter"}},or=ji.compute(["selection"],(e=>{let t=[],n=-1;for(let i of e.selection.ranges)if(i.empty){let r=e.doc.lineAt(i.head).from;r>n&&(n=r,t.push(rr.range(r)))}return i.RangeSet.of(t)})),sr={HeightMap:qt,HeightOracle:Vt,MeasuredHeights:Bt,QueryType:Gt,ChangedRange:De,computeOrder:qe,moveVisually:Ke};t.BidiSpan=Ge,t.BlockInfo=Ft,t.Decoration=oe,t.EditorView=En,t.GutterMarker=Li,t.MatchDecorator=ri,t.ViewPlugin=Ce,t.ViewUpdate=ze,t.WidgetType=re,t.__test=sr,t.closeHoverTooltips=Mi,t.crosshairCursor=function(e={}){let[t,n]=yi[e.key||"Alt"],i=Ce.fromClass(class{constructor(e){this.view=e,this.isDown=!1}set(e){this.isDown!=e&&(this.isDown=e,this.view.update([]))}},{eventHandlers:{keydown(e){this.set(e.keyCode==t||n(e))},keyup(e){e.keyCode!=t&&n(e)||this.set(!1)}}});return[i,En.contentAttributes.of((e=>{var t;return(null===(t=e.plugin(i))||void 0===t?void 0:t.isDown)?bi:null}))]},t.drawSelection=function(e={}){return[Vn.of(e),Fn,Yn]},t.dropCursor=function(){return[ti,ni]},t.getPanel=function(e,t){let n=e.plugin(_i),i=n?n.specs.indexOf(t):-1;return i>-1?n.panels[i]:null},t.getTooltip=function(e,t){let n=e.plugin(Qi);if(!n)return null;let i=n.manager.tooltips.indexOf(t);return i<0?null:n.manager.tooltipViews[i]},t.gutter=function(e){return[Vi(),Zi.of(Object.assign(Object.assign({},Xi),e))]},t.gutterLineClass=ji,t.gutters=Vi,t.hasHoverTooltips=function(e){return e.facet(Ci).some((e=>e))},t.highlightActiveLine=function(){return mi},t.highlightActiveLineGutter=function(){return or},t.highlightSpecialChars=function(e={}){return[ci.of(e),ui||(ui=Ce.fromClass(class{constructor(e){this.view=e,this.decorations=oe.none,this.decorationCache=Object.create(null),this.decorator=this.makeDecorator(e.state.facet(ci)),this.decorations=this.decorator.createDeco(e)}makeDecorator(e){return new ri({regexp:e.specialChars,decoration:(t,n,r)=>{let{doc:o}=n.state,s=i.codePointAt(t[0],0);if(9==s){let e=o.lineAt(r),t=n.state.tabSize,s=i.countColumn(e.text,t,r-e.from);return oe.replace({widget:new fi((t-s%t)*this.view.defaultCharacterWidth)})}return this.decorationCache[s]||(this.decorationCache[s]=oe.replace({widget:new hi(e,s)}))},boundary:e.replaceTabs?void 0:/[^]/})}update(e){let t=e.state.facet(ci);e.startState.facet(ci)!=t?(this.decorator=this.makeDecorator(t),this.decorations=this.decorator.createDeco(e.view)):this.decorations=this.decorator.updateDeco(e,this.decorations)}},{decorations:e=>e.decorations}))]},t.hoverTooltip=function(e,t={}){let n=i.StateEffect.define(),r=i.StateField.define({create:()=>null,update(e,r){if(e&&(t.hideOnChange&&(r.docChanged||r.selection)||t.hideOn&&t.hideOn(r,e)))return null;if(e&&r.docChanged){let t=r.changes.mapPos(e.pos,-1,i.MapMode.TrackDel);if(null==t)return null;let n=Object.assign(Object.create(null),e);n.pos=t,null!=e.end&&(n.end=r.changes.mapPos(e.end)),e=n}for(let t of r.effects)t.is(n)&&(e=t.value),t.is(Wi)&&(e=null);return e},provide:e=>Ci.from(e)});return[r,Ce.define((i=>new Ai(i,e,r,n,t.hoverTime||300))),Ei]},t.keymap=Nn,t.lineNumberMarkers=Ji,t.lineNumbers=function(e={}){return[Ki.of(e),Vi(),nr]},t.logException=Qe,t.panels=function(e){return e?[Ii.of(e)]:[]},t.placeholder=function(e){return Ce.fromClass(class{constructor(t){this.view=t,this.placeholder=oe.set([oe.widget({widget:new gi(e),side:1}).range(0)])}get decorations(){return this.view.state.doc.length?oe.none:this.placeholder}},{decorations:e=>e.decorations})},t.rectangularSelection=function(e){let t=(null==e?void 0:e.eventFilter)||(e=>e.altKey&&0==e.button);return En.mouseSelectionStyle.of(((e,n)=>t(n)?function(e,t){let n=vi(e,t),r=e.state.selection;return n?{update(e){if(e.docChanged){let t=e.changes.mapPos(e.startState.doc.line(n.line).from),i=e.state.doc.lineAt(t);n={line:i.number,col:n.col,off:Math.min(n.off,i.length)},r=r.map(e.changes)}},get(t,o,s){let a=vi(e,t);if(!a)return r;let l=function(e,t,n){let r=Math.min(t.line,n.line),o=Math.max(t.line,n.line),s=[];if(t.off>Oi||n.off>Oi||t.col<0||n.col<0){let a=Math.min(t.off,n.off),l=Math.max(t.off,n.off);for(let t=r;t<=o;t++){let n=e.doc.line(t);n.length<=l&&s.push(i.EditorSelection.range(n.from+a,n.to+l))}}else{let a=Math.min(t.col,n.col),l=Math.max(t.col,n.col);for(let t=r;t<=o;t++){let n=e.doc.line(t),r=i.findColumn(n.text,a,e.tabSize,!0);if(r>-1){let t=i.findColumn(n.text,l,e.tabSize);s.push(i.EditorSelection.range(n.from+r,n.from+t))}}}return s}(e.state,n,a);return l.length?s?i.EditorSelection.create(l.concat(r.ranges)):i.EditorSelection.create(l):r}}:null}(e,n):null))},t.repositionTooltips=function(e){var t;null===(t=e.plugin(Qi))||void 0===t||t.maybeMeasure()},t.runScopeHandlers=function(e,t,n){return Zn(jn(e.state),t,e,n)},t.scrollPastEnd=function(){return[di,Ae.of((e=>{var t;return(null===(t=e.plugin(di))||void 0===t?void 0:t.attrs)||null}))]},t.showPanel=Ni,t.showTooltip=Pi,t.tooltips=function(e={}){return ki.of(e)}},897:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=1024;let i=0;class r{constructor(e,t){this.from=e,this.to=t}}class o{constructor(e={}){this.id=i++,this.perNode=!!e.perNode,this.deserialize=e.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(e){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof e&&(e=l.match(e)),t=>{let n=e(t);return void 0===n?null:[this,n]}}}o.closedBy=new o({deserialize:e=>e.split(" ")}),o.openedBy=new o({deserialize:e=>e.split(" ")}),o.group=new o({deserialize:e=>e.split(" ")}),o.contextHash=new o({perNode:!0}),o.lookAhead=new o({perNode:!0}),o.mounted=new o({perNode:!0});class s{constructor(e,t,n){this.tree=e,this.overlay=t,this.parser=n}}const a=Object.create(null);class l{constructor(e,t,n,i=0){this.name=e,this.props=t,this.id=n,this.flags=i}static define(e){let t=e.props&&e.props.length?Object.create(null):a,n=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),i=new l(e.name||"",t,e.id,n);if(e.props)for(let n of e.props)if(Array.isArray(n)||(n=n(i)),n){if(n[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");t[n[0].id]=n[1]}return i}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(o.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let n in e)for(let i of n.split(" "))t[i]=e[n];return e=>{for(let n=e.prop(o.group),i=-1;i<(n?n.length:0);i++){let r=t[i<0?e.name:n[i]];if(r)return r}}}}l.none=new l("",Object.create(null),0,8);class c{constructor(e){this.types=e;for(let t=0;t<e.length;t++)if(e[t].id!=t)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...e){let t=[];for(let n of this.types){let i=null;for(let t of e){let e=t(n);e&&(i||(i=Object.assign({},n.props)),i[e[0].id]=e[1])}t.push(i?new l(n.name,i,n.id,n.flags):n)}return new c(t)}}const u=new WeakMap,h=new WeakMap;var f;t.IterMode=void 0,(f=t.IterMode||(t.IterMode={}))[f.ExcludeBuffers=1]="ExcludeBuffers",f[f.IncludeAnonymous=2]="IncludeAnonymous",f[f.IgnoreMounts=4]="IgnoreMounts",f[f.IgnoreOverlays=8]="IgnoreOverlays";class d{constructor(e,t,n,i,r){if(this.type=e,this.children=t,this.positions=n,this.length=i,this.props=null,r&&r.length){this.props=Object.create(null);for(let[e,t]of r)this.props["number"==typeof e?e:e.id]=t}}toString(){let e=this.prop(o.mounted);if(e&&!e.overlay)return e.tree.toString();let t="";for(let e of this.children){let n=e.toString();n&&(t&&(t+=","),t+=n)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(t.length?"("+t+")":""):t}cursor(e=0){return new k(this.topNode,e)}cursorAt(e,t=0,n=0){let i=u.get(this)||this.topNode,r=new k(i);return r.moveTo(e,t),u.set(this,r._tree),r}get topNode(){return new y(this,0,0,null)}resolve(e,t=0){let n=v(u.get(this)||this.topNode,e,t,!1);return u.set(this,n),n}resolveInner(e,t=0){let n=v(h.get(this)||this.topNode,e,t,!0);return h.set(this,n),n}iterate(e){let{enter:n,leave:i,from:r=0,to:o=this.length}=e;for(let s=this.cursor((e.mode||0)|t.IterMode.IncludeAnonymous);;){let e=!1;if(s.from<=o&&s.to>=r&&(s.type.isAnonymous||!1!==n(s))){if(s.firstChild())continue;e=!0}for(;e&&i&&!s.type.isAnonymous&&i(s),!s.nextSibling();){if(!s.parent())return;e=!0}}}prop(e){return e.perNode?this.props?this.props[e.id]:void 0:this.type.prop(e)}get propValues(){let e=[];if(this.props)for(let t in this.props)e.push([+t,this.props[t]]);return e}balance(e={}){return this.children.length<=8?this:P(l.none,this.children,this.positions,0,this.children.length,0,this.length,((e,t,n)=>new d(this.type,e,t,n,this.propValues)),e.makeTree||((e,t,n)=>new d(l.none,e,t,n)))}static build(e){return function(e){var t;let{buffer:i,nodeSet:r,maxBufferLength:s=n,reused:a=[],minRepeatType:l=r.types.length}=e,c=Array.isArray(i)?new p(i,i.length):i,u=r.types,h=0,f=0;function g(e,t,n,i,p){let{id:b,start:w,end:S,size:x}=c,k=f;for(;x<0;){if(c.next(),-1==x){let t=a[b];return n.push(t),void i.push(w-e)}if(-3==x)return void(h=b);if(-4==x)return void(f=b);throw new RangeError(`Unrecognized record size: ${x}`)}let Q,T,$=u[b],C=w-e;if(S-w<=s&&(T=function(e,t){let n=c.fork(),i=0,r=0,o=0,a=n.end-s,u={size:0,start:0,skip:0};e:for(let s=n.pos-e;n.pos>s;){let e=n.size;if(n.id==t&&e>=0){u.size=i,u.start=r,u.skip=o,o+=4,i+=4,n.next();continue}let c=n.pos-e;if(e<0||c<s||n.start<a)break;let h=n.id>=l?4:0,f=n.start;for(n.next();n.pos>c;){if(n.size<0){if(-3!=n.size)break e;h+=4}else n.id>=l&&(h+=4);n.next()}r=f,i+=e,o+=h}return(t<0||i==e)&&(u.size=i,u.start=r,u.skip=o),u.size>4?u:void 0}(c.pos-t,p))){let t=new Uint16Array(T.size-T.skip),n=c.pos-T.size,i=t.length;for(;c.pos>n;)i=y(T.start,t,i);Q=new m(t,S-T.start,r),C=T.start-e}else{let e=c.pos-x;c.next();let t=[],n=[],i=b>=l?b:-1,r=0,a=S;for(;c.pos>e;)i>=0&&c.id==i&&c.size>=0?(c.end<=a-s&&(O(t,n,w,r,c.end,a,i,k),r=t.length,a=c.end),c.next()):g(w,e,t,n,i);if(i>=0&&r>0&&r<t.length&&O(t,n,w,r,w,a,i,k),t.reverse(),n.reverse(),i>-1&&r>0){let e=function(e){return(t,n,i)=>{let r,s,a=0,l=t.length-1;if(l>=0&&(r=t[l])instanceof d){if(!l&&r.type==e&&r.length==i)return r;(s=r.prop(o.lookAhead))&&(a=n[l]+r.length+s)}return v(e,t,n,i,a)}}($);Q=P($,t,n,0,t.length,0,S-w,e,e)}else Q=v($,t,n,S-w,k-S)}n.push(Q),i.push(C)}function O(e,t,n,i,o,s,a,l){let c=[],u=[];for(;e.length>i;)c.push(e.pop()),u.push(t.pop()+n-o);e.push(v(r.types[a],c,u,s-o,l-s)),t.push(o-n)}function v(e,t,n,i,r=0,s){if(h){let e=[o.contextHash,h];s=s?[e].concat(s):[e]}if(r>25){let e=[o.lookAhead,r];s=s?[e].concat(s):[e]}return new d(e,t,n,i,s)}function y(e,t,n){let{id:i,start:r,end:o,size:s}=c;if(c.next(),s>=0&&i<l){let a=n;if(s>4){let i=c.pos-(s-4);for(;c.pos>i;)n=y(e,t,n)}t[--n]=a,t[--n]=o-e,t[--n]=r-e,t[--n]=i}else-3==s?h=i:-4==s&&(f=i);return n}let b=[],w=[];for(;c.pos>0;)g(e.start||0,e.bufferStart||0,b,w,-1);let S=null!==(t=e.length)&&void 0!==t?t:b.length?w[0]+b[0].length:0;return new d(u[e.topID],b.reverse(),w.reverse(),S)}(e)}}d.empty=new d(l.none,[],[],0);class p{constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new p(this.buffer,this.index)}}class m{constructor(e,t,n){this.buffer=e,this.length=t,this.set=n}get type(){return l.none}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],n=this.buffer[e+3],i=this.set.types[t],r=i.name;if(/\W/.test(r)&&!i.isError&&(r=JSON.stringify(r)),n==(e+=4))return r;let o=[];for(;e<n;)o.push(this.childString(e)),e=this.buffer[e+3];return r+"("+o.join(",")+")"}findChild(e,t,n,i,r){let{buffer:o}=this,s=-1;for(let a=e;a!=t&&!(g(r,i,o[a+1],o[a+2])&&(s=a,n>0));a=o[a+3]);return s}slice(e,t,n,i){let r=this.buffer,o=new Uint16Array(t-e);for(let i=e,s=0;i<t;)o[s++]=r[i++],o[s++]=r[i++]-n,o[s++]=r[i++]-n,o[s++]=r[i++]-e;return new m(o,i-n,this.set)}}function g(e,t,n,i){switch(e){case-2:return n<t;case-1:return i>=t&&n<t;case 0:return n<t&&i>t;case 1:return n<=t&&i>t;case 2:return i>t;case 4:return!0}}function O(e,t){let n=e.childBefore(t);for(;n;){let t=n.lastChild;if(!t||t.to!=n.to)break;t.type.isError&&t.from==t.to?(e=n,n=t.prevSibling):n=t}return e}function v(e,n,i,r){for(var o;e.from==e.to||(i<1?e.from>=n:e.from>n)||(i>-1?e.to<=n:e.to<n);){let t=!r&&e instanceof y&&e.index<0?null:e.parent;if(!t)return e;e=t}let s=r?0:t.IterMode.IgnoreOverlays;if(r)for(let t=e,r=t.parent;r;t=r,r=t.parent)t instanceof y&&t.index<0&&(null===(o=r.enter(n,i,s))||void 0===o?void 0:o.from)!=t.from&&(e=r);for(;;){let t=e.enter(n,i,s);if(!t)return e;e=t}}class y{constructor(e,t,n,i){this._tree=e,this.from=t,this.index=n,this._parent=i}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(e,n,i,r,s=0){for(let a=this;;){for(let{children:l,positions:c}=a._tree,u=n>0?l.length:-1;e!=u;e+=n){let u=l[e],h=c[e]+a.from;if(g(r,i,h,h+u.length))if(u instanceof m){if(s&t.IterMode.ExcludeBuffers)continue;let o=u.findChild(0,u.buffer.length,n,i-h,r);if(o>-1)return new x(new S(a,u,e,h),null,o)}else if(s&t.IterMode.IncludeAnonymous||!u.type.isAnonymous||Q(u)){let l;if(!(s&t.IterMode.IgnoreMounts)&&u.props&&(l=u.prop(o.mounted))&&!l.overlay)return new y(l.tree,h,e,a);let c=new y(u,h,e,a);return s&t.IterMode.IncludeAnonymous||!c.type.isAnonymous?c:c.nextChild(n<0?u.children.length-1:0,n,i,r)}}if(s&t.IterMode.IncludeAnonymous||!a.type.isAnonymous)return null;if(e=a.index>=0?a.index+n:n<0?-1:a._parent._tree.children.length,a=a._parent,!a)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(e){return this.nextChild(0,1,e,2)}childBefore(e){return this.nextChild(this._tree.children.length-1,-1,e,-2)}enter(e,n,i=0){let r;if(!(i&t.IterMode.IgnoreOverlays)&&(r=this._tree.prop(o.mounted))&&r.overlay){let t=e-this.from;for(let{from:e,to:i}of r.overlay)if((n>0?e<=t:e<t)&&(n<0?i>=t:i>t))return new y(r.tree,r.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,e,n,i)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}cursor(e=0){return new k(this,e)}get tree(){return this._tree}toTree(){return this._tree}resolve(e,t=0){return v(this,e,t,!1)}resolveInner(e,t=0){return v(this,e,t,!0)}enterUnfinishedNodesBefore(e){return O(this,e)}getChild(e,t=null,n=null){let i=b(this,e,t,n);return i.length?i[0]:null}getChildren(e,t=null,n=null){return b(this,e,t,n)}toString(){return this._tree.toString()}get node(){return this}matchContext(e){return w(this,e)}}function b(e,t,n,i){let r=e.cursor(),o=[];if(!r.firstChild())return o;if(null!=n)for(;!r.type.is(n);)if(!r.nextSibling())return o;for(;;){if(null!=i&&r.type.is(i))return o;if(r.type.is(t)&&o.push(r.node),!r.nextSibling())return null==i?o:[]}}function w(e,t,n=t.length-1){for(let i=e.parent;n>=0;i=i.parent){if(!i)return!1;if(!i.type.isAnonymous){if(t[n]&&t[n]!=i.name)return!1;n--}}return!0}class S{constructor(e,t,n,i){this.parent=e,this.buffer=t,this.index=n,this.start=i}}class x{constructor(e,t,n){this.context=e,this._parent=t,this.index=n,this.type=e.buffer.set.types[e.buffer.buffer[n]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(e,t,n){let{buffer:i}=this.context,r=i.findChild(this.index+4,i.buffer[this.index+3],e,t-this.context.start,n);return r<0?null:new x(this.context,this,r)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(e){return this.child(1,e,2)}childBefore(e){return this.child(-1,e,-2)}enter(e,n,i=0){if(i&t.IterMode.ExcludeBuffers)return null;let{buffer:r}=this.context,o=r.findChild(this.index+4,r.buffer[this.index+3],n>0?1:-1,e-this.context.start,n);return o<0?null:new x(this.context,this,o)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,0,4)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new x(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new x(this.context,this._parent,e.findChild(t,this.index,-1,0,4))}cursor(e=0){return new k(this,e)}get tree(){return null}toTree(){let e=[],t=[],{buffer:n}=this.context,i=this.index+4,r=n.buffer[this.index+3];if(r>i){let o=n.buffer[this.index+1],s=n.buffer[this.index+2];e.push(n.slice(i,r,o,s)),t.push(0)}return new d(this.type,e,t,this.to-this.from)}resolve(e,t=0){return v(this,e,t,!1)}resolveInner(e,t=0){return v(this,e,t,!0)}enterUnfinishedNodesBefore(e){return O(this,e)}toString(){return this.context.buffer.childString(this.index)}getChild(e,t=null,n=null){let i=b(this,e,t,n);return i.length?i[0]:null}getChildren(e,t=null,n=null){return b(this,e,t,n)}get node(){return this}matchContext(e){return w(this,e)}}class k{constructor(e,t=0){if(this.mode=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof y)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}get name(){return this.type.name}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:n,buffer:i}=this.buffer;return this.type=t||i.set.types[i.buffer[e]],this.from=n+i.buffer[e+1],this.to=n+i.buffer[e+2],!0}yield(e){return!!e&&(e instanceof y?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(e,t,n){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree._tree.children.length-1:0,e,t,n,this.mode));let{buffer:i}=this.buffer,r=i.findChild(this.index+4,i.buffer[this.index+3],e,t-this.buffer.start,n);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(e){return this.enterChild(1,e,2)}childBefore(e){return this.enterChild(-1,e,-2)}enter(e,n,i=this.mode){return this.buffer?!(i&t.IterMode.ExcludeBuffers)&&this.enterChild(1,e,n):this.yield(this._tree.enter(e,n,i))}parent(){if(!this.buffer)return this.yieldNode(this.mode&t.IterMode.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.mode&t.IterMode.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+e,e,0,4,this.mode));let{buffer:t}=this.buffer,n=this.stack.length-1;if(e<0){let e=n<0?0:this.stack[n]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,0,4))}else{let e=t.buffer[this.index+3];if(e<(n<0?t.buffer.length:t.buffer[this.stack[n]+3]))return this.yieldBuf(e)}return n<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let n,i,{buffer:r}=this;if(r){if(e>0){if(this.index<r.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(r.buffer.buffer[e+3]<this.index)return!1;({index:n,parent:i}=r)}else({index:n,_parent:i}=this._tree);for(;i;({index:n,_parent:i}=i))if(n>-1)for(let r=n+e,o=e<0?-1:i._tree.children.length;r!=o;r+=e){let e=i._tree.children[r];if(this.mode&t.IterMode.IncludeAnonymous||e instanceof m||!e.type.isAnonymous||Q(e))return!1}return!0}move(e,t){if(t&&this.enterChild(e,0,4))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(e=!0){return this.move(1,e)}prev(e=!0){return this.move(-1,e)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;this.enterChild(1,e,t););return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,n=0;if(e&&e.context==this.buffer)e:for(let i=this.index,r=this.stack.length;r>=0;){for(let o=e;o;o=o._parent)if(o.index==i){if(i==this.index)return o;t=o,n=r+1;break e}i=this.stack[--r]}for(let e=n;e<this.stack.length;e++)t=new x(this.buffer,t,this.stack[e]);return this.bufferNode=new x(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(e,t){for(let n=0;;){let i=!1;if(this.type.isAnonymous||!1!==e(this)){if(this.firstChild()){n++;continue}this.type.isAnonymous||(i=!0)}for(;i&&t&&t(this),i=this.type.isAnonymous,!this.nextSibling();){if(!n)return;this.parent(),n--,i=!0}}}matchContext(e){if(!this.buffer)return w(this.node,e);let{buffer:t}=this.buffer,{types:n}=t.set;for(let i=e.length-1,r=this.stack.length-1;i>=0;r--){if(r<0)return w(this.node,e,i);let o=n[t.buffer[this.stack[r]]];if(!o.isAnonymous){if(e[i]&&e[i]!=o.name)return!1;i--}}return!0}}function Q(e){return e.children.some((e=>e instanceof m||!e.type.isAnonymous||Q(e)))}const T=new WeakMap;function $(e,t){if(!e.isAnonymous||t instanceof m||t.type!=e)return 1;let n=T.get(t);if(null==n){n=1;for(let i of t.children){if(i.type!=e||!(i instanceof d)){n=1;break}n+=$(e,i)}T.set(t,n)}return n}function P(e,t,n,i,r,o,s,a,l){let c=0;for(let n=i;n<r;n++)c+=$(e,t[n]);let u=Math.ceil(1.5*c/8),h=[],f=[];return function t(n,i,r,s,a){for(let c=r;c<s;){let r=c,d=i[c],p=$(e,n[c]);for(c++;c<s;c++){let t=$(e,n[c]);if(p+t>=u)break;p+=t}if(c==r+1){if(p>u){let e=n[r];t(e.children,e.positions,0,e.children.length,i[r]+a);continue}h.push(n[r])}else{let t=i[c-1]+n[c-1].length-d;h.push(P(e,n,i,r,c,d,t,null,l))}f.push(d+a-o)}}(t,n,i,r,0),(a||l)(h,f,s)}class C{constructor(e,t,n,i,r=!1,o=!1){this.from=e,this.to=t,this.tree=n,this.offset=i,this.open=(r?1:0)|(o?2:0)}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static addTree(e,t=[],n=!1){let i=[new C(0,e.length,e,0,!1,n)];for(let n of t)n.to>e.length&&i.push(n);return i}static applyChanges(e,t,n=128){if(!t.length)return e;let i=[],r=1,o=e.length?e[0]:null;for(let s=0,a=0,l=0;;s++){let c=s<t.length?t[s]:null,u=c?c.fromA:1e9;if(u-a>=n)for(;o&&o.from<u;){let t=o;if(a>=t.from||u<=t.to||l){let e=Math.max(t.from,a)-l,n=Math.min(t.to,u)-l;t=e>=n?null:new C(e,n,t.tree,t.offset+l,s>0,!!c)}if(t&&i.push(t),o.to>u)break;o=r<e.length?e[r++]:null}if(!c)break;a=c.toA,l=c.toA-c.toB}return i}}class R{constructor(e){this.string=e}get length(){return this.string.length}chunk(e){return this.string.slice(e)}get lineChunks(){return!1}read(e,t){return this.string.slice(e,t)}}class E{constructor(e,t,n,i,r){this.parser=e,this.parse=t,this.overlay=n,this.target=i,this.ranges=r}}class A{constructor(e,t,n,i,r,o,s){this.parser=e,this.predicate=t,this.mounts=n,this.index=i,this.start=r,this.target=o,this.prev=s,this.depth=0,this.ranges=[]}}const W=new o({perNode:!0});class M{constructor(e,t,n,i,r){this.nest=t,this.input=n,this.fragments=i,this.ranges=r,this.inner=[],this.innerDone=0,this.baseTree=null,this.stoppedAt=null,this.baseParse=e}advance(){if(this.baseParse){let e=this.baseParse.advance();if(!e)return null;if(this.baseParse=null,this.baseTree=e,this.startInner(),null!=this.stoppedAt)for(let e of this.inner)e.parse.stopAt(this.stoppedAt)}if(this.innerDone==this.inner.length){let e=this.baseTree;return null!=this.stoppedAt&&(e=new d(e.type,e.children,e.positions,e.length,e.propValues.concat([[W,this.stoppedAt]]))),e}let e=this.inner[this.innerDone],t=e.parse.advance();if(t){this.innerDone++;let n=Object.assign(Object.create(null),e.target.props);n[o.mounted.id]=new s(t,e.overlay,e.parser),e.target.props=n}return null}get parsedPos(){if(this.baseParse)return 0;let e=this.input.length;for(let t=this.innerDone;t<this.inner.length;t++)this.inner[t].ranges[0].from<e&&(e=Math.min(e,this.inner[t].parse.parsedPos));return e}stopAt(e){if(this.stoppedAt=e,this.baseParse)this.baseParse.stopAt(e);else for(let t=this.innerDone;t<this.inner.length;t++)this.inner[t].parse.stopAt(e)}startInner(){let e=new N(this.fragments),n=null,i=null,o=new k(new y(this.baseTree,this.ranges[0].from,0,null),t.IterMode.IncludeAnonymous|t.IterMode.IgnoreMounts);e:for(let t,s;null==this.stoppedAt||o.from<this.stoppedAt;){let a,l=!0;if(e.hasNode(o)){if(n){let e=n.mounts.find((e=>e.frag.from<=o.from&&e.frag.to>=o.to&&e.mount.overlay));if(e)for(let t of e.mount.overlay){let i=t.from+e.pos,r=t.to+e.pos;i>=o.from&&r<=o.to&&!n.ranges.some((e=>e.from<r&&e.to>i))&&n.ranges.push({from:i,to:r})}}l=!1}else if(i&&(s=I(i.ranges,o.from,o.to)))l=2!=s;else if(!o.type.isAnonymous&&o.from<o.to&&(t=this.nest(o,this.input))){o.tree||D(o);let s=e.findMounts(o.from,t.parser);if("function"==typeof t.overlay)n=new A(t.parser,t.overlay,s,this.inner.length,o.from,o.tree,n);else{let e=L(this.ranges,t.overlay||[new r(o.from,o.to)]);e.length&&this.inner.push(new E(t.parser,t.parser.startParse(this.input,X(s,e),e),t.overlay?t.overlay.map((e=>new r(e.from-o.from,e.to-o.from))):null,o.tree,e)),t.overlay?e.length&&(i={ranges:e,depth:0,prev:i}):l=!1}}else n&&(a=n.predicate(o))&&(!0===a&&(a=new r(o.from,o.to)),a.from<a.to&&n.ranges.push(a));if(l&&o.firstChild())n&&n.depth++,i&&i.depth++;else for(;!o.nextSibling();){if(!o.parent())break e;if(n&&!--n.depth){let e=L(this.ranges,n.ranges);e.length&&this.inner.splice(n.index,0,new E(n.parser,n.parser.startParse(this.input,X(n.mounts,e),e),n.ranges.map((e=>new r(e.from-n.start,e.to-n.start))),n.target,e)),n=n.prev}i&&!--i.depth&&(i=i.prev)}}}}function I(e,t,n){for(let i of e){if(i.from>=n)break;if(i.to>t)return i.from<=t&&i.to>=n?2:1}return 0}function _(e,t,n,i,r,o){if(t<n){let s=e.buffer[t+1],a=e.buffer[n-2];i.push(e.slice(t,n,s,a)),r.push(s-o)}}function D(e){let{node:t}=e,n=0;do{e.parent(),n++}while(!e.tree);let i=0,r=e.tree,o=0;for(;o=r.positions[i]+e.from,!(o<=t.from&&o+r.children[i].length>=t.to);i++);let s=r.children[i],a=s.buffer;r.children[i]=function e(n,i,r,l,c){let u=n;for(;a[u+2]+o<=t.from;)u=a[u+3];let h=[],f=[];_(s,n,u,h,f,l);let p=a[u+1],m=a[u+2],g=p+o==t.from&&m+o==t.to&&a[u]==t.type.id;return h.push(g?t.toTree():e(u+4,a[u+3],s.set.types[a[u]],p,m-p)),f.push(p-l),_(s,a[u+3],i,h,f,l),new d(r,h,f,c)}(0,a.length,l.none,0,s.length);for(let i=0;i<=n;i++)e.childAfter(t.from)}class z{constructor(e,n){this.offset=n,this.done=!1,this.cursor=e.cursor(t.IterMode.IncludeAnonymous|t.IterMode.IgnoreMounts)}moveTo(e){let{cursor:n}=this,i=e-this.offset;for(;!this.done&&n.from<i;)n.to>=e&&n.enter(i,1,t.IterMode.IgnoreOverlays|t.IterMode.ExcludeBuffers)||n.next(!1)||(this.done=!0)}hasNode(e){if(this.moveTo(e.from),!this.done&&this.cursor.from+this.offset==e.from&&this.cursor.tree)for(let t=this.cursor.tree;;){if(t==e.tree)return!0;if(!(t.children.length&&0==t.positions[0]&&t.children[0]instanceof d))break;t=t.children[0]}return!1}}class N{constructor(e){var t;if(this.fragments=e,this.curTo=0,this.fragI=0,e.length){let n=this.curFrag=e[0];this.curTo=null!==(t=n.tree.prop(W))&&void 0!==t?t:n.to,this.inner=new z(n.tree,-n.offset)}else this.curFrag=this.inner=null}hasNode(e){for(;this.curFrag&&e.from>=this.curTo;)this.nextFrag();return this.curFrag&&this.curFrag.from<=e.from&&this.curTo>=e.to&&this.inner.hasNode(e)}nextFrag(){var e;if(this.fragI++,this.fragI==this.fragments.length)this.curFrag=this.inner=null;else{let t=this.curFrag=this.fragments[this.fragI];this.curTo=null!==(e=t.tree.prop(W))&&void 0!==e?e:t.to,this.inner=new z(t.tree,-t.offset)}}findMounts(e,t){var n;let i=[];if(this.inner){this.inner.cursor.moveTo(e,1);for(let e=this.inner.cursor.node;e;e=e.parent){let r=null===(n=e.tree)||void 0===n?void 0:n.prop(o.mounted);if(r&&r.parser==t)for(let t=this.fragI;t<this.fragments.length;t++){let n=this.fragments[t];if(n.from>=e.to)break;n.tree==this.curFrag.tree&&i.push({frag:n,pos:e.from-n.offset,mount:r})}}}return i}}function L(e,t){let n=null,i=t;for(let o=1,s=0;o<e.length;o++){let a=e[o-1].to,l=e[o].from;for(;s<i.length;s++){let e=i[s];if(e.from>=l)break;e.to<=a||(n||(i=n=t.slice()),e.from<a?(n[s]=new r(e.from,a),e.to>l&&n.splice(s+1,0,new r(l,e.to))):e.to>l?n[s--]=new r(l,e.to):n.splice(s--,1))}}return i}function j(e,t,n,i){let o=0,s=0,a=!1,l=!1,c=-1e9,u=[];for(;;){let h=o==e.length?1e9:a?e[o].to:e[o].from,f=s==t.length?1e9:l?t[s].to:t[s].from;if(a!=l){let e=Math.max(c,n),t=Math.min(h,f,i);e<t&&u.push(new r(e,t))}if(c=Math.min(h,f),1e9==c)break;h==c&&(a?(a=!1,o++):a=!0),f==c&&(l?(l=!1,s++):l=!0)}return u}function X(e,t){let n=[];for(let{pos:i,mount:o,frag:s}of e){let e=i+(o.overlay?o.overlay[0].from:0),a=e+o.tree.length,l=Math.max(s.from,e),c=Math.min(s.to,a);if(o.overlay){let a=j(t,o.overlay.map((e=>new r(e.from+i,e.to+i))),l,c);for(let t=0,i=l;;t++){let r=t==a.length,l=r?c:a[t].from;if(l>i&&n.push(new C(i,l,o.tree,-e,s.from>=i,s.to<=l)),r)break;i=a[t].to}}else n.push(new C(l,c,o.tree,-e,s.from>=e,s.to<=a))}return n}t.DefaultBufferLength=n,t.MountedTree=s,t.NodeProp=o,t.NodeSet=c,t.NodeType=l,t.NodeWeakMap=class{constructor(){this.map=new WeakMap}setBuffer(e,t,n){let i=this.map.get(e);i||this.map.set(e,i=new Map),i.set(t,n)}getBuffer(e,t){let n=this.map.get(e);return n&&n.get(t)}set(e,t){e instanceof x?this.setBuffer(e.context.buffer,e.index,t):e instanceof y&&this.map.set(e.tree,t)}get(e){return e instanceof x?this.getBuffer(e.context.buffer,e.index):e instanceof y?this.map.get(e.tree):void 0}cursorSet(e,t){e.buffer?this.setBuffer(e.buffer.buffer,e.index,t):this.map.set(e.tree,t)}cursorGet(e){return e.buffer?this.getBuffer(e.buffer.buffer,e.index):this.map.get(e.tree)}},t.Parser=class{startParse(e,t,n){return"string"==typeof e&&(e=new R(e)),n=n?n.length?n.map((e=>new r(e.from,e.to))):[new r(0,0)]:[new r(0,e.length)],this.createParse(e,t||[],n)}parse(e,t,n){let i=this.startParse(e,t,n);for(;;){let e=i.advance();if(e)return e}}},t.Tree=d,t.TreeBuffer=m,t.TreeCursor=k,t.TreeFragment=C,t.parseMixed=function(e){return(t,n,i,r)=>new M(t,e,n,i,r)}},48:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(897);let r=0;class o{constructor(e,t,n){this.set=e,this.base=t,this.modified=n,this.id=r++}static define(e){if(null==e?void 0:e.base)throw new Error("Can not derive from a modified tag");let t=new o([],null,[]);if(t.set.push(t),e)for(let n of e.set)t.set.push(n);return t}static defineModifier(){let e=new a;return t=>t.modified.indexOf(e)>-1?t:a.get(t.base||t,t.modified.concat(e).sort(((e,t)=>e.id-t.id)))}}let s=0;class a{constructor(){this.instances=[],this.id=s++}static get(e,t){if(!t.length)return e;let n=t[0].instances.find((n=>{return n.base==e&&(i=t,r=n.modified,i.length==r.length&&i.every(((e,t)=>e==r[t])));var i,r}));if(n)return n;let i=[],r=new o(i,e,t);for(let e of t)e.instances.push(r);let s=l(t);for(let t of e.set)for(let e of s)i.push(a.get(t,e));return r}}function l(e){let t=[e];for(let n=0;n<e.length;n++)for(let i of l(e.slice(0,n).concat(e.slice(n+1))))t.push(i);return t}const c=new i.NodeProp;class u{constructor(e,t,n,i){this.tags=e,this.mode=t,this.context=n,this.next=i}sort(e){return!e||e.depth<this.depth?(this.next=e,this):(e.next=this.sort(e.next),e)}get depth(){return this.context?this.context.length:0}}function h(e,t){let n=Object.create(null);for(let t of e)if(Array.isArray(t.tag))for(let e of t.tag)n[e.id]=t.class;else n[t.tag.id]=t.class;let{scope:i,all:r=null}=t||{};return{style:e=>{let t=r;for(let i of e)for(let e of i.set){let i=n[e.id];if(i){t=t?t+" "+i:i;break}}return t},scope:i}}function f(e,t){let n=null;for(let i of e){let e=i.style(t);e&&(n=n?n+" "+e:e)}return n}class d{constructor(e,t,n){this.at=e,this.highlighters=t,this.span=n,this.class=""}startSpan(e,t){t!=this.class&&(this.flush(e),e>this.at&&(this.at=e),this.class=t)}flush(e){e>this.at&&this.class&&this.span(this.at,e,this.class)}highlightRange(e,t,n,r,o){let{type:s,from:a,to:l}=e;if(a>=n||l<=t)return;s.isTop&&(o=this.highlighters.filter((e=>!e.scope||e.scope(s))));let u=r,h=s.prop(c),d=!1;for(;h;){if(!h.context||e.matchContext(h.context)){let e=f(o,h.tags);e&&(u&&(u+=" "),u+=e,1==h.mode?r+=(r?" ":"")+e:0==h.mode&&(d=!0));break}h=h.next}if(this.startSpan(e.from,u),d)return;let p=e.tree&&e.tree.prop(i.NodeProp.mounted);if(p&&p.overlay){let i=e.node.enter(p.overlay[0].from+a,1),s=this.highlighters.filter((e=>!e.scope||e.scope(p.tree.type))),c=e.firstChild();for(let h=0,f=a;;h++){let d=h<p.overlay.length?p.overlay[h]:null,m=d?d.from+a:l,g=Math.max(t,f),O=Math.min(n,m);if(g<O&&c)for(;e.from<O&&(this.highlightRange(e,g,O,r,o),this.startSpan(Math.min(n,e.to),u),!(e.to>=m)&&e.nextSibling()););if(!d||m>n)break;f=d.to+a,f>t&&(this.highlightRange(i.cursor(),Math.max(t,d.from+a),Math.min(n,f),r,s),this.startSpan(f,u))}c&&e.parent()}else if(e.firstChild()){do{if(!(e.to<=t)){if(e.from>=n)break;this.highlightRange(e,t,n,r,o),this.startSpan(Math.min(n,e.to),u)}}while(e.nextSibling());e.parent()}}}const p=o.define,m=p(),g=p(),O=p(g),v=p(g),y=p(),b=p(y),w=p(y),S=p(),x=p(S),k=p(),Q=p(),T=p(),$=p(T),P=p(),C={comment:m,lineComment:p(m),blockComment:p(m),docComment:p(m),name:g,variableName:p(g),typeName:O,tagName:p(O),propertyName:v,attributeName:p(v),className:p(g),labelName:p(g),namespace:p(g),macroName:p(g),literal:y,string:b,docString:p(b),character:p(b),attributeValue:p(b),number:w,integer:p(w),float:p(w),bool:p(y),regexp:p(y),escape:p(y),color:p(y),url:p(y),keyword:k,self:p(k),null:p(k),atom:p(k),unit:p(k),modifier:p(k),operatorKeyword:p(k),controlKeyword:p(k),definitionKeyword:p(k),moduleKeyword:p(k),operator:Q,derefOperator:p(Q),arithmeticOperator:p(Q),logicOperator:p(Q),bitwiseOperator:p(Q),compareOperator:p(Q),updateOperator:p(Q),definitionOperator:p(Q),typeOperator:p(Q),controlOperator:p(Q),punctuation:T,separator:p(T),bracket:$,angleBracket:p($),squareBracket:p($),paren:p($),brace:p($),content:S,heading:x,heading1:p(x),heading2:p(x),heading3:p(x),heading4:p(x),heading5:p(x),heading6:p(x),contentSeparator:p(S),list:p(S),quote:p(S),emphasis:p(S),strong:p(S),link:p(S),monospace:p(S),strikethrough:p(S),inserted:p(),deleted:p(),changed:p(),invalid:p(),meta:P,documentMeta:p(P),annotation:p(P),processingInstruction:p(P),definition:o.defineModifier(),constant:o.defineModifier(),function:o.defineModifier(),standard:o.defineModifier(),local:o.defineModifier(),special:o.defineModifier()},R=h([{tag:C.link,class:"tok-link"},{tag:C.heading,class:"tok-heading"},{tag:C.emphasis,class:"tok-emphasis"},{tag:C.strong,class:"tok-strong"},{tag:C.keyword,class:"tok-keyword"},{tag:C.atom,class:"tok-atom"},{tag:C.bool,class:"tok-bool"},{tag:C.url,class:"tok-url"},{tag:C.labelName,class:"tok-labelName"},{tag:C.inserted,class:"tok-inserted"},{tag:C.deleted,class:"tok-deleted"},{tag:C.literal,class:"tok-literal"},{tag:C.string,class:"tok-string"},{tag:C.number,class:"tok-number"},{tag:[C.regexp,C.escape,C.special(C.string)],class:"tok-string2"},{tag:C.variableName,class:"tok-variableName"},{tag:C.local(C.variableName),class:"tok-variableName tok-local"},{tag:C.definition(C.variableName),class:"tok-variableName tok-definition"},{tag:C.special(C.variableName),class:"tok-variableName2"},{tag:C.definition(C.propertyName),class:"tok-propertyName tok-definition"},{tag:C.typeName,class:"tok-typeName"},{tag:C.namespace,class:"tok-namespace"},{tag:C.className,class:"tok-className"},{tag:C.macroName,class:"tok-macroName"},{tag:C.propertyName,class:"tok-propertyName"},{tag:C.operator,class:"tok-operator"},{tag:C.comment,class:"tok-comment"},{tag:C.meta,class:"tok-meta"},{tag:C.invalid,class:"tok-invalid"},{tag:C.punctuation,class:"tok-punctuation"}]);t.Tag=o,t.classHighlighter=R,t.highlightTree=function(e,t,n,i=0,r=e.length){let o=new d(i,Array.isArray(t)?t:[t],n);o.highlightRange(e.cursor(),i,r,"",o.highlighters),o.flush(r)},t.styleTags=function(e){let t=Object.create(null);for(let n in e){let i=e[n];Array.isArray(i)||(i=[i]);for(let e of n.split(" "))if(e){let n=[],r=2,o=e;for(let t=0;;){if("..."==o&&t>0&&t+3==e.length){r=1;break}let i=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(o);if(!i)throw new RangeError("Invalid path: "+e);if(n.push("*"==i[0]?"":'"'==i[0][0]?JSON.parse(i[0]):i[0]),t+=i[0].length,t==e.length)break;let s=e[t++];if(t==e.length&&"!"==s){r=0;break}if("/"!=s)throw new RangeError("Invalid path: "+e);o=e.slice(t)}let s=n.length-1,a=n[s];if(!a)throw new RangeError("Invalid path: "+e);let l=new u(i,r,s>0?n.slice(0,s):null);t[a]=l.sort(t[a])}}return c.add(t)},t.tagHighlighter=h,t.tags=C},88:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(90),r=n(48);const o=282,s=[9,10,11,12,13,32,133,160,5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288],a=new i.ContextTracker({start:!1,shift:(e,t)=>5==t||6==t||286==t?e:287==t,strict:!1}),l=new i.ExternalTokenizer(((e,t)=>{let{next:n}=e;(125==n||-1==n||t.context)&&t.canShift(284)&&e.acceptToken(284)}),{contextual:!0,fallback:!0}),c=new i.ExternalTokenizer(((e,t)=>{let n,{next:i}=e;s.indexOf(i)>-1||(47!=i||47!=(n=e.peek(1))&&42!=n)&&125!=i&&59!=i&&-1!=i&&!t.context&&t.canShift(281)&&e.acceptToken(281)}),{contextual:!0}),u=new i.ExternalTokenizer(((e,t)=>{let{next:n}=e;if((43==n||45==n)&&(e.advance(),n==e.next)){e.advance();let n=!t.context&&t.canShift(1);e.acceptToken(n?1:2)}}),{contextual:!0}),h=new i.ExternalTokenizer((e=>{for(let t=!1,n=0;;n++){let{next:i}=e;if(i<0){n&&e.acceptToken(o);break}if(96==i){n?e.acceptToken(o):e.acceptToken(283,1);break}if(123==i&&t){1==n?e.acceptToken(3,1):e.acceptToken(o,-1);break}if(10==i&&n){e.advance(),e.acceptToken(o);break}92==i&&e.advance(),t=36==i,e.advance()}})),f=r.styleTags({"get set async static":r.tags.modifier,"for while do if else switch try catch finally return throw break continue default case":r.tags.controlKeyword,"in of await yield void typeof delete instanceof":r.tags.operatorKeyword,"let var const function class extends":r.tags.definitionKeyword,"import export from":r.tags.moduleKeyword,"with debugger as new":r.tags.keyword,TemplateString:r.tags.special(r.tags.string),Super:r.tags.atom,BooleanLiteral:r.tags.bool,this:r.tags.self,null:r.tags.null,Star:r.tags.modifier,VariableName:r.tags.variableName,"CallExpression/VariableName TaggedTemplateExpression/VariableName":r.tags.function(r.tags.variableName),VariableDefinition:r.tags.definition(r.tags.variableName),Label:r.tags.labelName,PropertyName:r.tags.propertyName,PrivatePropertyName:r.tags.special(r.tags.propertyName),"CallExpression/MemberExpression/PropertyName":r.tags.function(r.tags.propertyName),"FunctionDeclaration/VariableDefinition":r.tags.function(r.tags.definition(r.tags.variableName)),"ClassDeclaration/VariableDefinition":r.tags.definition(r.tags.className),PropertyDefinition:r.tags.definition(r.tags.propertyName),PrivatePropertyDefinition:r.tags.definition(r.tags.special(r.tags.propertyName)),UpdateOp:r.tags.updateOperator,LineComment:r.tags.lineComment,BlockComment:r.tags.blockComment,Number:r.tags.number,String:r.tags.string,ArithOp:r.tags.arithmeticOperator,LogicOp:r.tags.logicOperator,BitOp:r.tags.bitwiseOperator,CompareOp:r.tags.compareOperator,RegExp:r.tags.regexp,Equals:r.tags.definitionOperator,"Arrow : Spread":r.tags.punctuation,"( )":r.tags.paren,"[ ]":r.tags.squareBracket,"{ }":r.tags.brace,"InterpolationStart InterpolationEnd":r.tags.special(r.tags.brace),".":r.tags.derefOperator,", ;":r.tags.separator,TypeName:r.tags.typeName,TypeDefinition:r.tags.definition(r.tags.typeName),"type enum interface implements namespace module declare":r.tags.definitionKeyword,"abstract global Privacy readonly override":r.tags.modifier,"is keyof unique infer":r.tags.operatorKeyword,JSXAttributeValue:r.tags.attributeValue,JSXText:r.tags.content,"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag":r.tags.angleBracket,"JSXIdentifier JSXNameSpacedName":r.tags.tagName,"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName":r.tags.attributeName}),d={__proto__:null,export:18,as:23,from:29,default:32,async:37,function:38,this:48,true:56,false:56,void:66,typeof:70,null:86,super:88,new:122,await:139,yield:141,delete:142,class:152,extends:154,public:197,private:197,protected:197,readonly:199,instanceof:220,in:222,const:224,import:256,keyof:307,unique:311,infer:317,is:351,abstract:371,implements:373,type:375,let:378,var:380,interface:387,enum:391,namespace:397,module:399,declare:403,global:407,for:428,of:437,while:440,with:444,do:448,if:452,else:454,switch:458,case:464,try:470,catch:474,finally:478,return:482,throw:486,break:490,continue:494,debugger:498},p={__proto__:null,async:109,get:111,set:113,public:161,private:161,protected:161,static:163,abstract:165,override:167,readonly:173,new:355},m={__proto__:null,"<":129},g=i.LRParser.deserialize({version:14,states:"$4|O`QYOOO'QQ$IfO'#ChO'XOSO'#DVO)dQYO'#D]O)tQYO'#DhO){QYO'#DrO-xQYO'#DxOOQO'#E]'#E]O.]QWO'#E[O.bQWO'#E[OOQ$IU'#Ef'#EfO0aQ$IfO'#ItO2wQ$IfO'#IuO3eQWO'#EzO3jQpO'#FaOOQ$IU'#FS'#FSO3rO!bO'#FSO4QQWO'#FhO5_QWO'#FgOOQ$IU'#Iu'#IuOOQ$IS'#It'#ItOOQQ'#J^'#J^O5dQWO'#HpO5iQ$I[O'#HqOOQQ'#Ih'#IhOOQQ'#Hr'#HrQ`QYOOO){QYO'#DjO5qQWO'#G[O5vQ#tO'#CmO6UQWO'#EZO6aQWO'#EgO6fQ#tO'#FRO7QQWO'#G[O7VQWO'#G`O7bQWO'#G`O7pQWO'#GcO7pQWO'#GdO7pQWO'#GfO5qQWO'#GiO8aQWO'#GlO9oQWO'#CdO:PQWO'#GyO:XQWO'#HPO:XQWO'#HRO`QYO'#HTO:XQWO'#HVO:XQWO'#HYO:^QWO'#H`O:cQ$I]O'#HfO){QYO'#HhO:nQ$I]O'#HjO:yQ$I]O'#HlO5iQ$I[O'#HnO){QYO'#DWOOOS'#Ht'#HtO;UOSO,59qOOQ$IU,59q,59qO=gQbO'#ChO=qQYO'#HuO>UQWO'#IvO@TQbO'#IvO'dQYO'#IvO@[QWO,59wO@rQ&jO'#DbOAkQWO'#E]OAxQWO'#JROBTQWO'#JQOBTQWO'#JQOB]QWO,5:yOBbQWO'#JPOBiQWO'#DyO5vQ#tO'#EZOBwQWO'#EZOCSQ`O'#FROOQ$IU,5:S,5:SOC[QYO,5:SOEYQ$IfO,5:^OEvQWO,5:dOFaQ$I[O'#JOO7VQWO'#I}OFhQWO'#I}OFpQWO,5:xOFuQWO'#I}OGTQYO,5:vOITQWO'#EWOJ_QWO,5:vOKnQWO'#DlOKuQYO'#DqOLPQ&jO,5;PO){QYO,5;POOQQ'#Er'#ErOOQQ'#Et'#EtO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;ROOQQ'#Ex'#ExOLXQYO,5;cOOQ$IU,5;h,5;hOOQ$IU,5;i,5;iONXQWO,5;iOOQ$IU,5;j,5;jO){QYO'#IPON^Q$I[O,5<TONxQWO,5;RO){QYO,5;fO! bQpO'#JVO! PQpO'#JVO! iQpO'#JVO! zQpO,5;qOOOO,5;{,5;{O!!YQYO'#FcOOOO'#IO'#IOO3rO!bO,5;nO!!aQpO'#FeOOQ$IU,5;n,5;nO!!}Q,UO'#CrOOQ$IU'#Cu'#CuO!#bQWO'#CuO!#gOSO'#CyO!$TQ#tO,5<QO!$[QWO,5<SO!%hQWO'#FrO!%uQWO'#FsO!%zQWO'#FwO!&yQ&jO'#F{O!'lQ,UO'#IqOOQ$IU'#Iq'#IqO!'vQWO'#IpO!(UQWO'#IoOOQ$IU'#Cs'#CsOOQ$IU'#C|'#C|O!(^QWO'#DOOJdQWO'#FjOJdQWO'#FlO!(cQWO'#FnO!(hQWO'#FoO!(mQWO'#FuOJdQWO'#FzO!(rQWO'#E^O!)ZQWO,5<RO`QYO,5>[OOQQ'#Ik'#IkOOQQ,5>],5>]OOQQ-E;p-E;pO!+VQ$IfO,5:UOOQ$IS'#Cp'#CpO!+vQ#tO,5<vOOQO'#Cf'#CfO!,XQWO'#CqO!,aQ$I[O'#IlO5_QWO'#IlO:^QWO,59XO!,rQpO,59XO!,zQ#tO,59XO5vQ#tO,59XO!-VQWO,5:vO!-_QWO'#GxO!-mQWO'#JbO){QYO,5;kO!-uQ&jO,5;mO!-zQWO,5=cO!.PQWO,5=cO!.UQWO,5=cO5iQ$I[O,5=cO5qQWO,5<vO!.dQWO'#E_O!.xQ&jO'#E`OOQ$IS'#JP'#JPO!/ZQ$I[O'#J_O5iQ$I[O,5<zO7pQWO,5=QOOQO'#Cr'#CrO!/fQpO,5<}O!/nQ#tO,5=OO!/yQWO,5=QO!0OQ`O,5=TO:^QWO'#GnO5qQWO'#GpO!0WQWO'#GpO5vQ#tO'#GsO!0]QWO'#GsOOQQ,5=W,5=WO!0bQWO'#GtO!0jQWO'#CmO!0oQWO,59OO!0yQWO,59OO!2{QYO,59OOOQQ,59O,59OO!3YQ$I[O,59OO){QYO,59OO!3eQYO'#G{OOQQ'#G|'#G|OOQQ'#G}'#G}O`QYO,5=eO!3uQWO,5=eO){QYO'#DxO`QYO,5=kO`QYO,5=mO!3zQWO,5=oO`QYO,5=qO!4PQWO,5=tO!4UQYO,5=zOOQQ,5>Q,5>QO){QYO,5>QO5iQ$I[O,5>SOOQQ,5>U,5>UO!8VQWO,5>UOOQQ,5>W,5>WO!8VQWO,5>WOOQQ,5>Y,5>YO!8[Q`O,59rOOOS-E;r-E;rOOQ$IU1G/]1G/]O!8aQbO,5>aO'dQYO,5>aOOQO,5>f,5>fO!8kQYO'#HuOOQO-E;s-E;sO!8xQWO,5?bO!9QQbO,5?bO!9XQWO,5?lOOQ$IU1G/c1G/cO!9aQpO'#DTOOQO'#Ix'#IxO){QYO'#IxO!:OQpO'#IxO!:mQpO'#DcO!;OQ&jO'#DcO!=ZQYO'#DcO!=bQWO'#IwO!=jQWO,59|O!=oQWO'#EaO!=}QWO'#JSO!>VQWO,5:zO!>mQ&jO'#DcO){QYO,5?mO!>wQWO'#HzOOQO-E;x-E;xO!9XQWO,5?lOOQ$IS1G0e1G0eO!@TQ&jO'#D|OOQ$IU,5:e,5:eO){QYO,5:eOITQWO,5:eO!@[QWO,5:eO:^QWO,5:uO!,rQpO,5:uO!,zQ#tO,5:uO5vQ#tO,5:uOOQ$IU1G/n1G/nOOQ$IU1G0O1G0OOOQ$IS'#EV'#EVO){QYO,5?jO!@gQ$I[O,5?jO!@xQ$I[O,5?jO!APQWO,5?iO!AXQWO'#H|O!APQWO,5?iOOQ$IS1G0d1G0dO7VQWO,5?iOOQ$IU1G0b1G0bO!AsQ$IfO1G0bO!BdQ$IdO,5:rOOQ$IU'#Fq'#FqO!CQQ$IfO'#IqOGTQYO1G0bO!EPQ#tO'#IyO!EZQWO,5:WO!E`QbO'#IzO){QYO'#IzO!EjQWO,5:]OOQ$IU'#DT'#DTOOQ$IU1G0k1G0kO!EoQWO1G0kO!HQQ$IfO1G0mO!HXQ$IfO1G0mO!JlQ$IfO1G0mO!JsQ$IfO1G0mO!LzQ$IfO1G0mO!M_Q$IfO1G0mO#!OQ$IfO1G0mO#!VQ$IfO1G0mO#$jQ$IfO1G0mO#$qQ$IfO1G0mO#&fQ$IfO1G0mO#)`Q7^O'#ChO#+ZQ7^O1G0}O#-UQ7^O'#IuOOQ$IU1G1T1G1TO#-iQ$IfO,5>kOOQ$IS-E;}-E;}O#.YQ$IfO1G0mOOQ$IU1G0m1G0mO#0[Q$IfO1G1QO#0{QpO,5;sO#1QQpO,5;tO#1VQpO'#F[O#1kQWO'#FZOOQO'#JW'#JWOOQO'#H}'#H}O#1pQpO1G1]OOQ$IU1G1]1G1]OOOO1G1f1G1fO#2OQ7^O'#ItO#2YQWO,5;}OLXQYO,5;}OOOO-E;|-E;|OOQ$IU1G1Y1G1YOOQ$IU,5<P,5<PO#2_QpO,5<POOQ$IU,59a,59aOITQWO'#C{OOOS'#Hs'#HsO#2dOSO,59eOOQ$IU,59e,59eO){QYO1G1lO!(hQWO'#IRO#2oQWO,5<eOOQ$IU,5<b,5<bOOQO'#GV'#GVOJdQWO,5<pOOQO'#GX'#GXOJdQWO,5<rOJdQWO,5<tOOQO1G1n1G1nO#2zQ`O'#CpO#3_Q`O,5<^O#3fQWO'#JZO5qQWO'#JZO#3tQWO,5<`OJdQWO,5<_O#3yQ`O'#FqO#4WQ`O'#J[O#4bQWO'#J[OITQWO'#J[O#4gQWO,5<cOOQ$IS'#Dg'#DgO#4lQWO'#FtO#4wQpO'#F|O!&tQ&jO'#F|O!&tQ&jO'#GOO#5YQWO'#GPO!(mQWO'#GSO#5_Q$I[O'#ITO#5jQ&jO,5<gOOQ$IU,5<g,5<gO#5qQ&jO'#F|O#6PQ&jO'#F}O#6XQ&jO'#F}OOQ$IU,5<u,5<uOJdQWO,5?[OJdQWO,5?[O#6^QWO'#IUO#6iQWO,5?ZOOQ$IU'#Ch'#ChO#7]Q#tO,59jOOQ$IU,59j,59jO#8OQ#tO,5<UO#8qQ#tO,5<WO#8{QWO,5<YOOQ$IU,5<Z,5<ZO#9QQWO,5<aO#9VQ#tO,5<fOGTQYO1G1mO#9gQWO1G1mOOQQ1G3v1G3vOOQ$IU1G/p1G/pONXQWO1G/pOOQQ1G2b1G2bOITQWO1G2bO){QYO1G2bOITQWO1G2bO#9lQWO1G2bO#9zQWO,59]O#;TQWO'#EWOOQ$IS,5?W,5?WO#;_Q$I[O,5?WOOQQ1G.s1G.sO:^QWO1G.sO!,rQpO1G.sO!,zQ#tO1G.sO#;pQWO1G0bO#;uQWO'#ChO#<QQWO'#JcO#<YQWO,5=dO#<_QWO'#JcO#<dQWO'#JcO#<lQWO'#I^O#<zQWO,5?|O#=SQbO1G1VOOQ$IU1G1X1G1XO5qQWO1G2}O#=ZQWO1G2}O#=`QWO1G2}O#=eQWO1G2}OOQQ1G2}1G2}O#=jQ#tO1G2bO7VQWO'#JQO7VQWO'#EaO7VQWO'#IWO#={Q$I[O,5?yOOQQ1G2f1G2fO!/yQWO1G2lOITQWO1G2iO#>WQWO1G2iOOQQ1G2j1G2jOITQWO1G2jO#>]QWO1G2jO#>eQ&jO'#GhOOQQ1G2l1G2lO!&tQ&jO'#IYO!0OQ`O1G2oOOQQ1G2o1G2oOOQQ,5=Y,5=YO#>mQ#tO,5=[O5qQWO,5=[O#5YQWO,5=_O5_QWO,5=_O!,rQpO,5=_O!,zQ#tO,5=_O5vQ#tO,5=_O#?OQWO'#JaO#?ZQWO,5=`OOQQ1G.j1G.jO#?`Q$I[O1G.jO#?kQWO1G.jO#?pQWO1G.jO5iQ$I[O1G.jO#?xQbO,5@OO#@SQWO,5@OO#@_QYO,5=gO#@fQWO,5=gO7VQWO,5@OOOQQ1G3P1G3PO`QYO1G3POOQQ1G3V1G3VOOQQ1G3X1G3XO:XQWO1G3ZO#@kQYO1G3]O#DfQYO'#H[OOQQ1G3`1G3`O#DsQWO'#HbO:^QWO'#HdOOQQ1G3f1G3fO#D{QYO1G3fO5iQ$I[O1G3lOOQQ1G3n1G3nOOQ$IS'#Fx'#FxO5iQ$I[O1G3pO5iQ$I[O1G3rOOOS1G/^1G/^O#HyQ`O,5<TO#IRQbO1G3{OOQO1G4Q1G4QO){QYO,5>aO#I]QWO1G4|O#IeQWO1G5WO#ImQWO,5?dOLXQYO,5:{O7VQWO,5:{O:^QWO,59}OLXQYO,59}O!,rQpO,59}O#IrQ7^O,59}OOQO,5:{,5:{O#I|Q&jO'#HvO#JdQWO,5?cOOQ$IU1G/h1G/hO#JlQ&jO'#H{O#KQQWO,5?nOOQ$IS1G0f1G0fO!;OQ&jO,59}O#KYQbO1G5XO7VQWO,5>fOOQ$IS'#ES'#ESO#KdQ$ItO'#ETO!?{Q&jO'#D}OOQO'#Hy'#HyO#LOQ&jO,5:hOOQ$IU,5:h,5:hO#LVQ&jO'#D}O#LhQ&jO'#D}O#LoQ&jO'#EYO#LrQ&jO'#ETO#MPQ&jO'#ETO!?{Q&jO'#ETO#MdQWO1G0PO#MiQ`O1G0POOQ$IU1G0P1G0PO){QYO1G0POITQWO1G0POOQ$IU1G0a1G0aO:^QWO1G0aO!,rQpO1G0aO!,zQ#tO1G0aO#MpQ$IfO1G5UO){QYO1G5UO#NQQ$I[O1G5UO#NcQWO1G5TO7VQWO,5>hOOQO,5>h,5>hO#NkQWO,5>hOOQO-E;z-E;zO#NcQWO1G5TO#NyQ$IfO,59jO$!xQ$IfO,5<UO$$zQ$IfO,5<WO$&|Q$IfO,5<fOOQ$IU7+%|7+%|O$)UQ$IfO7+%|O$)uQWO'#HwO$*PQWO,5?eOOQ$IU1G/r1G/rO$*XQYO'#HxO$*fQWO,5?fO$*nQbO,5?fOOQ$IU1G/w1G/wOOQ$IU7+&V7+&VO$*xQ7^O,5:^O){QYO7+&iO$+SQ7^O,5:UOOQO1G1_1G1_OOQO1G1`1G1`O$+aQMhO,5;vOLXQYO,5;uOOQO-E;{-E;{OOQ$IU7+&w7+&wOOOO7+'Q7+'QOOOO1G1i1G1iO$+lQWO1G1iOOQ$IU1G1k1G1kO$+qQ`O,59gOOOS-E;q-E;qOOQ$IU1G/P1G/PO$+xQ$IfO7+'WOOQ$IU,5>m,5>mO$,iQWO,5>mOOQ$IU1G2P1G2PP$,nQWO'#IRPOQ$IU-E<P-E<PO$-_Q#tO1G2[O$.QQ#tO1G2^O$.[Q#tO1G2`OOQ$IU1G1x1G1xO$.cQWO'#IQO$.qQWO,5?uO$.qQWO,5?uO$.yQWO,5?uO$/UQWO,5?uOOQO1G1z1G1zO$/dQ#tO1G1yO$/tQWO'#ISO$0UQWO,5?vOITQWO,5?vO$0^Q`O,5?vOOQ$IU1G1}1G1}OOQ$IS,5<h,5<hOOQ$IS,5<i,5<iO$0hQWO,5<iO#5TQWO,5<iO!,rQpO,5<hO$0mQWO,5<jOOQ$IS,5<k,5<kO$0hQWO,5<nOOQO,5>o,5>oOOQO-E<R-E<ROOQ$IU1G2R1G2RO!&tQ&jO,5<hO$0uQWO,5<iO!&tQ&jO,5<jO!&tQ&jO,5<iO$1QQ#tO1G4vO$1[Q#tO1G4vOOQO,5>p,5>pOOQO-E<S-E<SO!-uQ&jO,59lO){QYO,59lO$1iQWO1G1tOJdQWO1G1{O$1nQ$IfO7+'XOOQ$IU7+'X7+'XOGTQYO7+'XOOQ$IU7+%[7+%[O$2_Q`O'#J]O#MdQWO7+'|O$2iQWO7+'|O$2qQ`O7+'|OOQQ7+'|7+'|OITQWO7+'|O){QYO7+'|OITQWO7+'|OOQO1G.w1G.wO$2{Q$IdO'#ChO$3`Q$IdO,5<lO$4QQWO,5<lOOQ$IS1G4r1G4rOOQQ7+$_7+$_O:^QWO7+$_O!,rQpO7+$_OGTQYO7+%|O$4VQWO'#I]O$4hQWO,5?}OOQO1G3O1G3OO5qQWO,5?}O$4hQWO,5?}O$4pQWO,5?}OOQO,5>x,5>xOOQO-E<[-E<[OOQ$IU7+&q7+&qO$4uQWO7+(iO5iQ$I[O7+(iO5qQWO7+(iO$4zQWO7+(iO$5PQWO7+'|OOQ$IS,5>r,5>rOOQ$IS-E<U-E<UOOQQ7+(W7+(WO$5_Q$IdO7+(TOITQWO7+(TO$5iQ`O7+(UOOQQ7+(U7+(UOITQWO7+(UO$5pQWO'#J`O$5{QWO,5=SOOQO,5>t,5>tOOQO-E<W-E<WOOQQ7+(Z7+(ZO$6uQ&jO'#GqOOQQ1G2v1G2vOITQWO1G2vO){QYO1G2vOITQWO1G2vO$6|QWO1G2vO$7[Q#tO1G2vO5iQ$I[O1G2yO#5YQWO1G2yO5_QWO1G2yO!,rQpO1G2yO!,zQ#tO1G2yO$7mQWO'#I[O$7xQWO,5?{O$8QQ&jO,5?{OOQ$IS1G2z1G2zOOQQ7+$U7+$UO$8YQWO7+$UO5iQ$I[O7+$UO$8_QWO7+$UO){QYO1G5jO){QYO1G5kO$8dQYO1G3RO$8kQWO1G3RO$8pQYO1G3RO$8wQ$I[O1G5jOOQQ7+(k7+(kO5iQ$I[O7+(uO`QYO7+(wOOQQ'#Jf'#JfOOQQ'#I_'#I_O$9RQYO,5=vOOQQ,5=v,5=vO){QYO'#H]O$9`QWO'#H_OOQQ,5=|,5=|O7VQWO,5=|OOQQ,5>O,5>OOOQQ7+)Q7+)QOOQQ7+)W7+)WOOQQ7+)[7+)[OOQQ7+)^7+)^OOQO1G5O1G5OO$9eQ7^O1G0gO$9oQWO1G0gOOQO1G/i1G/iO$9zQ7^O1G/iO:^QWO1G/iOLXQYO'#DcOOQO,5>b,5>bOOQO-E;t-E;tOOQO,5>g,5>gOOQO-E;y-E;yO!,rQpO1G/iO:^QWO,5:iOOQO,5:o,5:oO){QYO,5:oO$:UQ$I[O,5:oO$:aQ$I[O,5:oO!,rQpO,5:iOOQO-E;w-E;wOOQ$IU1G0S1G0SO!?{Q&jO,5:iO$:oQ&jO,5:iO$;QQ$ItO,5:oO$;lQ&jO,5:iO!?{Q&jO,5:oOOQO,5:t,5:tO$;sQ&jO,5:oO$<QQ$I[O,5:oOOQ$IU7+%k7+%kO#MdQWO7+%kO#MiQ`O7+%kOOQ$IU7+%{7+%{O:^QWO7+%{O!,rQpO7+%{O$<fQ$IfO7+*pO){QYO7+*pOOQO1G4S1G4SO7VQWO1G4SO$<vQWO7+*oO$=OQ$IfO1G2[O$?QQ$IfO1G2^O$ASQ$IfO1G1yO$C[Q#tO,5>cOOQO-E;u-E;uO$CfQbO,5>dO){QYO,5>dOOQO-E;v-E;vO$CpQWO1G5QO$CxQ7^O1G0bO$FPQ7^O1G0mO$FWQ7^O1G0mO$HXQ7^O1G0mO$H`Q7^O1G0mO$JTQ7^O1G0mO$JhQ7^O1G0mO$LuQ7^O1G0mO$L|Q7^O1G0mO$N}Q7^O1G0mO% UQ7^O1G0mO%!yQ7^O1G0mO%#^Q$IfO<<JTO%#}Q7^O1G0mO%&UQ7^O'#IqO%'nQ7^O1G1QOLXQYO'#F^OOQO'#JX'#JXOOQO1G1b1G1bO%'{QWO1G1aO%(QQ7^O,5>kOOOO7+'T7+'TOOOS1G/R1G/ROOQ$IU1G4X1G4XOJdQWO7+'zO%([QWO,5>lO5qQWO,5>lOOQO-E<O-E<OO%(jQWO1G5aO%(jQWO1G5aO%(rQWO1G5aO%(}Q`O,5>nO%)XQWO,5>nOITQWO,5>nOOQO-E<Q-E<QO%)^Q`O1G5bO%)hQWO1G5bOOQ$IS1G2T1G2TO$0hQWO1G2TOOQ$IS1G2S1G2SO%)pQWO1G2UOITQWO1G2UOOQ$IS1G2Y1G2YO!,rQpO1G2SO#5TQWO1G2TO%)uQWO1G2UO%)}QWO1G2TOJdQWO7+*bOOQ$IU1G/W1G/WO%*YQWO1G/WOOQ$IU7+'`7+'`O%*_Q#tO7+'gO%*oQ$IfO<<JsOOQ$IU<<Js<<JsOITQWO'#IVO%+`QWO,5?wOOQQ<<Kh<<KhOITQWO<<KhO#MdQWO<<KhO%+hQWO<<KhO%+pQ`O<<KhOITQWO1G2WOOQQ<<Gy<<GyO:^QWO<<GyO%+zQ$IfO<<IhOOQ$IU<<Ih<<IhOOQO,5>w,5>wO%,kQWO,5>wO%,pQWO,5>wOOQO-E<Z-E<ZO%,xQWO1G5iO%,xQWO1G5iO5qQWO1G5iO%-QQWO<<LTOOQQ<<LT<<LTO%-VQWO<<LTO5iQ$I[O<<LTO){QYO<<KhOITQWO<<KhOOQQ<<Ko<<KoO$5_Q$IdO<<KoOOQQ<<Kp<<KpO$5iQ`O<<KpO%-[Q&jO'#IXO%-gQWO,5?zOLXQYO,5?zOOQQ1G2n1G2nO#KdQ$ItO'#ETO!?{Q&jO'#GrOOQO'#IZ'#IZO%-oQ&jO,5=]OOQQ,5=],5=]O%-vQ&jO'#ETO%.RQ&jO'#ETO%.jQ&jO'#ETO%.tQ&jO'#GrO%/VQWO7+(bO%/[QWO7+(bO%/dQ`O7+(bOOQQ7+(b7+(bOITQWO7+(bO){QYO7+(bOITQWO7+(bO%/nQWO7+(bOOQQ7+(e7+(eO5iQ$I[O7+(eO#5YQWO7+(eO5_QWO7+(eO!,rQpO7+(eO%/|QWO,5>vOOQO-E<Y-E<YOOQO'#Gu'#GuO%0XQWO1G5gO5iQ$I[O<<GpOOQQ<<Gp<<GpO%0aQWO<<GpO%0fQWO7++UO%0kQWO7++VOOQQ7+(m7+(mO%0pQWO7+(mO%0uQYO7+(mO%0|QWO7+(mO){QYO7++UO){QYO7++VOOQQ<<La<<LaOOQQ<<Lc<<LcOOQQ-E<]-E<]OOQQ1G3b1G3bO%1RQWO,5=wOOQQ,5=y,5=yO%1WQWO1G3hOLXQYO7+&ROOQO7+%T7+%TO%1]Q7^O1G5XO:^QWO7+%TOOQO1G0T1G0TO%1gQ$IfO1G0ZOOQO1G0Z1G0ZO){QYO1G0ZO%1qQ$I[O1G0ZO:^QWO1G0TO!,rQpO1G0TO!?{Q&jO1G0TO%1|Q$I[O1G0ZO%2[Q&jO1G0TO%2mQ$I[O1G0ZO%3RQ$ItO1G0ZO%3]Q&jO1G0TO!?{Q&jO1G0ZOOQ$IU<<IV<<IVOOQ$IU<<Ig<<IgO:^QWO<<IgO%3dQ$IfO<<N[OOQO7+)n7+)nO%3tQ$IfO7+'gO%5|QbO1G4OO%6WQ7^O7+%|O%6|Q7^O,59jO%8zQ7^O,5<UO%:{Q7^O,5<WO%<hQ7^O,5<fO%>WQ7^O7+'WO%>eQ7^O7+'XO%>rQWO,5;xOOQO7+&{7+&{O%>wQ#tO<<KfOOQO1G4W1G4WO%?XQWO1G4WO%?dQWO1G4WO%?rQWO7+*{O%?rQWO7+*{OITQWO1G4YO%?zQ`O1G4YO%@UQWO7+*|OOQ$IS7+'o7+'oO$0hQWO7+'pO%@^Q`O7+'pOOQ$IS7+'n7+'nO$0hQWO7+'oO%@eQWO7+'pOITQWO7+'pO#5TQWO7+'oO%@jQ#tO<<M|OOQ$IU7+$r7+$rO%@tQ`O,5>qOOQO-E<T-E<TO#MdQWOANASOOQQANASANASOITQWOANASO%AOQ$IdO7+'rOOQQAN=eAN=eO5qQWO1G4cOOQO1G4c1G4cO%A`QWO1G4cO%AeQWO7++TO%AeQWO7++TO5iQ$I[OANAoO%AmQWOANAoOOQQANAoANAoO%ArQWOANASO%AzQ`OANASOOQQANAZANAZOOQQANA[ANA[O%BUQWO,5>sOOQO-E<V-E<VO%BaQ7^O1G5fO#5YQWO,5=^O5_QWO,5=^O!,rQpO,5=^OOQO-E<X-E<XOOQQ1G2w1G2wO$;QQ$ItO,5:oO!?{Q&jO,5=^O%BkQ&jO,5=^O%B|Q&jO,5:oOOQQ<<K|<<K|OITQWO<<K|O%/VQWO<<K|O%CWQWO<<K|O%C`Q`O<<K|O){QYO<<K|OITQWO<<K|OOQQ<<LP<<LPO5iQ$I[O<<LPO#5YQWO<<LPO5_QWO<<LPO%CjQ&jO1G4bO%CrQWO7++ROOQQAN=[AN=[O5iQ$I[OAN=[OOQQ<<Np<<NpOOQQ<<Nq<<NqOOQQ<<LX<<LXO%CzQWO<<LXO%DPQYO<<LXO%DWQWO<<NpO%D]QWO<<NqOOQQ1G3c1G3cO:^QWO7+)SO%DbQ7^O<<ImOOQO<<Ho<<HoOOQO7+%u7+%uO%1gQ$IfO7+%uO){QYO7+%uOOQO7+%o7+%oO:^QWO7+%oO!,rQpO7+%oO%DlQ$I[O7+%uO!?{Q&jO7+%oO%DwQ$I[O7+%uO%EVQ&jO7+%oO%EhQ$I[O7+%uOOQ$IUAN?RAN?RO%E|Q$IfO<<KfO%HUQ7^O<<JTO%HcQ7^O1G1yO%JgQ7^O1G2[O%LhQ7^O1G2^O%NTQ7^O<<JsO%NbQ7^O<<IhOOQO1G1d1G1dOOQO7+)r7+)rO%NoQWO7+)rO%NzQWO<<NgO& SQ`O7+)tOOQ$IS<<K[<<K[O$0hQWO<<K[OOQ$IS<<KZ<<KZO& ^Q`O<<K[O$0hQWO<<KZOOQQG26nG26nO#MdQWOG26nOOQO7+)}7+)}O5qQWO7+)}O& eQWO<<NoOOQQG27ZG27ZO5iQ$I[OG27ZOITQWOG26nOLXQYO1G4_O& mQWO7++QO5iQ$I[O1G2xO#5YQWO1G2xO5_QWO1G2xO!,rQpO1G2xO!?{Q&jO1G2xO%3RQ$ItO1G0ZO& uQ&jO1G2xO%/VQWOANAhOOQQANAhANAhOITQWOANAhO&!WQWOANAhO&!`Q`OANAhOOQQANAkANAkO5iQ$I[OANAkO#5YQWOANAkOOQO'#Gv'#GvOOQO7+)|7+)|OOQQG22vG22vOOQQANAsANAsO&!jQWOANAsOOQQAND[AND[OOQQAND]AND]OOQQ<<Ln<<LnOOQO<<Ia<<IaO%1gQ$IfO<<IaOOQO<<IZ<<IZO:^QWO<<IZO){QYO<<IaO!,rQpO<<IZO&!oQ$I[O<<IaO!?{Q&jO<<IZO&!zQ$I[O<<IaO&#YQ7^O7+'gOOQO<<M^<<M^OOQ$ISAN@vAN@vO$0hQWOAN@vOOQ$ISAN@uAN@uOOQQLD,YLD,YOOQO<<Mi<<MiOOQQLD,uLD,uO#MdQWOLD,YO&$xQ7^O7+)yOOQO7+(d7+(dO5iQ$I[O7+(dO#5YQWO7+(dO5_QWO7+(dO!,rQpO7+(dO!?{Q&jO7+(dOOQQG27SG27SO%/VQWOG27SOITQWOG27SOOQQG27VG27VO5iQ$I[OG27VOOQQG27_G27_OOQOAN>{AN>{OOQOAN>uAN>uO%1gQ$IfOAN>{O:^QWOAN>uO){QYOAN>{O!,rQpOAN>uO&%SQ$I[OAN>{O&%_Q7^O<<KfOOQ$ISG26bG26bOOQQ!$( t!$( tOOQO<<LO<<LOO5iQ$I[O<<LOO#5YQWO<<LOO5_QWO<<LOO!,rQpO<<LOOOQQLD,nLD,nO%/VQWOLD,nOOQQLD,qLD,qOOQOG24gG24gOOQOG24aG24aO%1gQ$IfOG24gO:^QWOG24aO){QYOG24gO&&}QMhO,5:rO&'tQ!LQO'#IqOOQOANAjANAjO5iQ$I[OANAjO#5YQWOANAjO5_QWOANAjOOQQ!$(!Y!$(!YOOQOLD*RLD*ROOQOLD){LD){O%1gQ$IfOLD*RO&(hQMhO,59jO&)[QMhO,5<UO&*OQMhO,5<WO&*rQMhO,5<fOOQOG27UG27UO5iQ$I[OG27UO#5YQWOG27UOOQO!$'Mm!$'MmO&+iQMhO1G2[O&,]QMhO1G2^O&-PQMhO1G1yOOQOLD,pLD,pO5iQ$I[OLD,pO&-vQMhO7+'gOOQO!$(![!$(![O&.mQMhO<<KfOLXQYO'#DrO&/dQbO'#ItOLXQYO'#DjO&/kQ$IfO'#ChO&0UQbO'#ChO&0fQYO,5:vO&2fQWO'#EWOLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO'#IPO&3pQWO,5<TO&5SQWO,5;ROLXQYO,5;fO!(^QWO'#DOO!(^QWO'#DOO!(^QWO'#DOOITQWO'#FjO&2fQWO'#FjO&3xQWO'#FjOITQWO'#FlO&2fQWO'#FlO&3xQWO'#FlOITQWO'#FzO&2fQWO'#FzO&3xQWO'#FzOLXQYO,5?mO&0fQYO1G0bO&5ZQ7^O'#ChOLXQYO1G1lOITQWO,5<pO&2fQWO,5<pO&3xQWO,5<pOITQWO,5<rO&2fQWO,5<rO&3xQWO,5<rOITQWO,5<_O&2fQWO,5<_O&3xQWO,5<_O&0fQYO1G1mOLXQYO7+&iOITQWO1G1{O&2fQWO1G1{O&3xQWO1G1{O&0fQYO7+'XO&0fQYO7+%|OITQWO7+'zO&2fQWO7+'zO&3xQWO7+'zO&5eQWO7+'pO&5eQWO<<K[O&5eQWOAN@vO&5jQWO'#E[O&5oQWO'#E[O&5wQWO'#EzO&5|QWO'#EgO&6RQWO'#JRO&6^QWO'#JPO&6iQWO,5:vO&6nQ#tO,5<QO&6uQWO'#FsO&6zQWO'#FsO&7PQWO'#FsO&7UQWO,5<RO&7^QWO,5:vO&7fQ7^O1G0}O&7mQWO,5<aO&7rQWO,5<aO&7wQWO,5<aO&7|QWO1G1mO&8RQWO1G0bO&8WQ#tO1G2`O&8_Q#tO1G2`O&8fQ#tO1G2`O&8mQWO1G2UO&8rQ`O7+'pO&8yQWO7+'pO&9OQ`O<<K[O4QQWO'#FhO5_QWO'#FgOBwQWO'#EZOLXQYO,5;cO!(mQWO'#FuO!(mQWO'#FuO!(mQWO'#FuOJdQWO,5<tOJdQWO,5<tOJdQWO,5<tO&9VQWO,5<jOITQWO1G2UO&9_QWO1G2UOITQWO7+'pO!&tQ&jO'#GOO!&tQ&jO,5<j",stateData:"&:]~O'YOS'ZOSTOSUOS~OPTOQTOXyO]cO_hObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#dsO#tpO#x^O%PqO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO%axO%nzO%t{O%v|O%x}O%z!OO%}!PO&T!QO&Z!RO&]!SO&_!TO&a!UO&c!VO']PO'fQO'oYO'|aO~OP[XZ[X_[Xj[Xu[Xv[Xx[X!R[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'W[X'f[X'p[X'w[X'x[X~O!]$lX~P$zOR!WO'U!XO'V!ZO~OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']![O'fQO'oYO'|aO~O!Q!`O!R!]O!O'jP!O'tP~P'dO!S!mO~P`OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9WO'fQO'oYO'|aO~OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O'fQO'oYO'|aO~O!Q!rO#U!uO#V!rO']9XO!c'qP~P+{O#W!vO~O!]!wO#W!vO~OP#^OZ#dOj#ROu!{Ov!{Ox!|O!R#bO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_'hX'W'hX!c'hX!O'hX!T'hX%Q'hX!]'hX~P.jO!{#eO#o#eOP'iXZ'iX_'iXj'iXu'iXv'iXx'iX!R'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX~O#c'iX'W'iX!O'iX!c'iXn'iX!T'iX%Q'iX!]'iX~P0zO!{#eO~O#z#fO$R#jO~O!T#kO#x^O$U#lO$W#nO~O]#qOh$OOj#rOk#qOl#qOq$POs$QOx#xO!T#yO!_$VO!d#vO#V$WO#t$TO$_$RO$a$SO$d$UO']#pO'f#sO'a'cP~O!d$XO~O!]$ZO~O_$[O'W$[O~O']$`O~O!d$XO']$`O'^$bO'b$cO~Oc$iO!d$XO']$`O~O#c#TO~O]$rOu$nO!T$kO!d$mO%R$qO']$`O'^$bO^(UP~O!n$sO~Ox$tO!T$uO']$`O~Ox$tO!T$uO%Z$yO']$`O~O']$zO~O#dsO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO~Ob%TOc%SO!n%QO%P%RO%c%PO~P7uOb%WOcmO!T%VO!nlO#dsO%PqO%TrO%UrO%XuO%ZvO%^wO%_wO%axO~O`%ZO!{%^O%R%XO'^$bO~P8tO!d%_O!g%cO~O!d%dO~O!TSO~O_$[O'T%lO'W$[O~O_$[O'T%oO'W$[O~O_$[O'T%qO'W$[O~OR!WO'U!XO'V%uO~OP[XZ[Xj[Xu[Xv[Xx[X!R[X!RdX!a[X!b[X!d[X!j[X!{[X!{dX#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X~O!O[X!OdX~P;aO!Q%wO!O&iX!O&nX!R&iX!R&nX~P'dO!R%yO!O'jX~OP#^OZ#dOj#ROu!{Ov!{Ox!|O!R%yO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O!O'jX~P>^O!O&OO~Ox&RO!W&]O!X&UO!Y&UO'^$bO~O]&SOk&SO!Q&VO'g&PO!S'kP!S'vP~P@aO!O'sX!R'sX!]'sX!c'sX'p'sX~O!{'sX#W#PX!S'sX~PAYO!{&^O!O'uX!R'uX~O!R&_O!O'tX~O!O&bO~O!{#eO~PAYOS&fO!T&cO!o&eO']$`O~Oc&kO!d$XO']$`O~Ou$nO!d$mO~O!S&lO~P`Ou!{Ov!{Ox!|O!b!yO!d!zO'fQOP!faZ!faj!fa!R!fa!a!fa!j!fa#[!fa#]!fa#^!fa#_!fa#`!fa#a!fa#b!fa#c!fa#e!fa#g!fa#i!fa#j!fa'p!fa'w!fa'x!fa~O_!fa'W!fa!O!fa!c!fan!fa!T!fa%Q!fa!]!fa~PCcO!c&mO~O!]!wO!{&oO'p&nO!R'rX_'rX'W'rX~O!c'rX~PE{O!R&sO!c'qX~O!c&uO~Ox$tO!T$uO#V&vO']$`O~OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9WO'fQO'oYO'|aO~O]#qOh$OOj#rOk#qOl#qOq$POs9kOx#xO!T#yO!_;RO!d#vO#V9tO#t$TO$_9nO$a9qO$d$UO']&zO'f#sO~O#W&|O~O]#qOh$OOj#rOk#qOl#qOq$POs$QOx#xO!T#yO!_$VO!d#vO#V$WO#t$TO$_$RO$a$SO$d$UO']&zO'f#sO~O'a'mP~PJdO!Q'QO!c'nP~P){O'g'SO'oYO~OP9TOQ9TO]cOb;POc!jOhcOj9TOkcOlcOq9TOs9TOxRO{cO|cO}cO!T!bO!_9VO!dUO!g9TO!h9TO!i9TO!j9TO!k9TO!n!iO#t!lO#x^O']'bO'fQO'oYO'|:}O~O!d!zO~O!R#bO_$]a'W$]a!c$]a!O$]a!T$]a%Q$]a!]$]a~O#d'iO~PITO!]'kO!T'yX#w'yX#z'yX$R'yX~Ou'lO~P! POu'lO!T'yX#w'yX#z'yX$R'yX~O!T'nO#w'rO#z'mO$R'sO~O!Q'vO~PLXO#z#fO$R'yO~Ou$eXx$eX!b$eX'p$eX'w$eX'x$eX~OSfX!RfX!{fX'afX'a$eX~P!!iOk'{O~OR'|O'U'}O'V(PO~Ou(ROx(SO'p#[O'w(UO'x(WO~O'a(QO~P!#rO'a(ZO~O]#qOh$OOj#rOk#qOl#qOq$POs9kOx#xO!T#yO!_;RO!d#vO#V9tO#t$TO$_9nO$a9qO$d$UO'f#sO~O!Q(_O']([O!c'}P~P!$aO#W(aO~O!Q(eO'](bO!O(OP~P!$aOj(sOx(kO!W(qO!X(jO!Y(jO!d(hO!x(rO$w(mO'^$bO'g(gO~O!S(pO~P!&XO!b!yOu'eXx'eX'p'eX'w'eX'x'eX!R'eX!{'eX~O'a'eX#m'eX~P!'QOS(vO!{(uO!R'dX'a'dX~O!R(wO'a'cX~O'](yO~O!d)OO~O']&zO~O!d(hO~Ox$tO!Q!rO!T$uO#U!uO#V!rO']$`O!c'qP~O!]!wO#W)SO~OP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_!^a!R!^a'W!^a!O!^a!c!^an!^a!T!^a%Q!^a!]!^a~P!)cOS)[O!T&cO!o)ZO%Q)YO'b$cO~O']$zO'a'cP~O!])_O!T'`X_'`X!R'`X'W'`X~O!d$XO'b$cO~O!d$XO']$`O'b$cO~O!]!wO#W&|O~O])jO%R)kO'])gO!S(VP~O!R)lO^(UX~O'g'SO~OZ)pO~O^)qO~O!T$kO']$`O'^$bO^(UP~Ox$tO!Q)vO!R&_O!T$uO']$`O!O'tP~O]&YOk&YO!Q)wO'g'SO!S'vP~O!R)xO_(RX'W(RX~O!{)|O'b$cO~OS*PO!T#yO'b$cO~O!T*RO~Ou*TO!TSO~O!n*YO~Oc*_O~O'](yO!S(TP~Oc$iO~O%RtO']$zO~P8tOZ*eO^*dO~OPTOQTO]cObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#x^O%PqO'fQO'oYO'|aO~O!T!bO#t!lO']9WO~P!1RO^*dO_$[O'W$[O~O_*iO#d*kO%T*kO%U*kO~P){O!d%_O~O%t*pO~O!T*rO~O&V*tO&X*uOP&SaQ&SaX&Sa]&Sa_&Sab&Sac&Sah&Saj&Sak&Sal&Saq&Sas&Sax&Sa{&Sa|&Sa}&Sa!T&Sa!_&Sa!d&Sa!g&Sa!h&Sa!i&Sa!j&Sa!k&Sa!n&Sa#d&Sa#t&Sa#x&Sa%P&Sa%R&Sa%T&Sa%U&Sa%X&Sa%Z&Sa%^&Sa%_&Sa%a&Sa%n&Sa%t&Sa%v&Sa%x&Sa%z&Sa%}&Sa&T&Sa&Z&Sa&]&Sa&_&Sa&a&Sa&c&Sa'S&Sa']&Sa'f&Sa'o&Sa'|&Sa!S&Sa%{&Sa`&Sa&Q&Sa~O']*zO~On*}O~O!O&ia!R&ia~P!)cO!Q+RO!O&iX!R&iX~P){O!R%yO!O'ja~O!O'ja~P>^O!R&_O!O'ta~O!RwX!R!ZX!SwX!S!ZX!]wX!]!ZX!d!ZX!{wX'b!ZX~O!]+WO!{+VO!R#TX!R'lX!S#TX!S'lX!]'lX!d'lX'b'lX~O!]+YO!d$XO'b$cO!R!VX!S!VX~O]&QOk&QOx&RO'g(gO~OP9TOQ9TO]cOb;POc!jOhcOj9TOkcOlcOq9TOs9TOxRO{cO|cO}cO!T!bO!_9VO!dUO!g9TO!h9TO!i9TO!j9TO!k9TO!n!iO#t!lO#x^O'fQO'oYO'|:}O~O']9yO~P!;^O!R+^O!S'kX~O!S+`O~O!]+WO!{+VO!R#TX!S#TX~O!R+aO!S'vX~O!S+cO~O]&QOk&QOx&RO'^$bO'g(gO~O!X+dO!Y+dO~P!>[Ox$tO!Q+fO!T$uO']$`O!O&nX!R&nX~O_+jO!W+mO!X+iO!Y+iO!r+qO!s+oO!t+pO!u+nO!x+rO'^$bO'g(gO'o+gO~O!S+lO~P!?]OS+wO!T&cO!o+vO~O!{+}O!R'ra!c'ra_'ra'W'ra~O!]!wO~P!@gO!R&sO!c'qa~Ox$tO!Q,QO!T$uO#U,SO#V,QO']$`O!R&pX!c&pX~O_#Oi!R#Oi'W#Oi!O#Oi!c#Oin#Oi!T#Oi%Q#Oi!]#Oi~P!)cO#W!za!R!za!c!za!{!za!T!za_!za'W!za!O!za~P!#rO#W'eXP'eXZ'eX_'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX'W'eX'f'eX!c'eX!O'eX!T'eXn'eX%Q'eX!]'eX~P!'QO!R,]O'a'mX~P!#rO'a,_O~O!R,`O!c'nX~P!)cO!c,cO~O!O,dO~OP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zi_#Zij#Zi!R#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O#[#Zi~P!EtO#[#PO~P!EtOP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO'fQOZ#Zi_#Zi!R#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~Oj#Zi~P!H`Oj#RO~P!H`OP#^Oj#ROu!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO'fQO_#Zi!R#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P!JzOZ#dO!a#TO#a#TO#b#TO#c#TO~P!JzOP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO'fQO_#Zi!R#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'w#Zi~P!MrO'w!}O~P!MrOP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO'fQO'w!}O_#Zi!R#Zi#i#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'x#Zi~P#!^O'x#OO~P#!^OP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO'fQO'w!}O'x#OO~O_#Zi!R#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P#$xOP[XZ[Xj[Xu[Xv[Xx[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X!R[X!S[X~O#m[X~P#']OP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO#g9cO#i9eO#j9fO'fQO'p#[O'w!}O'x#OO~O#m,fO~P#)gOP'iXZ'iXj'iXu'iXv'iXx'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX!R'iX~O!{9jO#o9jO#c'iX#m'iX!S'iX~P#+bO_&sa!R&sa'W&sa!c&san&sa!O&sa!T&sa%Q&sa!]&sa~P!)cOP#ZiZ#Zi_#Zij#Ziv#Zi!R#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'f#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P!#rO_#ni!R#ni'W#ni!O#ni!c#nin#ni!T#ni%Q#ni!]#ni~P!)cO#z,hO~O#z,iO~O!]'kO!{,jO!T$OX#w$OX#z$OX$R$OX~O!Q,kO~O!T'nO#w,mO#z'mO$R,nO~O!R9gO!S'hX~P#)gO!S,oO~O$R,qO~OR'|O'U'}O'V,tO~O],wOk,wO!O,xO~O!RdX!]dX!cdX!c$eX'pdX~P!!iO!c-OO~P!#rO!R-PO!]!wO'p&nO!c'}X~O!c-UO~O!O$eX!R$eX!]$lX~P!!iO!R-WO!O(OX~P!#rO!]-YO~O!O-[O~O!Q(_O']$`O!c'}P~Oj-`O!]!wO!d$XO'b$cO'p&nO~O!])_O~O_$[O!R-eO'W$[O~O!S-gO~P!&XO!X-hO!Y-hO'^$bO'g(gO~Ox-jO'g(gO~O!x-kO~O']$zO!R&xX'a&xX~O!R(wO'a'ca~Ou-pOv-pOx-qO'pra'wra'xra!Rra!{ra~O'ara#mra~P#6qOu(ROx(SO'p$^a'w$^a'x$^a!R$^a!{$^a~O'a$^a#m$^a~P#7gOu(ROx(SO'p$`a'w$`a'x$`a!R$`a!{$`a~O'a$`a#m$`a~P#8YO]-rO~O#W-sO~O'a$na!R$na#m$na!{$na~P!#rO#W-vO~OS.PO!T&cO!o.OO%Q-}O~O'a.QO~O]#qOj#rOk#qOl#qOq$POs9kOx#xO!T#yO!_;RO!d#vO#V9tO#t$TO$_9nO$a9qO$d$UO'f#sO~Oh.SO'].RO~P#:PO!])_O!T'`a_'`a!R'`a'W'`a~O#W.YO~OZ[X!RdX!SdX~O!R.ZO!S(VX~O!S.]O~OZ.^O~O].`O'])gO~O!T$kO']$`O^'QX!R'QX~O!R)lO^(Ua~O!c.cO~P!)cO].eO~OZ.fO~O^.gO~OS.PO!T&cO!o.OO%Q-}O'b$cO~O!R)xO_(Ra'W(Ra~O!{.mO~OS.pO!T#yO~O'g'SO!S(SP~OS.zO!T.vO!o.yO%Q.xO'b$cO~OZ/UO!R/SO!S(TX~O!S/VO~O^/XO_$[O'W$[O~O]/YO~O]/ZO'](yO~O#c/[O%r/]O~P0zO!{#eO#c/[O%r/]O~O_/^O~P){O_/`O~O%{/dOP%yiQ%yiX%yi]%yi_%yib%yic%yih%yij%yik%yil%yiq%yis%yix%yi{%yi|%yi}%yi!T%yi!_%yi!d%yi!g%yi!h%yi!i%yi!j%yi!k%yi!n%yi#d%yi#t%yi#x%yi%P%yi%R%yi%T%yi%U%yi%X%yi%Z%yi%^%yi%_%yi%a%yi%n%yi%t%yi%v%yi%x%yi%z%yi%}%yi&T%yi&Z%yi&]%yi&_%yi&a%yi&c%yi'S%yi']%yi'f%yi'o%yi'|%yi!S%yi`%yi&Q%yi~O`/jO!S/hO&Q/iO~P`O!TSO!d/lO~O&X*uOP&SiQ&SiX&Si]&Si_&Sib&Sic&Sih&Sij&Sik&Sil&Siq&Sis&Six&Si{&Si|&Si}&Si!T&Si!_&Si!d&Si!g&Si!h&Si!i&Si!j&Si!k&Si!n&Si#d&Si#t&Si#x&Si%P&Si%R&Si%T&Si%U&Si%X&Si%Z&Si%^&Si%_&Si%a&Si%n&Si%t&Si%v&Si%x&Si%z&Si%}&Si&T&Si&Z&Si&]&Si&_&Si&a&Si&c&Si'S&Si']&Si'f&Si'o&Si'|&Si!S&Si%{&Si`&Si&Q&Si~O!R#bOn$]a~O!O&ii!R&ii~P!)cO!R%yO!O'ji~O!R&_O!O'ti~O!O/rO~O!R!Va!S!Va~P#)gO]&QOk&QO!Q/xO'g(gO!R&jX!S&jX~P@aO!R+^O!S'ka~O]&YOk&YO!Q)wO'g'SO!R&oX!S&oX~O!R+aO!S'va~O!O'ui!R'ui~P!)cO_$[O!]!wO!d$XO!j0SO!{0QO'W$[O'b$cO'p&nO~O!S0VO~P!?]O!X0WO!Y0WO'^$bO'g(gO'o+gO~O!W0XO~P#LVO!TSO!W0XO!u0ZO!x0[O~P#LVO!W0XO!s0^O!t0^O!u0ZO!x0[O~P#LVO!T&cO~O!T&cO~P!#rO!R'ri!c'ri_'ri'W'ri~P!)cO!{0gO!R'ri!c'ri_'ri'W'ri~O!R&sO!c'qi~Ox$tO!T$uO#V0iO']$`O~O#WraPraZra_rajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra'Wra'fra!cra!Ora!Tranra%Qra!]ra~P#6qO#W$^aP$^aZ$^a_$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a'W$^a'f$^a!c$^a!O$^a!T$^an$^a%Q$^a!]$^a~P#7gO#W$`aP$`aZ$`a_$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a'W$`a'f$`a!c$`a!O$`a!T$`an$`a%Q$`a!]$`a~P#8YO#W$naP$naZ$na_$naj$nav$na!R$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na'W$na'f$na!c$na!O$na!T$na!{$nan$na%Q$na!]$na~P!#rO_#Oq!R#Oq'W#Oq!O#Oq!c#Oqn#Oq!T#Oq%Q#Oq!]#Oq~P!)cO!R&kX'a&kX~PJdO!R,]O'a'ma~O!Q0qO!R&lX!c&lX~P){O!R,`O!c'na~O!R,`O!c'na~P!)cO#m!fa!S!fa~PCcO#m!^a!R!^a!S!^a~P#)gO!T1UO#x^O$P1VO~O!S1ZO~On1[O~P!#rO_$Yq!R$Yq'W$Yq!O$Yq!c$Yqn$Yq!T$Yq%Q$Yq!]$Yq~P!)cO!O1]O~O],wOk,wO~Ou(ROx(SO'x(WO'p$xi'w$xi!R$xi!{$xi~O'a$xi#m$xi~P$,vOu(ROx(SO'p$zi'w$zi'x$zi!R$zi!{$zi~O'a$zi#m$zi~P$-iO#m1^O~P!#rO!Q1`O']$`O!R&tX!c&tX~O!R-PO!c'}a~O!R-PO!]!wO!c'}a~O!R-PO!]!wO'p&nO!c'}a~O'a$gi!R$gi#m$gi!{$gi~P!#rO!Q1gO'](bO!O&vX!R&vX~P!$aO!R-WO!O(Oa~O!R-WO!O(Oa~P!#rO!]!wO~O!]!wO#c1oO~Oj1rO!]!wO'p&nO~O!R'di'a'di~P!#rO!{1uO!R'di'a'di~P!#rO!c1xO~O_$Zq!R$Zq'W$Zq!O$Zq!c$Zqn$Zq!T$Zq%Q$Zq!]$Zq~P!)cO!R1|O!T(PX~P!#rO!T&cO%Q2PO~O!T&cO%Q2PO~P!#rO!T$eX$u[X_$eX!R$eX'W$eX~P!!iO$u2TOugXxgX!TgX'pgX'wgX'xgX_gX!RgX'WgX~O$u2TO~O]2ZO%R2[O'])gO!R'PX!S'PX~O!R.ZO!S(Va~OZ2`O~O^2aO~O]2dO~OS2fO!T&cO!o2eO%Q2PO~O_$[O'W$[O~P!#rO!T#yO~P!#rO!R2kO!{2mO!S(SX~O!S2nO~Ox;]O!W2wO!X2pO!Y2pO!r2vO!s2uO!t2uO!x2tO'^$bO'g(gO'o+gO~O!S2sO~P$6QOS3OO!T.vO!o2}O%Q2|O~OS3OO!T.vO!o2}O%Q2|O'b$cO~O'](yO!R'OX!S'OX~O!R/SO!S(Ta~O]3YO'g3XO~O]3ZO~O^3]O~O!c3`O~P){O_3bO~O_3bO~P){O#c3dO%r3eO~PE{O`/jO!S3iO&Q/iO~P`O!]3kO~O!R#Ti!S#Ti~P#)gO!{3mO!R#Ti!S#Ti~O!R!Vi!S!Vi~P#)gO_$[O!{3tO'W$[O~O_$[O!]!wO!{3tO'W$[O~O!X3xO!Y3xO'^$bO'g(gO'o+gO~O_$[O!]!wO!d$XO!j3yO!{3tO'W$[O'b$cO'p&nO~O!W3zO~P$:oO!W3zO!u3}O!x4OO~P$:oO_$[O!]!wO!j3yO!{3tO'W$[O'p&nO~O!R'rq!c'rq_'rq'W'rq~P!)cO!R&sO!c'qq~O#W$xiP$xiZ$xi_$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi'W$xi'f$xi!c$xi!O$xi!T$xin$xi%Q$xi!]$xi~P$,vO#W$ziP$ziZ$zi_$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi'W$zi'f$zi!c$zi!O$zi!T$zin$zi%Q$zi!]$zi~P$-iO#W$giP$giZ$gi_$gij$giv$gi!R$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi'W$gi'f$gi!c$gi!O$gi!T$gi!{$gin$gi%Q$gi!]$gi~P!#rO!R&ka'a&ka~P!#rO!R&la!c&la~P!)cO!R,`O!c'ni~O#m#Oi!R#Oi!S#Oi~P#)gOP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zij#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~O#[#Zi~P$DVO#[9[O~P$DVOP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O'fQOZ#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~Oj#Zi~P$F_Oj9^O~P$F_OP#^Oj9^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O'fQO#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P$HgOZ9iO!a9`O#a9`O#b9`O#c9`O~P$HgOP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO'fQO#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'x#Zi!R#Zi!S#Zi~O'w#Zi~P$J{O'w!}O~P$J{OP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO#g9cO'fQO'w!}O#i#Zi#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~O'x#Zi~P$MTO'x#OO~P$MTOP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO#g9cO#i9eO'fQO'w!}O'x#OO~O#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~P% ]O_#ky!R#ky'W#ky!O#ky!c#kyn#ky!T#ky%Q#ky!]#ky~P!)cOP#ZiZ#Zij#Ziv#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'f#Zi!R#Zi!S#Zi~P!#rO!b!yOu'eXx'eX'p'eX'w'eX'x'eX!S'eX~OP'eXZ'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX#m'eX'f'eX!R'eX~P%%mO#m#ni!R#ni!S#ni~P#)gO!S4`O~O!R&sa!S&sa~P#)gO!]!wO'p&nO!R&ta!c&ta~O!R-PO!c'}i~O!R-PO!]!wO!c'}i~O!O&va!R&va~P!#rO!]4gO~O!R-WO!O(Oi~P!#rO!R-WO!O(Oi~O!O4kO~O!]!wO#c4pO~Oj4qO!]!wO'p&nO~O!O4sO~O'a$iq!R$iq#m$iq!{$iq~P!#rO_$Zy!R$Zy'W$Zy!O$Zy!c$Zyn$Zy!T$Zy%Q$Zy!]$Zy~P!)cO!R1|O!T(Pa~O!T&cO%Q4xO~O!T&cO%Q4xO~P!#rO_#Oy!R#Oy'W#Oy!O#Oy!c#Oyn#Oy!T#Oy%Q#Oy!]#Oy~P!)cOZ4{O~O]4}O'])gO~O!R.ZO!S(Vi~O]5QO~O^5RO~O'g'SO!R&{X!S&{X~O!R2kO!S(Sa~O!S5`O~P$6QOx;^O'g(gO'o+gO~O!W5cO!X5bO!Y5bO!x0[O'^$bO'g(gO'o+gO~O!s5dO!t5dO~P%.RO!X5bO!Y5bO'^$bO'g(gO'o+gO~O!T.vO~O!T.vO%Q5fO~O!T.vO%Q5fO~P!#rOS5kO!T.vO!o5jO%Q5fO~OZ5pO!R'Oa!S'Oa~O!R/SO!S(Ti~O]5sO~O!c5tO~O!c5uO~O!c5vO~O!c5vO~P){O_5xO~O!]5{O~O!c5|O~O!R'ui!S'ui~P#)gO_$[O'W$[O~P!)cO_$[O!{6RO'W$[O~O_$[O!]!wO!{6RO'W$[O~O!X6WO!Y6WO'^$bO'g(gO'o+gO~O_$[O!]!wO!j6XO!{6RO'W$[O'p&nO~O!d$XO'b$cO~P%2mO!W6YO~P%2[O!R'ry!c'ry_'ry'W'ry~P!)cO#W$iqP$iqZ$iq_$iqj$iqv$iq!R$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq'W$iq'f$iq!c$iq!O$iq!T$iq!{$iqn$iq%Q$iq!]$iq~P!#rO!R&li!c&li~P!)cO#m#Oq!R#Oq!S#Oq~P#)gOu-pOv-pOx-qO'pra'wra'xra!Sra~OPraZrajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra#mra'fra!Rra~P%6eOu(ROx(SO'p$^a'w$^a'x$^a!S$^a~OP$^aZ$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a#m$^a'f$^a!R$^a~P%8fOu(ROx(SO'p$`a'w$`a'x$`a!S$`a~OP$`aZ$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a#m$`a'f$`a!R$`a~P%:gOP$naZ$naj$nav$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na#m$na'f$na!R$na!S$na~P!#rO#m$Yq!R$Yq!S$Yq~P#)gO#m$Zq!R$Zq!S$Zq~P#)gO!S6dO~O'a$|y!R$|y#m$|y!{$|y~P!#rO!]!wO!R&ti!c&ti~O!]!wO'p&nO!R&ti!c&ti~O!R-PO!c'}q~O!O&vi!R&vi~P!#rO!R-WO!O(Oq~O!O6jO~P!#rO!O6jO~O!R'dy'a'dy~P!#rO!R&ya!T&ya~P!#rO!T$tq_$tq!R$tq'W$tq~P!#rOZ6qO~O!R.ZO!S(Vq~O]6tO~O!T&cO%Q6uO~O!T&cO%Q6uO~P!#rO!{6vO!R&{a!S&{a~O!R2kO!S(Si~P#)gO!X6|O!Y6|O'^$bO'g(gO'o+gO~O!W7OO!x4OO~P%BkO!T.vO%Q7RO~O!T.vO%Q7RO~P!#rO]7YO'g7XO~O!R/SO!S(Tq~O!c7[O~O!c7[O~P){O!c7^O~O!c7_O~O!R#Ty!S#Ty~P#)gO_$[O!{7eO'W$[O~O_$[O!]!wO!{7eO'W$[O~O!X7hO!Y7hO'^$bO'g(gO'o+gO~O_$[O!]!wO!j7iO!{7eO'W$[O'p&nO~O#W$|yP$|yZ$|y_$|yj$|yv$|y!R$|y!a$|y!b$|y!d$|y!j$|y#[$|y#]$|y#^$|y#_$|y#`$|y#a$|y#b$|y#c$|y#e$|y#g$|y#i$|y#j$|y'W$|y'f$|y!c$|y!O$|y!T$|y!{$|yn$|y%Q$|y!]$|y~P!#rO#m#ky!R#ky!S#ky~P#)gOP$giZ$gij$giv$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi#m$gi'f$gi!R$gi!S$gi~P!#rOu(ROx(SO'x(WO'p$xi'w$xi!S$xi~OP$xiZ$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi#m$xi'f$xi!R$xi~P%JROu(ROx(SO'p$zi'w$zi'x$zi!S$zi~OP$ziZ$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi#m$zi'f$zi!R$zi~P%LSO#m$Zy!R$Zy!S$Zy~P#)gO#m#Oy!R#Oy!S#Oy~P#)gO!]!wO!R&tq!c&tq~O!R-PO!c'}y~O!O&vq!R&vq~P!#rO!O7mO~P!#rO!R.ZO!S(Vy~O!R2kO!S(Sq~O!X7yO!Y7yO'^$bO'g(gO'o+gO~O!T.vO%Q7|O~O!T.vO%Q7|O~P!#rO!c8PO~O_$[O!{8UO'W$[O~O_$[O!]!wO!{8UO'W$[O~OP$iqZ$iqj$iqv$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq#m$iq'f$iq!R$iq!S$iq~P!#rO!R&{q!S&{q~P#)gO_$[O!{8hO'W$[O~OP$|yZ$|yj$|yv$|y!a$|y!b$|y!d$|y!j$|y#[$|y#]$|y#^$|y#_$|y#`$|y#a$|y#b$|y#c$|y#e$|y#g$|y#i$|y#j$|y#m$|y'f$|y!R$|y!S$|y~P!#rO!S!za!W!za!X!za!Y!za!r!za!s!za!t!za!x!za'^!za'g!za'o!za~P!#rO!W'eX!X'eX!Y'eX!r'eX!s'eX!t'eX!x'eX'^'eX'g'eX'o'eX~P%%mO!Wra!Xra!Yra!rra!sra!tra!xra'^ra'gra'ora~P%6eO!W$^a!X$^a!Y$^a!r$^a!s$^a!t$^a!x$^a'^$^a'g$^a'o$^a~P%8fO!W$`a!X$`a!Y$`a!r$`a!s$`a!t$`a!x$`a'^$`a'g$`a'o$`a~P%:gO!S$na!W$na!X$na!Y$na!r$na!s$na!t$na!x$na'^$na'g$na'o$na~P!#rO!W$xi!X$xi!Y$xi!r$xi!s$xi!t$xi!x$xi'^$xi'g$xi'o$xi~P%JRO!W$zi!X$zi!Y$zi!r$zi!s$zi!t$zi!x$zi'^$zi'g$zi'o$zi~P%LSO!S$gi!W$gi!X$gi!Y$gi!r$gi!s$gi!t$gi!x$gi'^$gi'g$gi'o$gi~P!#rO!S$iq!W$iq!X$iq!Y$iq!r$iq!s$iq!t$iq!x$iq'^$iq'g$iq'o$iq~P!#rO!S$|y!W$|y!X$|y!Y$|y!r$|y!s$|y!t$|y!x$|y'^$|y'g$|y'o$|y~P!#rOn'hX~P.jOn[X!O[X!c[X%r[X!T[X%Q[X!][X~P$zO!]dX!c[X!cdX'pdX~P;aOP9TOQ9TO]cOb;POc!jOhcOj9TOkcOlcOq9TOs9TOxRO{cO|cO}cO!TSO!_9VO!dUO!g9TO!h9TO!i9TO!j9TO!k9TO!n!iO#t!lO#x^O']'bO'fQO'oYO'|:}O~O]#qOh$OOj#rOk#qOl#qOq$POs9lOx#xO!T#yO!_;SO!d#vO#V9uO#t$TO$_9oO$a9rO$d$UO']&zO'f#sO~O!R9gO!S$]a~O]#qOh$OOj#rOk#qOl#qOq$POs9mOx#xO!T#yO!_;TO!d#vO#V9vO#t$TO$_9pO$a9sO$d$UO']&zO'f#sO~O#d'iO~P&3xO!S[X!SdX~P;aO!]9ZO~O#W9YO~O!]!wO#W9YO~O!{9jO~O#c9`O~O!{9wO!R'uX!S'uX~O!{9jO!R'sX!S'sX~O#W9xO~O'a9zO~P!#rO#W:RO~O#W:SO~O#W:TO~O!]!wO#W:UO~O!]!wO#W9xO~O#m:VO~P#)gO#W:WO~O#W:XO~O#W:YO~O#W:ZO~O#W:[O~O#m:]O~P!#rO#m:^O~P!#rO#m:_O~P!#rO!O:`O~O!O:aO~P!#rO!O:aO~O!O:bO~P!#rO!]!wO#c;YO~O!]!wO#c;[O~O#x~!b!r!t!u#U#V'|$_$a$d$u%P%Q%R%X%Z%^%_%a%c~UT#x'|#]}'Y'Z#z'Y']'g~",goto:"#Hc(ZPPPPPPPP([P(lP*`PPPP-zPP.a3s5g5zP5zPPP5zP7t5zP5zP7xPP8OP8d<uPPPP<yPPPP<y?kPPP?qBSP<yPDgPPPPF`<yPPPPPHX<yPPKYLVPPPPLZMsPM{N|PLV<y<y!$^!'X!+z!+z!/ZPPP!/b!2W<yPPPPPPPPPP!4}P!6`PP<y!7mP<yP<y<y<y<yP<y!:[PP!=TP!?x!@Q!@U!@UP!=QP!@Y!@YP!B}P!CR<y<y!CX!E{5zP5zP5z5zP!GO5z5z!IU5z!Ki5z!Mi5z5z!NV#!]#!]#!a#!]#!iP#!]P5z##e5z#$y5z5z-zPPP#&cPP#&{#&{P#&{P#'b#&{PP#'hP#'_P#'_#'zMw#'_#(i#(o#(r([#(u([P#(|#(|#(|P([P([P([P([PP([P#)S#)VP#)V([P#)ZP#)^P([P([P([P([P([P([([#)d#)n#)t#)z#*Y#*`#*f#*p#*v#+V#+]#+k#+q#+w#,V#,l#.[#.j#.p#.v#.|#/S#/^#/d#/j#/t#0W#0^PPPPPPPP#0dPP#1W#4`PP#5v#5}#6VPP#;X#=l#Ch#Ck#Cn#Cy#C|PP#DP#DT#Dr#Ei#Em#FRPP#FV#F]#FaP#Fd#Fh#Fk#GZ#Gq#Gv#Gy#G|#HS#HV#HZ#H_mhOSj}!n$Z%b%e%f%h*m*r/d/gQ$hmQ$opQ%YyS&U!b+^Q&j!jS(j#y(oQ)e$iQ)r$qQ*^%SQ+d&]S+i&c+kQ+{&kQ-h(qQ/R*_Y0W+m+n+o+p+qS2p.v2rU3x0X0Z0^U5b2u2v2wS6W3z3}S6|5c5dQ7h6YR7y7O$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8h!j'd#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ(z$QQ)j$kQ*`%VQ*g%_Q,V9kQ.T)_Q.`)kQ/Z*eQ2Z.ZQ3V/SQ4X9mQ4}2[R8s9lpeOSjy}!n$Z%X%b%e%f%h*m*r/d/gR*b%Z&WVOSTjkn}!S!W!k!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%y&R&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;P;Q[!cRU!]!`%w&VQ$alQ$gmS$lp$qv$vrs!r!u$X$t&_&s&v)v)w)x*k+W+f,Q,S/l0iQ%OwQ&g!iQ&i!jS(^#v(hS)d$h$iQ)h$kQ)u$sQ*X%QQ*]%SS+z&j&kQ-T(_Q.X)eQ._)kQ.a)lQ.d)pQ.|*YS/Q*^*_Q0e+{Q1_-PQ2Y.ZQ2^.^Q2c.fQ3U/RQ4d1`Q4|2[Q5P2`Q6p4{R7p6q!Y$em!j$g$h$i&T&i&j&k(i)d)e+Z+h+z+{-a.X/}0T0Y0e1q3w3|6U7f8VQ)]$aQ)}${Q*Q$|Q*[%SQ.h)uQ.{*XU/P*]*^*_Q3P.|S3T/Q/RQ5]2oQ5o3US6z5^5aS7w6{6}Q8_7xR8n8`W#|a$c(w:}S${t%XQ$|uQ$}vR){$y$o#{a!w!y#d#v#x$R$S$W&f'|(V(X(Y(a(e(u(v)Y)[)_)|*P+w,]-W-Y-s-}.P.m.p.x.z1^1g1o1u1|2P2T2f2|3O4g4p4x5f5k6u7R7|9Z9i9n9o9p9q9r9s9t9u9v9{9|9}:O:P:Q:R:S:T:W:X:Y:]:^:_:};U;V;W;Y;[T'}#s(OX({$Q9k9l9mU&Y!b$u+aQ'T!{Q)o$nQ.q*RQ1v-pR5X2k&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;Q$]#aZ!_!o$_%v%|&x'P'V'W'X'Y'Z'[']'^'_'`'a'c'f'j't)n+P+[+e+|,[,b,e,g,u-t/s/v0f0p0t0u0v0w0x0y0z0{0|0}1O1P1Q1T1Y1z2W3o3r4S4V4W4]4^5Z5}6Q6^6b6c7b7s8S8f8r9U:pT!XQ!Y&_cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ&W!bR/y+^Y&Q!b&U&]+^+dS(i#y(oS+h&c+kS-a(j(qQ-b(kQ-i(rQ.s*TU0T+i+m+nU0Y+o+p+qS0_+r2tQ1q-hQ1s-jQ1t-kS2o.v2rU3w0W0X0ZQ3{0[Q3|0^S5^2p2wS5a2u2vU6U3x3z3}Q6Z4OS6{5b5cQ6}5dS7f6W6YS7x6|7OQ8V7hQ8`7yQ;X;]R;Z;^lhOSj}!n$Z%b%e%f%h*m*r/d/gQ%j!QS&w!v9YQ)b$fQ*V%OQ*W%PQ+x&hS,Z&|9xS-u)S:UQ.V)cQ.u*UQ/k*tQ/m*uQ/u+XQ0]+oQ0c+yS1{-v:ZQ2U.WS2X.Y:[Q3n/wQ3q0OQ4Q0dQ4z2VQ6O3pQ6S3vQ6[4RQ7`5|Q7c6TQ8R7dQ8e8TR8q8g$W#`Z!_!o%v%|&x'P'V'W'X'Y'Z'[']'^'_'`'a'c'f'j't)n+P+[+e+|,[,b,e,u-t/s/v0f0p0t0u0v0w0x0y0z0{0|0}1O1P1Q1T1Y1z2W3o3r4S4V4W4]4^5Z5}6Q6^6b6c7b7s8S8f8r9U:pW(t#z&{1S8jT)W$_,g$W#_Z!_!o%v%|&x'P'V'W'X'Y'Z'[']'^'_'`'a'c'f'j't)n+P+[+e+|,[,b,e,u-t/s/v0f0p0t0u0v0w0x0y0z0{0|0}1O1P1Q1T1Y1z2W3o3r4S4V4W4]4^5Z5}6Q6^6b6c7b7s8S8f8r9U:pQ'e#`S)V$_,gR-w)W&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ%e{Q%f|Q%h!OQ%i!PR/c*pQ&d!iQ)X$aQ+u&gS-|)])uS0`+s+tW2O-y-z-{.hS4P0a0bU4w2Q2R2SU6n4v5T5UQ7o6oR8Z7rT+j&c+kS+h&c+kU0T+i+m+nU0Y+o+p+qS0_+r2tS2o.v2rU3w0W0X0ZQ3{0[Q3|0^S5^2p2wS5a2u2vU6U3x3z3}Q6Z4OS6{5b5cQ6}5dS7f6W6YS7x6|7OQ8V7hR8`7yS+j&c+kT2q.v2rS&q!q/aQ-S(^Q-_(iS0S+h2oQ1d-TS1l-`-iU3y0Y0_5aQ4c1_S4n1r1tU6X3{3|6}Q6f4dQ6m4qR7i6ZQ!xXS&p!q/aQ)T$YQ)`$dQ)f$jQ,O&qQ-R(^Q-^(iQ-c(lQ.U)aQ.}*ZS0R+h2oS1c-S-TS1k-_-iQ1n-bQ1p-dQ3R/OW3u0S0Y0_5aQ4b1_Q4f1dS4j1l1tQ4o1sQ5m3SW6V3y3{3|6}S6e4c4dS6i4k:`Q6k4nQ6x5[Q7V5nS7g6X6ZQ7k6fS7l6j:aQ7n6mQ7u6yQ8O7WQ8W7iS8Y7m:bQ8]7vQ8l8^Q8x8mQ9P8yQ:i:dQ:t:nQ:u:oQ:y;XR:{;Z$rWORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hS!xn!k!j:c#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QR:i;P$rXORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hQ$Yb!Y$dm!j$g$h$i&T&i&j&k(i)d)e+Z+h+z+{-a.X/}0T0Y0e1q3w3|6U7f8VS$jn!kQ)a$eQ*Z%SW/O*[*]*^*_U3S/P/Q/RQ5[2oS5n3T3UU6y5]5^5aQ7W5oU7v6z6{6}S8^7w7xS8m8_8`Q8y8n!j:d#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ:n;OR:o;P$f]OSTjk}!S!W!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%b%d%e%f%h%l%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hY!hRU!]!`%wv$vrs!r!u$X$t&_&s&v)v)w)x*k+W+f,Q,S/l0iQ*h%_!h:e#]#k'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QR:h&VS&Z!b$uR/{+a$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8h!j'd#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QR*g%_$roORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hQ'T!{!k:f#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;Q!h#VZ!_$_%v%|&x'P'^'_'`'a'f'j)n+P+e+|,[,b,u-t0f0p1Q1z2W3r4S4V6Q7b8S8f8r9U!R9b'c't+[,g/s/v0t0|0}1O1P1T1Y3o4W4]4^5Z5}6^6b6c7s:p!d#XZ!_$_%v%|&x'P'`'a'f'j)n+P+e+|,[,b,u-t0f0p1Q1z2W3r4S4V6Q7b8S8f8r9U}9d'c't+[,g/s/v0t1O1P1T1Y3o4W4]4^5Z5}6^6b6c7s:p!`#]Z!_$_%v%|&x'P'f'j)n+P+e+|,[,b,u-t0f0p1Q1z2W3r4S4V6Q7b8S8f8r9Un(Y#t&})R,}-V-l-m0n1y4a4r:j:v:w:xx;Q'c't+[,g/s/v0t1T1Y3o4W4]4^5Z5}6^6b6c7s:p!d;U&y'h(](c+t,Y,r-Z-x-{.l.n0b0m1e1i2S2h2j2z4U4h4l4t4y5U5i6]6h6l7T:z:|Y;V8i8v8}9Q9SZ;W1R4[6_7j8X&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QS#l`#mR1V,j&e_ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,j,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QS#g^#nT'm#i'qT#h^#nT'o#i'q&e`ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,j,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QT#l`#mQ#o`R'x#m$rbORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8h!k;O#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;Q#RdOSUj}!S!W!n!|#k$Z%Z%^%_%b%d%e%f%h%l&R&e'v)Z*i*m*r+v,k-q.O.y/[/]/^/`/d/g/i1U2e2}3b3d3e5j5xv#za!y$R$S$W(V(X(Y(a(u(v,]-s1^1u:};U;V;W#Q&{!w#d#v#x&f'|(e)Y)[)_)|*P+w-W-Y-}.P.m.p.x.z1g1o1|2P2T2f2|3O4g4p4x5f5k6u7R7|9n9q9t9{:O:R:W:];Y;[Q)P$UQ,v(Rb1S9i9p9s9v9}:Q:T:Y:_c8j9Z9o9r9u9|:P:S:X:^v#wa!y$R$S$W(V(X(Y(a(u(v,]-s1^1u:};U;V;WS(l#y(oQ)Q$VQ-d(m#Q:k!w#d#v#x&f'|(e)Y)[)_)|*P+w-W-Y-}.P.m.p.x.z1g1o1|2P2T2f2|3O4g4p4x5f5k6u7R7|9n9q9t9{:O:R:W:];Y;[b:l9Z9o9r9u9|:P:S:X:^b:m9i9p9s9v9}:Q:T:Y:_Q:q;RQ:r;SR:s;Tv#za!y$R$S$W(V(X(Y(a(u(v,]-s1^1u:};U;V;W#Q&{!w#d#v#x&f'|(e)Y)[)_)|*P+w-W-Y-}.P.m.p.x.z1g1o1|2P2T2f2|3O4g4p4x5f5k6u7R7|9n9q9t9{:O:R:W:];Y;[b1S9i9p9s9v9}:Q:T:Y:_c8j9Z9o9r9u9|:P:S:X:^lfOSj}!n$Z%b%e%f%h*m*r/d/gQ(d#xQ*{%oQ*|%qR1f-W$n#{a!w!y#d#v#x$R$S$W&f'|(V(X(Y(a(e(u(v)Y)[)_)|*P+w,]-W-Y-s-}.P.m.p.x.z1^1g1o1u1|2P2T2f2|3O4g4p4x5f5k6u7R7|9Z9i9n9o9p9q9r9s9t9u9v9{9|9}:O:P:Q:R:S:T:W:X:Y:]:^:_:};U;V;W;Y;[Q*O$|Q.o*QQ2i.nR5W2jT(n#y(oS(n#y(oT2q.v2rQ)`$dQ-c(lQ.U)aQ.}*ZQ3R/OQ5m3SQ6x5[Q7V5nQ7u6yQ8O7WQ8]7vQ8l8^Q8x8mR9P8yn(V#t&})R,}-V-l-m0n1y4a4r:j:v:w:x!d9{&y'h(](c+t,Y,r-Z-x-{.l.n0b0m1e1i2S2h2j2z4U4h4l4t4y5U5i6]6h6l7T:z:|Y9|8i8v8}9Q9SZ9}1R4[6_7j8Xp(X#t&})R,{,}-V-l-m0n1y4a4r:j:v:w:x!f:O&y'h(](c+t,Y,r-Z-x-{.l.n0b0k0m1e1i2S2h2j2z4U4h4l4t4y5U5i6]6h6l7T:z:|[:P8i8v8{8}9Q9S]:Q1R4[6_6`7j8XpeOSjy}!n$Z%X%b%e%f%h*m*r/d/gQ%UxR*i%_peOSjy}!n$Z%X%b%e%f%h*m*r/d/gR%UxQ*S$}R.k){qeOSjy}!n$Z%X%b%e%f%h*m*r/d/gQ.w*XS2{.{.|W5e2x2y2z3PU7Q5g5h5iU7z7P7S7TQ8a7{R8o8bQ%]yR*c%XR3Y/UR7Y5pS$lp$qR.a)lQ%bzR*m%cR*s%iT/e*r/gR*w%jQ*v%jR/n*wQjOQ!nST$^j!nQ(O#sR,s(OQ!YQR%t!YQ!^RU%z!^%{+SQ%{!_R+S%|Q+_&WR/z+_Q,^&}R0o,^Q,a'PS0r,a0sR0s,bQ+k&cR0U+kS!eR$tU&`!e&a+TQ&a!fR+T%}Q+b&ZR/|+bQ&t!sQ,P&rU,T&t,P0jR0j,UQ'q#iR,l'qQ#m`R'w#mQ#cZU'g#c+O9hQ+O9UR9h'tQ-Q(^W1a-Q1b4e6gU1b-R-S-TS4e1c1dR6g4f$Z(T#t&y&}'h(](c(|(})R+t,W,X,Y,r,{,|,}-V-Z-l-m-x-{.l.n0b0k0l0m0n1R1e1i1y2S2h2j2z4U4Y4Z4[4a4h4l4r4t4y5U5i6]6_6`6a6h6l7T7j8X8i8t8u8v8{8|8}9Q9S:j:v:w:x:z:|Q-X(cU1h-X1j4iQ1j-ZR4i1iQ(o#yR-f(oQ(x#}R-o(xQ1}-xR4u1}Q)y$wR.j)yQ2l.qS5Y2l6wR6w5ZQ*U%OR.t*UQ2r.vR5_2rQ/T*`S3W/T5qR5q3YQ.[)hW2].[2_5O6rQ2_._Q5O2^R6r5PQ)m$lR.b)mQ/g*rR3h/gWiOSj!nQ%g}Q)U$ZQ*l%bQ*n%eQ*o%fQ*q%hQ/b*mS/e*r/gR3g/dQ$]gQ%k!RQ%n!TQ%p!UQ%r!VQ)t$rQ)z$xQ*b%]Q*y%mQ-e(nS/W*c*fQ/o*xQ/p*{Q/q*|S0P+h2oQ2b.eQ2g.lQ3Q.}Q3[/YQ3f/cY3s0R0S0Y0_5aQ5S2dQ5V2hQ5l3RQ5r3Z[6P3r3u3y3{3|6}Q6s5QQ7U5mQ7Z5sW7a6Q6V6X6ZQ7q6tQ7t6xQ7}7VU8Q7b7g7iQ8[7uQ8c8OS8d8S8WQ8k8]Q8p8fQ8w8lQ8z8rQ9O8xR9R9PQ$fmQ&h!jU)c$g$h$iQ+X&TU+y&i&j&kQ-](iS.W)d)eQ/w+ZQ0O+hS0d+z+{Q1m-aQ2V.XQ3p/}S3v0T0YQ4R0eQ4m1qS6T3w3|Q7d6UQ8T7fR8g8VS#ua:}R)^$cU#}a$c:}R-n(wQ#taS&y!w)_Q&}!yQ'h#dQ(]#vQ(c#xQ(|$RQ(}$SQ)R$WQ+t&fQ,W9nQ,X9qQ,Y9tQ,r'|Q,{(VQ,|(XQ,}(YQ-V(aQ-Z(eQ-l(uQ-m(vd-x)Y-}.x2P2|4x5f6u7R7|Q-{)[Q.l)|Q.n*PQ0b+wQ0k9{Q0l:OQ0m:RQ0n,]Q1R9iQ1e-WQ1i-YQ1y-sQ2S.PQ2h.mQ2j.pQ2z.zQ4U:WQ4Y9pQ4Z9sQ4[9vQ4a1^Q4h1gQ4l1oQ4r1uQ4t1|Q4y2TQ5U2fQ5i3OQ6]:]Q6_:TQ6`9}Q6a:QQ6h4gQ6l4pQ7T5kQ7j:YQ8X:_Q8i9ZQ8t9oQ8u9rQ8v9uQ8{9|Q8|:PQ8}:SQ9Q:XQ9S:^Q:j:}Q:v;UQ:w;VQ:x;WQ:z;YR:|;[lgOSj}!n$Z%b%e%f%h*m*r/d/gS!pU%dQ%m!SQ%s!WQ'U!|Q'u#kS*f%Z%^Q*j%_Q*x%lQ+U&RQ+s&eQ,p'vQ-z)ZQ/_*iQ0a+vQ1X,kQ1w-qQ2R.OQ2y.yQ3^/[Q3_/]Q3a/^Q3c/`Q3j/iQ4_1UQ5T2eQ5h2}Q5w3bQ5y3dQ5z3eQ7S5jR7]5x!vZOSUj}!S!n!|$Z%Z%^%_%b%d%e%f%h%l&R&e)Z*i*m*r+v-q.O.y/[/]/^/`/d/g/i2e2}3b3d3e5j5xQ!_RQ!oTQ$_kS%v!]%yQ%|!`Q&x!vQ'P!zQ'V#PQ'W#QQ'X#RQ'Y#SQ'Z#TQ'[#UQ']#VQ'^#WQ'_#XQ'`#YQ'a#ZQ'c#]Q'f#bQ'j#eW't#k'v,k1UQ)n$mS+P%w+RS+[&V/xQ+e&^Q+|&oQ,[&|Q,b'QQ,e9TQ,g9VQ,u(QQ-t)SQ/s+VQ/v+YQ0f+}Q0p,`Q0t9YQ0u9[Q0v9]Q0w9^Q0x9_Q0y9`Q0z9aQ0{9bQ0|9cQ0}9dQ1O9eQ1P9fQ1Q,fQ1T9jQ1Y9gQ1z-vQ2W.YQ3o9wQ3r0QQ4S0gQ4V0qQ4W9xQ4]9zQ4^:UQ5Z2mQ5}3mQ6Q3tQ6^:VQ6b:ZQ6c:[Q7b6RQ7s6vQ8S7eQ8f8UQ8r8hQ9U!WR:p;QR!aRR&X!bS&T!b+^S+Z&U&]R/}+dR'O!yR'R!zT!tU$XS!sU$XU$wrs*kS&r!r!uQ,R&sQ,U&vQ.i)xS0h,Q,SR4T0i`!dR!]!`$t%w&_)v+fh!qUrs!r!u$X&s&v)x,Q,S0iQ/a*kQ/t+WQ3l/lT:g&V)wT!gR$tS!fR$tS%x!]&_S%}!`)vS+Q%w+fT+]&V)wT&[!b$uQ#i^R'z#nT'p#i'qR1W,jT(`#v(hR(f#xQ-y)YQ2Q-}Q2x.xQ4v2PQ5g2|Q6o4xQ7P5fQ7r6uQ7{7RR8b7|lhOSj}!n$Z%b%e%f%h*m*r/d/gQ%[yR*b%XV$xrs*kR.r*RR*a%VQ$ppR)s$qR)i$kT%`z%cT%az%cT/f*r/g",nodeNames:"⚠ ArithOp ArithOp InterpolationStart extends LineComment BlockComment Script ExportDeclaration export Star as VariableName String from ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Interpolation null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression PrivatePropertyName BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",maxTerm:332,context:a,nodeProps:[["closedBy",3,"InterpolationEnd",40,"]",51,"}",66,")",132,"JSXSelfCloseEndTag JSXEndTag",146,"JSXEndTag"],["group",-26,8,15,17,58,184,188,191,192,194,197,200,211,213,219,221,223,225,228,234,240,242,244,246,248,250,251,"Statement",-30,12,13,24,27,28,41,43,44,45,47,52,60,68,74,75,91,92,101,103,119,122,124,125,126,127,129,130,148,149,151,"Expression",-22,23,25,29,32,34,152,154,156,157,159,160,161,163,164,165,167,168,169,178,180,182,183,"Type",-3,79,85,90,"ClassItem"],["openedBy",30,"InterpolationStart",46,"[",50,"{",65,"(",131,"JSXStartTag",141,"JSXStartTag JSXStartCloseTag"]],propSources:[f],skippedNodes:[0,5,6],repeatNodeCount:28,tokenData:"!C}~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst0htu2`uv4pvw5ewx6cxy<yyz=Zz{=k{|>k|}?O}!O>k!O!P?`!P!QCl!Q!R!0[!R![!1q![!]!7s!]!^!8V!^!_!8g!_!`!9d!`!a!:[!a!b!<R!b!c%T!c!}2`!}#O!=d#O#P%T#P#Q!=t#Q#R!>U#R#S2`#S#T!>i#T#o2`#o#p!>y#p#q!?O#q#r!?f#r#s!?x#s$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$I|2`$I|$I}!Bq$I}$JO!Bq$JO$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`W%YR$UWO!^%T!_#o%T#p~%T7Z%jg$UW'Y7ROX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T7Z'YR$UW'Z7RO!^%T!_#o%T#p~%T$T'jS$UW!j#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#e#v$UWO!^%T!_!`(Z!`#o%T#p~%T$O(bR#e#v$UWO!^%T!_#o%T#p~%T'u(rZ$UW]!ROY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV$UWOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR$P&j$UWO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO$P&j'u*{R$P&j$UW]!RO!^%T!_#o%T#p~%T'm+ZV]!ROY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U'm+wO$P&j]!R'm+zROr+Urs,Ts~+U'm,[U$P&j]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R,sU]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R-[O]!R!R-_PO~,n'u-gV$UWOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k'u.VZ$P&j$UW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/PZ$UW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/yR$UW]!RO!^%T!_#o%T#p~%T!Z0XT$UWO!^.x!^!_,n!_#o.x#o#p,n#p~.x2k0mZ$UWOt%Ttu1`u!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`2k1g]$UW'o2cOt%Ttu1`u!Q%T!Q![1`![!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`7Z2k_$UW#zS']%k'g2bOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`[3q_$UW#zSOt%Ttu3ju}%T}!O3j!O!Q%T!Q![3j![!^%T!_!c%T!c!}3j!}#R%T#R#S3j#S#T%T#T#o3j#p$g%T$g~3j$O4wS#^#v$UWO!^%T!_!`5T!`#o%T#p~%T$O5[R$UW#o#vO!^%T!_#o%T#p~%T6d5lU'x6[$UWOv%Tvw6Ow!^%T!_!`5T!`#o%T#p~%T$O6VS$UW#i#vO!^%T!_!`5T!`#o%T#p~%T'u6jZ$UW]!ROY6cYZ7]Zw6cwx*rx!^6c!^!_8T!_#O6c#O#P:T#P#o6c#o#p8T#p~6c&r7bV$UWOw7]wx*Px!^7]!^!_7w!_#o7]#o#p7w#p~7]&j7zROw7wwx*mx~7w'm8YV]!ROY8TYZ7wZw8Twx+px#O8T#O#P8o#P~8T'm8rROw8Twx8{x~8T'm9SU$P&j]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R9kU]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R:QPO~9f'u:YV$UWOw6cwx:ox!^6c!^!_8T!_#o6c#o#p8T#p~6c'u:xZ$P&j$UW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z;rZ$UW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z<jT$UWO!^;k!^!_9f!_#o;k#o#p9f#p~;k%V=QR!d$}$UWO!^%T!_#o%T#p~%TZ=bR!cR$UWO!^%T!_#o%T#p~%T5s=tU'^2s#_#v$UWOz%Tz{>W{!^%T!_!`5T!`#o%T#p~%T$O>_S#[#v$UWO!^%T!_!`5T!`#o%T#p~%T$u>rSj$m$UWO!^%T!_!`5T!`#o%T#p~%T&i?VR!R&a$UWO!^%T!_#o%T#p~%T7Z?gVu6`$UWO!O%T!O!P?|!P!Q%T!Q![@r![!^%T!_#o%T#p~%Ty@RT$UWO!O%T!O!P@b!P!^%T!_#o%T#p~%Ty@iR!Qq$UWO!^%T!_#o%T#p~%Ty@yZ$UWkqO!Q%T!Q![@r![!^%T!_!g%T!g!hAl!h#R%T#R#S@r#S#X%T#X#YAl#Y#o%T#p~%TyAqZ$UWO{%T{|Bd|}%T}!OBd!O!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyBiV$UWO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyCVV$UWkqO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T7ZCs`$UW#]#vOYDuYZ%TZzDuz{Jl{!PDu!P!Q!-e!Q!^Du!^!_Fx!_!`!.^!`!a!/]!a!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXD|[$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXEy_$UW}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%TPF}V}POYFxZ!PFx!P!QGd!Q!}Fx!}#OG{#O#PHh#P~FxPGiU}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGdPHOTOYG{Z#OG{#O#PH_#P#QFx#Q~G{PHbQOYG{Z~G{PHkQOYFxZ~FxXHvY$UWOYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~HqXIkV$UWOYHqYZ%TZ!^Hq!^!_G{!_#oHq#o#pG{#p~HqXJVV$UWOYDuYZ%TZ!^Du!^!_Fx!_#oDu#o#pFx#p~Du7ZJs^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q!,R!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7ZKtV$UWOzKoz{LZ{!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZL`X$UWOzKoz{LZ{!PKo!P!QL{!Q!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZMSR$UWU7RO!^%T!_#o%T#p~%T7RM`ROzM]z{Mi{~M]7RMlTOzM]z{Mi{!PM]!P!QM{!Q~M]7RNQOU7R7ZNX^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q! T!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7Z! ^_$UWU7R}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%T7R!!bY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!&x!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#VY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!#u!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#|UU7R}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGd7R!$cWOY!$`YZM]Zz!$`z{!${{#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%OYOY!$`YZM]Zz!$`z{!${{!P!$`!P!Q!%n!Q#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%sTU7ROYG{Z#OG{#O#PH_#P#QFx#Q~G{7R!&VTOY!$`YZM]Zz!$`z{!${{~!$`7R!&iTOY!!]YZM]Zz!!]z{!#Q{~!!]7R!&}_}POzM]z{Mi{#ZM]#Z#[!&x#[#]M]#]#^!&x#^#aM]#a#b!&x#b#gM]#g#h!&x#h#iM]#i#j!&x#j#mM]#m#n!&x#n~M]7Z!(R[$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!(|^$UWOY!'|YZKoZz!'|z{!(w{!P!'|!P!Q!)x!Q!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!*PY$UWU7ROYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~Hq7Z!*tX$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#o!'|#o#p!$`#p~!'|7Z!+fX$UWOYJlYZKoZzJlz{NQ{!^Jl!^!_!!]!_#oJl#o#p!!]#p~Jl7Z!,Yc$UW}POzKoz{LZ{!^Ko!^!_M]!_#ZKo#Z#[!,R#[#]Ko#]#^!,R#^#aKo#a#b!,R#b#gKo#g#h!,R#h#iKo#i#j!,R#j#mKo#m#n!,R#n#oKo#o#pM]#p~Ko7Z!-lV$UWT7ROY!-eYZ%TZ!^!-e!^!_!.R!_#o!-e#o#p!.R#p~!-e7R!.WQT7ROY!.RZ~!.R$P!.g[$UW#o#v}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du]!/f[#wS$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Duy!0cd$UWkqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#U%T#U#V!3X#V#X%T#X#YAl#Y#b%T#b#c!2w#c#d!4m#d#l%T#l#m!5{#m#o%T#p~%Ty!1x_$UWkqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#X%T#X#YAl#Y#b%T#b#c!2w#c#o%T#p~%Ty!3OR$UWkqO!^%T!_#o%T#p~%Ty!3^W$UWO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#o%T#p~%Ty!3}Y$UWkqO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#b%T#b#c!2w#c#o%T#p~%Ty!4rV$UWO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#o%T#p~%Ty!5`X$UWkqO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#b%T#b#c!2w#c#o%T#p~%Ty!6QZ$UWO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#o%T#p~%Ty!6z]$UWkqO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#b%T#b#c!2w#c#o%T#p~%T%w!7|R!]V$UW#m%hO!^%T!_#o%T#p~%T!P!8^R_w$UWO!^%T!_#o%T#p~%T6i!8rR'bd!a0`#x&s'|P!P!Q!8{!^!_!9Q!_!`!9_W!9QO$WW#v!9VP#`#v!_!`!9Y#v!9_O#o#v#v!9dO#a#v%w!9kT!{%o$UWO!^%T!_!`'v!`!a!9z!a#o%T#p~%T$P!:RR#W#w$UWO!^%T!_#o%T#p~%T%w!:gT'a!s#a#v$RS$UWO!^%T!_!`!:v!`!a!;W!a#o%T#p~%T$O!:}R#a#v$UWO!^%T!_#o%T#p~%T$O!;_T#`#v$UWO!^%T!_!`5T!`!a!;n!a#o%T#p~%T$O!;uS#`#v$UWO!^%T!_!`5T!`#o%T#p~%T6i!<YV'p6a$UWO!O%T!O!P!<o!P!^%T!_!a%T!a!b!=P!b#o%T#p~%T)z!<vRv)r$UWO!^%T!_#o%T#p~%T$O!=WS$UW#j#vO!^%T!_!`5T!`#o%T#p~%T7V!=kRx6}$UWO!^%T!_#o%T#p~%TZ!={R!OR$UWO!^%T!_#o%T#p~%T$O!>]S#g#v$UWO!^%T!_!`5T!`#o%T#p~%T$P!>pR$UW'f#wO!^%T!_#o%T#p~%T~!?OO!T~6d!?VT'w6[$UWO!^%T!_!`5T!`#o%T#p#q!=P#q~%T5g!?oR!S5]nQ$UWO!^%T!_#o%T#p~%TX!@PR!kP$UWO!^%T!_#o%T#p~%T7Z!@gr$UW'Y7R#zS']%k'g2bOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`7Z!CO_$UW'Z7R#zS']%k'g2bOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`",tokenizers:[c,u,h,0,1,2,3,4,5,6,7,8,9,l],topRules:{Script:[0,7]},dialects:{jsx:11707,ts:11709},dynamicPrecedences:{149:1,176:1},specialized:[{term:289,get:(e,t)=>function(e,t){return"extends"==e&&t.dialectEnabled(1)?4:-1}(e,t)<<1},{term:289,get:e=>d[e]||-1},{term:299,get:e=>p[e]||-1},{term:63,get:e=>m[e]||-1}],tokenPrec:11730});t.parser=g},90:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=n(897);class o{constructor(e,t,n,i,r,o,s,a,l,c=0,u){this.p=e,this.stack=t,this.state=n,this.reducePos=i,this.pos=r,this.score=o,this.buffer=s,this.bufferBase=a,this.curContext=l,this.lookAhead=c,this.parent=u}toString(){return`[${this.stack.filter(((e,t)=>t%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(e,t,n=0){let i=e.parser.context;return new o(e,[],t,n,n,0,[],0,i?new s(i,i.start):null,0,null)}get context(){return this.curContext?this.curContext.context:null}pushState(e,t){this.stack.push(this.state,t,this.bufferBase+this.buffer.length),this.state=e}reduce(e){let t=e>>19,n=65535&e,{parser:i}=this.p,r=i.dynamicPrecedence(n);if(r&&(this.score+=r),0==t)return this.pushState(i.getGoto(this.state,n,!0),this.reducePos),n<i.minRepeatTerm&&this.storeNode(n,this.reducePos,this.reducePos,4,!0),void this.reduceContext(n,this.reducePos);let o=this.stack.length-3*(t-1)-(262144&e?6:0),s=this.stack[o-2],a=this.stack[o-1],l=this.bufferBase+this.buffer.length-a;if(n<i.minRepeatTerm||131072&e){let e=i.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(n,s,e,l+4,!0)}if(262144&e)this.state=this.stack[o];else{let e=this.stack[o-3];this.state=i.getGoto(e,n,!0)}for(;this.stack.length>o;)this.stack.pop();this.reduceContext(n,s)}storeNode(e,t,n,i=4,r=!1){if(0==e&&(!this.stack.length||this.stack[this.stack.length-1]<this.buffer.length+this.bufferBase)){let e=this,i=this.buffer.length;if(0==i&&e.parent&&(i=e.bufferBase-e.parent.bufferBase,e=e.parent),i>0&&0==e.buffer[i-4]&&e.buffer[i-1]>-1){if(t==n)return;if(e.buffer[i-2]>=t)return void(e.buffer[i-2]=n)}}if(r&&this.pos!=n){let r=this.buffer.length;if(r>0&&0!=this.buffer[r-4])for(;r>0&&this.buffer[r-2]>n;)this.buffer[r]=this.buffer[r-4],this.buffer[r+1]=this.buffer[r-3],this.buffer[r+2]=this.buffer[r-2],this.buffer[r+3]=this.buffer[r-1],r-=4,i>4&&(i-=4);this.buffer[r]=e,this.buffer[r+1]=t,this.buffer[r+2]=n,this.buffer[r+3]=i}else this.buffer.push(e,t,n,i)}shift(e,t,n){let i=this.pos;if(131072&e)this.pushState(65535&e,this.pos);else if(0==(262144&e)){let r=e,{parser:o}=this.p;(n>this.pos||t<=o.maxNode)&&(this.pos=n,o.stateFlag(r,1)||(this.reducePos=n)),this.pushState(r,i),this.shiftContext(t,i),t<=o.maxNode&&this.buffer.push(t,i,n,4)}else this.pos=n,this.shiftContext(t,i),t<=this.p.parser.maxNode&&this.buffer.push(t,i,n,4)}apply(e,t,n){65536&e?this.reduce(e):this.shift(e,t,n)}useNode(e,t){let n=this.p.reused.length-1;(n<0||this.p.reused[n]!=e)&&(this.p.reused.push(e),n++);let i=this.pos;this.reducePos=this.pos=i+e.length,this.pushState(t,i),this.buffer.push(n,i,this.reducePos,-1),this.curContext&&this.updateContext(this.curContext.tracker.reuse(this.curContext.context,e,this,this.p.stream.reset(this.pos-e.length)))}split(){let e=this,t=e.buffer.length;for(;t>0&&e.buffer[t-2]>e.reducePos;)t-=4;let n=e.buffer.slice(t),i=e.bufferBase+t;for(;e&&i==e.bufferBase;)e=e.parent;return new o(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,n,i,this.curContext,this.lookAhead,e)}recoverByDelete(e,t){let n=e<=this.p.parser.maxNode;n&&this.storeNode(e,this.pos,t,4),this.storeNode(0,this.pos,t,n?8:4),this.pos=this.reducePos=t,this.score-=190}canShift(e){for(let t=new a(this);;){let n=this.p.parser.stateSlot(t.state,4)||this.p.parser.hasAction(t.state,e);if(0==(65536&n))return!0;if(0==n)return!1;t.reduce(n)}}recoverByInsert(e){if(this.stack.length>=300)return[];let t=this.p.parser.nextStates(this.state);if(t.length>8||this.stack.length>=120){let n=[];for(let i,r=0;r<t.length;r+=2)(i=t[r+1])!=this.state&&this.p.parser.hasAction(i,e)&&n.push(t[r],i);if(this.stack.length<120)for(let e=0;n.length<8&&e<t.length;e+=2){let i=t[e+1];n.some(((e,t)=>1&t&&e==i))||n.push(t[e],i)}t=n}let n=[];for(let e=0;e<t.length&&n.length<4;e+=2){let i=t[e+1];if(i==this.state)continue;let r=this.split();r.pushState(i,this.pos),r.storeNode(0,r.pos,r.pos,4,!0),r.shiftContext(t[e],this.pos),r.score-=200,n.push(r)}return n}forceReduce(){let e=this.p.parser.stateSlot(this.state,5);if(0==(65536&e))return!1;let{parser:t}=this.p;if(!t.validAction(this.state,e)){let n=e>>19,i=65535&e,r=this.stack.length-3*n;if(r<0||t.getGoto(this.stack[r],i,!1)<0)return!1;this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100}return this.reducePos=this.pos,this.reduce(e),!0}forceAll(){for(;!this.p.parser.stateFlag(this.state,2);)if(!this.forceReduce()){this.storeNode(0,this.pos,this.pos,4,!0);break}return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:e}=this.p;return 65535==e.data[e.stateSlot(this.state,1)]&&!e.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(e){if(this.state!=e.state||this.stack.length!=e.stack.length)return!1;for(let t=0;t<this.stack.length;t+=3)if(this.stack[t]!=e.stack[t])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(e){return this.p.parser.dialect.flags[e]}shiftContext(e,t){this.curContext&&this.updateContext(this.curContext.tracker.shift(this.curContext.context,e,this,this.p.stream.reset(t)))}reduceContext(e,t){this.curContext&&this.updateContext(this.curContext.tracker.reduce(this.curContext.context,e,this,this.p.stream.reset(t)))}emitContext(){let e=this.buffer.length-1;(e<0||-3!=this.buffer[e])&&this.buffer.push(this.curContext.hash,this.reducePos,this.reducePos,-3)}emitLookAhead(){let e=this.buffer.length-1;(e<0||-4!=this.buffer[e])&&this.buffer.push(this.lookAhead,this.reducePos,this.reducePos,-4)}updateContext(e){if(e!=this.curContext.context){let t=new s(this.curContext.tracker,e);t.hash!=this.curContext.hash&&this.emitContext(),this.curContext=t}}setLookAhead(e){e>this.lookAhead&&(this.emitLookAhead(),this.lookAhead=e)}close(){this.curContext&&this.curContext.tracker.strict&&this.emitContext(),this.lookAhead>0&&this.emitLookAhead()}}class s{constructor(e,t){this.tracker=e,this.context=t,this.hash=e.strict?e.hash(t):0}}!function(e){e[e.Insert=200]="Insert",e[e.Delete=190]="Delete",e[e.Reduce=100]="Reduce",e[e.MaxNext=4]="MaxNext",e[e.MaxInsertStackDepth=300]="MaxInsertStackDepth",e[e.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(i||(i={}));class a{constructor(e){this.start=e,this.state=e.state,this.stack=e.stack,this.base=this.stack.length}reduce(e){let t=65535&e,n=e>>19;0==n?(this.stack==this.start.stack&&(this.stack=this.stack.slice()),this.stack.push(this.state,0,0),this.base+=3):this.base-=3*(n-1);let i=this.start.p.parser.getGoto(this.stack[this.base-3],t,!0);this.state=i}}class l{constructor(e,t,n){this.stack=e,this.pos=t,this.index=n,this.buffer=e.buffer,0==this.index&&this.maybeNext()}static create(e,t=e.bufferBase+e.buffer.length){return new l(e,t,t-e.bufferBase)}maybeNext(){let e=this.stack.parent;null!=e&&(this.index=this.stack.bufferBase-e.bufferBase,this.stack=e,this.buffer=e.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new l(this.stack,this.pos,this.index)}}class c{constructor(){this.start=-1,this.value=-1,this.end=-1,this.extended=-1,this.lookAhead=0,this.mask=0,this.context=0}}const u=new c;class h{constructor(e,t){this.input=e,this.ranges=t,this.chunk="",this.chunkOff=0,this.chunk2="",this.chunk2Pos=0,this.next=-1,this.token=u,this.rangeIndex=0,this.pos=this.chunkPos=t[0].from,this.range=t[0],this.end=t[t.length-1].to,this.readNext()}resolveOffset(e,t){let n=this.range,i=this.rangeIndex,r=this.pos+e;for(;r<n.from;){if(!i)return null;let e=this.ranges[--i];r-=n.from-e.to,n=e}for(;t<0?r>n.to:r>=n.to;){if(i==this.ranges.length-1)return null;let e=this.ranges[++i];r+=e.from-n.to,n=e}return r}peek(e){let t,n,i=this.chunkOff+e;if(i>=0&&i<this.chunk.length)t=this.pos+e,n=this.chunk.charCodeAt(i);else{let i=this.resolveOffset(e,1);if(null==i)return-1;if(t=i,t>=this.chunk2Pos&&t<this.chunk2Pos+this.chunk2.length)n=this.chunk2.charCodeAt(t-this.chunk2Pos);else{let e=this.rangeIndex,i=this.range;for(;i.to<=t;)i=this.ranges[++e];this.chunk2=this.input.chunk(this.chunk2Pos=t),t+this.chunk2.length>i.to&&(this.chunk2=this.chunk2.slice(0,i.to-t)),n=this.chunk2.charCodeAt(0)}}return t>=this.token.lookAhead&&(this.token.lookAhead=t+1),n}acceptToken(e,t=0){let n=t?this.resolveOffset(t,-1):this.pos;if(null==n||n<this.token.start)throw new RangeError("Token end out of bounds");this.token.value=e,this.token.end=n}getChunk(){if(this.pos>=this.chunk2Pos&&this.pos<this.chunk2Pos+this.chunk2.length){let{chunk:e,chunkPos:t}=this;this.chunk=this.chunk2,this.chunkPos=this.chunk2Pos,this.chunk2=e,this.chunk2Pos=t,this.chunkOff=this.pos-this.chunkPos}else{this.chunk2=this.chunk,this.chunk2Pos=this.chunkPos;let e=this.input.chunk(this.pos),t=this.pos+e.length;this.chunk=t>this.range.to?e.slice(0,this.range.to-this.pos):e,this.chunkPos=this.pos,this.chunkOff=0}}readNext(){return this.chunkOff>=this.chunk.length&&(this.getChunk(),this.chunkOff==this.chunk.length)?this.next=-1:this.next=this.chunk.charCodeAt(this.chunkOff)}advance(e=1){for(this.chunkOff+=e;this.pos+e>=this.range.to;){if(this.rangeIndex==this.ranges.length-1)return this.setDone();e-=this.range.to-this.pos,this.range=this.ranges[++this.rangeIndex],this.pos=this.range.from}return this.pos+=e,this.pos>=this.token.lookAhead&&(this.token.lookAhead=this.pos+1),this.readNext()}setDone(){return this.pos=this.chunkPos=this.end,this.range=this.ranges[this.rangeIndex=this.ranges.length-1],this.chunk="",this.next=-1}reset(e,t){if(t?(this.token=t,t.start=e,t.lookAhead=e+1,t.value=t.extended=-1):this.token=u,this.pos!=e){if(this.pos=e,e==this.end)return this.setDone(),this;for(;e<this.range.from;)this.range=this.ranges[--this.rangeIndex];for(;e>=this.range.to;)this.range=this.ranges[++this.rangeIndex];e>=this.chunkPos&&e<this.chunkPos+this.chunk.length?this.chunkOff=e-this.chunkPos:(this.chunk="",this.chunkOff=0),this.readNext()}return this}read(e,t){if(e>=this.chunkPos&&t<=this.chunkPos+this.chunk.length)return this.chunk.slice(e-this.chunkPos,t-this.chunkPos);if(e>=this.chunk2Pos&&t<=this.chunk2Pos+this.chunk2.length)return this.chunk2.slice(e-this.chunk2Pos,t-this.chunk2Pos);if(e>=this.range.from&&t<=this.range.to)return this.input.read(e,t);let n="";for(let i of this.ranges){if(i.from>=t)break;i.to>e&&(n+=this.input.read(Math.max(i.from,e),Math.min(i.to,t)))}return n}}class f{constructor(e,t){this.data=e,this.id=t}token(e,t){!function(e,t,n,i){let r=0,o=1<<i,{parser:s}=n.p,{dialect:a}=s;e:for(;0!=(o&e[r]);){let n=e[r+1];for(let i=r+3;i<n;i+=2)if((e[i+1]&o)>0){let n=e[i];if(a.allows(n)&&(-1==t.token.value||t.token.value==n||s.overrides(n,t.token.value))){t.acceptToken(n);break}}for(let i=t.next,o=0,s=e[r+2];o<s;){let a=o+s>>1,l=n+a+(a<<1),c=e[l],u=e[l+1];if(i<c)s=a;else{if(!(i>=u)){r=e[l+2],t.advance();continue e}o=a+1}}break}}(this.data,e,t,this.id)}}function d(e,t=Uint16Array){if("string"!=typeof e)return e;let n=null;for(let i=0,r=0;i<e.length;){let o=0;for(;;){let t=e.charCodeAt(i++),n=!1;if(126==t){o=65535;break}t>=92&&t--,t>=34&&t--;let r=t-32;if(r>=46&&(r-=46,n=!0),o+=r,n)break;o*=46}n?n[r++]=o:n=new t(o)}return n}f.prototype.contextual=f.prototype.fallback=f.prototype.extend=!1;const p="undefined"!=typeof process&&process.env&&/\bparse\b/.test(process.env.LOG);let m=null;var g,O;function v(e,t,n){let i=e.cursor(r.IterMode.IncludeAnonymous);for(i.moveTo(t);;)if(!(n<0?i.childBefore(t):i.childAfter(t)))for(;;){if((n<0?i.to<t:i.from>t)&&!i.type.isError)return n<0?Math.max(0,Math.min(i.to-1,t-25)):Math.min(e.length,Math.max(i.from+1,t+25));if(n<0?i.prevSibling():i.nextSibling())break;if(!i.parent())return n<0?0:e.length}}!function(e){e[e.Margin=25]="Margin"}(g||(g={}));class y{constructor(e,t){this.fragments=e,this.nodeSet=t,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let e=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(e){for(this.safeFrom=e.openStart?v(e.tree,e.from+e.offset,1)-e.offset:e.from,this.safeTo=e.openEnd?v(e.tree,e.to+e.offset,-1)-e.offset:e.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(e.tree),this.start.push(-e.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(e){if(e<this.nextStart)return null;for(;this.fragment&&this.safeTo<=e;)this.nextFragment();if(!this.fragment)return null;for(;;){let t=this.trees.length-1;if(t<0)return this.nextFragment(),null;let n=this.trees[t],i=this.index[t];if(i==n.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let o=n.children[i],s=this.start[t]+n.positions[i];if(s>e)return this.nextStart=s,null;if(o instanceof r.Tree){if(s==e){if(s<this.safeFrom)return null;let e=s+o.length;if(e<=this.safeTo){let t=o.prop(r.NodeProp.lookAhead);if(!t||e+t<this.fragment.to)return o}}this.index[t]++,s+o.length>=Math.max(this.safeFrom,e)&&(this.trees.push(o),this.start.push(s),this.index.push(0))}else this.index[t]++,this.nextStart=s+o.length}}}class b{constructor(e,t){this.stream=t,this.tokens=[],this.mainToken=null,this.actions=[],this.tokens=e.tokenizers.map((e=>new c))}getActions(e){let t=0,n=null,{parser:i}=e.p,{tokenizers:r}=i,o=i.stateSlot(e.state,3),s=e.curContext?e.curContext.hash:0,a=0;for(let i=0;i<r.length;i++){if(0==(1<<i&o))continue;let l=r[i],c=this.tokens[i];if((!n||l.fallback)&&((l.contextual||c.start!=e.pos||c.mask!=o||c.context!=s)&&(this.updateCachedToken(c,l,e),c.mask=o,c.context=s),c.lookAhead>c.end+25&&(a=Math.max(c.lookAhead,a)),0!=c.value)){let i=t;if(c.extended>-1&&(t=this.addActions(e,c.extended,c.end,t)),t=this.addActions(e,c.value,c.end,t),!l.extend&&(n=c,t>i))break}}for(;this.actions.length>t;)this.actions.pop();return a&&e.setLookAhead(a),n||e.pos!=this.stream.end||(n=new c,n.value=e.p.parser.eofTerm,n.start=n.end=e.pos,t=this.addActions(e,n.value,n.end,t)),this.mainToken=n,this.actions}getMainToken(e){if(this.mainToken)return this.mainToken;let t=new c,{pos:n,p:i}=e;return t.start=n,t.end=Math.min(n+1,i.stream.end),t.value=n==i.stream.end?i.parser.eofTerm:0,t}updateCachedToken(e,t,n){if(t.token(this.stream.reset(n.pos,e),n),e.value>-1){let{parser:t}=n.p;for(let i=0;i<t.specialized.length;i++)if(t.specialized[i]==e.value){let r=t.specializers[i](this.stream.read(e.start,e.end),n);if(r>=0&&n.p.parser.dialect.allows(r>>1)){0==(1&r)?e.value=r>>1:e.extended=r>>1;break}}}else e.value=0,e.end=Math.min(n.p.stream.end,n.pos+1)}putAction(e,t,n,i){for(let t=0;t<i;t+=3)if(this.actions[t]==e)return i;return this.actions[i++]=e,this.actions[i++]=t,this.actions[i++]=n,i}addActions(e,t,n,i){let{state:r}=e,{parser:o}=e.p,{data:s}=o;for(let e=0;e<2;e++)for(let a=o.stateSlot(r,e?2:1);;a+=3){if(65535==s[a]){if(1!=s[a+1]){0==i&&2==s[a+1]&&(i=this.putAction(T(s,a+2),t,n,i));break}a=T(s,a+2)}s[a]==t&&(i=this.putAction(T(s,a+1),t,n,i))}return i}}!function(e){e[e.Distance=5]="Distance",e[e.MaxRemainingPerStep=3]="MaxRemainingPerStep",e[e.MinBufferLengthPrune=500]="MinBufferLengthPrune",e[e.ForceReduceLimit=10]="ForceReduceLimit",e[e.CutDepth=15e3]="CutDepth",e[e.CutTo=9e3]="CutTo"}(O||(O={}));class w{constructor(e,t,n,i){this.parser=e,this.input=t,this.ranges=i,this.recovering=0,this.nextStackID=9812,this.minStackPos=0,this.reused=[],this.stoppedAt=null,this.stream=new h(t,i),this.tokens=new b(e,this.stream),this.topTerm=e.top[1];let{from:r}=i[0];this.stacks=[o.start(this,e.top[0],r)],this.fragments=n.length&&this.stream.end-r>4*e.bufferLength?new y(n,e.nodeSet):null}get parsedPos(){return this.minStackPos}advance(){let e,t,n=this.stacks,i=this.minStackPos,r=this.stacks=[];for(let o=0;o<n.length;o++){let s=n[o];for(;;){if(this.tokens.mainToken=null,s.pos>i)r.push(s);else{if(this.advanceStack(s,r,n))continue;{e||(e=[],t=[]),e.push(s);let n=this.tokens.getMainToken(s);t.push(n.value,n.end)}}break}}if(!r.length){let t=e&&function(e){let t=null;for(let n of e){let e=n.p.stoppedAt;(n.pos==n.p.stream.end||null!=e&&n.pos>e)&&n.p.parser.stateFlag(n.state,2)&&(!t||t.score<n.score)&&(t=n)}return t}(e);if(t)return this.stackToTree(t);if(this.parser.strict)throw p&&e&&console.log("Stuck with token "+(this.tokens.mainToken?this.parser.getName(this.tokens.mainToken.value):"none")),new SyntaxError("No parse at "+i);this.recovering||(this.recovering=5)}if(this.recovering&&e){let n=null!=this.stoppedAt&&e[0].pos>this.stoppedAt?e[0]:this.runRecovery(e,t,r);if(n)return this.stackToTree(n.forceAll())}if(this.recovering){let e=1==this.recovering?1:3*this.recovering;if(r.length>e)for(r.sort(((e,t)=>t.score-e.score));r.length>e;)r.pop();r.some((e=>e.reducePos>i))&&this.recovering--}else if(r.length>1)e:for(let e=0;e<r.length-1;e++){let t=r[e];for(let n=e+1;n<r.length;n++){let i=r[n];if(t.sameState(i)||t.buffer.length>500&&i.buffer.length>500){if(!((t.score-i.score||t.buffer.length-i.buffer.length)>0)){r.splice(e--,1);continue e}r.splice(n--,1)}}}this.minStackPos=r[0].pos;for(let e=1;e<r.length;e++)r[e].pos<this.minStackPos&&(this.minStackPos=r[e].pos);return null}stopAt(e){if(null!=this.stoppedAt&&this.stoppedAt<e)throw new RangeError("Can't move stoppedAt forward");this.stoppedAt=e}advanceStack(e,t,n){let i=e.pos,{parser:o}=this,s=p?this.stackID(e)+" -> ":"";if(null!=this.stoppedAt&&i>this.stoppedAt)return e.forceReduce()?e:null;if(this.fragments){let t=e.curContext&&e.curContext.tracker.strict,n=t?e.curContext.hash:0;for(let a=this.fragments.nodeAt(i);a;){let i=this.parser.nodeSet.types[a.type.id]==a.type?o.getGoto(e.state,a.type.id):-1;if(i>-1&&a.length&&(!t||(a.prop(r.NodeProp.contextHash)||0)==n))return e.useNode(a,i),p&&console.log(s+this.stackID(e)+` (via reuse of ${o.getName(a.type.id)})`),!0;if(!(a instanceof r.Tree)||0==a.children.length||a.positions[0]>0)break;let l=a.children[0];if(!(l instanceof r.Tree&&0==a.positions[0]))break;a=l}}let a=o.stateSlot(e.state,4);if(a>0)return e.reduce(a),p&&console.log(s+this.stackID(e)+` (via always-reduce ${o.getName(65535&a)})`),!0;if(e.stack.length>=15e3)for(;e.stack.length>9e3&&e.forceReduce(););let l=this.tokens.getActions(e);for(let r=0;r<l.length;){let a=l[r++],c=l[r++],u=l[r++],h=r==l.length||!n,f=h?e:e.split();if(f.apply(a,c,u),p&&console.log(s+this.stackID(f)+` (via ${0==(65536&a)?"shift":`reduce of ${o.getName(65535&a)}`} for ${o.getName(c)} @ ${i}${f==e?"":", split"})`),h)return!0;f.pos>i?t.push(f):n.push(f)}return!1}advanceFully(e,t){let n=e.pos;for(;;){if(!this.advanceStack(e,null,null))return!1;if(e.pos>n)return S(e,t),!0}}runRecovery(e,t,n){let i=null,r=!1;for(let o=0;o<e.length;o++){let s=e[o],a=t[o<<1],l=t[1+(o<<1)],c=p?this.stackID(s)+" -> ":"";if(s.deadEnd){if(r)continue;if(r=!0,s.restart(),p&&console.log(c+this.stackID(s)+" (restarted)"),this.advanceFully(s,n))continue}let u=s.split(),h=c;for(let e=0;u.forceReduce()&&e<10&&(p&&console.log(h+this.stackID(u)+" (via force-reduce)"),!this.advanceFully(u,n));e++)p&&(h=this.stackID(u)+" -> ");for(let e of s.recoverByInsert(a))p&&console.log(c+this.stackID(e)+" (via recover-insert)"),this.advanceFully(e,n);this.stream.end>s.pos?(l==s.pos&&(l++,a=0),s.recoverByDelete(a,l),p&&console.log(c+this.stackID(s)+` (via recover-delete ${this.parser.getName(a)})`),S(s,n)):(!i||i.score<s.score)&&(i=s)}return i}stackToTree(e){return e.close(),r.Tree.build({buffer:l.create(e),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.ranges[0].from,length:e.pos-this.ranges[0].from,minRepeatType:this.parser.minRepeatTerm})}stackID(e){let t=(m||(m=new WeakMap)).get(e);return t||m.set(e,t=String.fromCodePoint(this.nextStackID++)),t+e}}function S(e,t){for(let n=0;n<t.length;n++){let i=t[n];if(i.pos==e.pos&&i.sameState(e))return void(t[n].score<e.score&&(t[n]=e))}t.push(e)}class x{constructor(e,t,n){this.source=e,this.flags=t,this.disabled=n}allows(e){return!this.disabled||0==this.disabled[e]}}const k=e=>e;class Q extends r.Parser{constructor(e){if(super(),this.wrappers=[],14!=e.version)throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);let t=e.nodeNames.split(" ");this.minRepeatTerm=t.length;for(let n=0;n<e.repeatNodeCount;n++)t.push("");let n=Object.keys(e.topRules).map((t=>e.topRules[t][1])),i=[];for(let e=0;e<t.length;e++)i.push([]);function o(e,t,n){i[e].push([t,t.deserialize(String(n))])}if(e.nodeProps)for(let t of e.nodeProps){let e=t[0];"string"==typeof e&&(e=r.NodeProp[e]);for(let n=1;n<t.length;){let i=t[n++];if(i>=0)o(i,e,t[n++]);else{let r=t[n+-i];for(let s=-i;s>0;s--)o(t[n++],e,r);n++}}}this.nodeSet=new r.NodeSet(t.map(((t,o)=>r.NodeType.define({name:o>=this.minRepeatTerm?void 0:t,id:o,props:i[o],top:n.indexOf(o)>-1,error:0==o,skipped:e.skippedNodes&&e.skippedNodes.indexOf(o)>-1})))),e.propSources&&(this.nodeSet=this.nodeSet.extend(...e.propSources)),this.strict=!1,this.bufferLength=r.DefaultBufferLength;let s=d(e.tokenData);if(this.context=e.context,this.specialized=new Uint16Array(e.specialized?e.specialized.length:0),this.specializers=[],e.specialized)for(let t=0;t<e.specialized.length;t++)this.specialized[t]=e.specialized[t].term,this.specializers[t]=e.specialized[t].get;this.states=d(e.states,Uint32Array),this.data=d(e.stateData),this.goto=d(e.goto),this.maxTerm=e.maxTerm,this.tokenizers=e.tokenizers.map((e=>"number"==typeof e?new f(s,e):e)),this.topRules=e.topRules,this.dialects=e.dialects||{},this.dynamicPrecedences=e.dynamicPrecedences||null,this.tokenPrecTable=e.tokenPrec,this.termNames=e.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}createParse(e,t,n){let i=new w(this,e,t,n);for(let r of this.wrappers)i=r(i,e,t,n);return i}getGoto(e,t,n=!1){let i=this.goto;if(t>=i[0])return-1;for(let r=i[t+1];;){let t=i[r++],o=1&t,s=i[r++];if(o&&n)return s;for(let n=r+(t>>1);r<n;r++)if(i[r]==e)return s;if(o)return-1}}hasAction(e,t){let n=this.data;for(let i=0;i<2;i++)for(let r,o=this.stateSlot(e,i?2:1);;o+=3){if(65535==(r=n[o])){if(1!=n[o+1]){if(2==n[o+1])return T(n,o+2);break}r=n[o=T(n,o+2)]}if(r==t||0==r)return T(n,o+1)}return 0}stateSlot(e,t){return this.states[6*e+t]}stateFlag(e,t){return(this.stateSlot(e,0)&t)>0}validAction(e,t){if(t==this.stateSlot(e,4))return!0;for(let n=this.stateSlot(e,1);;n+=3){if(65535==this.data[n]){if(1!=this.data[n+1])return!1;n=T(this.data,n+2)}if(t==T(this.data,n+1))return!0}}nextStates(e){let t=[];for(let n=this.stateSlot(e,1);;n+=3){if(65535==this.data[n]){if(1!=this.data[n+1])break;n=T(this.data,n+2)}if(0==(1&this.data[n+2])){let e=this.data[n+1];t.some(((t,n)=>1&n&&t==e))||t.push(this.data[n],e)}}return t}overrides(e,t){let n=$(this.data,this.tokenPrecTable,t);return n<0||$(this.data,this.tokenPrecTable,e)<n}configure(e){let t=Object.assign(Object.create(Q.prototype),this);if(e.props&&(t.nodeSet=this.nodeSet.extend(...e.props)),e.top){let n=this.topRules[e.top];if(!n)throw new RangeError(`Invalid top rule name ${e.top}`);t.top=n}return e.tokenizers&&(t.tokenizers=this.tokenizers.map((t=>{let n=e.tokenizers.find((e=>e.from==t));return n?n.to:t}))),e.contextTracker&&(t.context=e.contextTracker),e.dialect&&(t.dialect=this.parseDialect(e.dialect)),null!=e.strict&&(t.strict=e.strict),e.wrap&&(t.wrappers=t.wrappers.concat(e.wrap)),null!=e.bufferLength&&(t.bufferLength=e.bufferLength),t}hasWrappers(){return this.wrappers.length>0}getName(e){return this.termNames?this.termNames[e]:String(e<=this.maxNode&&this.nodeSet.types[e].name||e)}get eofTerm(){return this.maxNode+1}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(e){let t=this.dynamicPrecedences;return null==t?0:t[e]||0}parseDialect(e){let t=Object.keys(this.dialects),n=t.map((()=>!1));if(e)for(let i of e.split(" ")){let e=t.indexOf(i);e>=0&&(n[e]=!0)}let i=null;for(let e=0;e<t.length;e++)if(!n[e])for(let n,r=this.dialects[t[e]];65535!=(n=this.data[r++]);)(i||(i=new Uint8Array(this.maxTerm+1)))[n]=1;return new x(e,n,i)}static deserialize(e){return new Q(e)}}function T(e,t){return e[t]|e[t+1]<<16}function $(e,t,n){for(let i,r=t;65535!=(i=e[r]);r++)if(i==n)return r-t;return-1}t.ContextTracker=class{constructor(e){this.start=e.start,this.shift=e.shift||k,this.reduce=e.reduce||k,this.reuse=e.reuse||k,this.hash=e.hash||(()=>0),this.strict=!1!==e.strict}},t.ExternalTokenizer=class{constructor(e,t={}){this.token=e,this.contextual=!!t.contextual,this.fallback=!!t.fallback,this.extend=!!t.extend}},t.InputStream=h,t.LRParser=Q,t.Stack=o},91:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(642),r=n(40),o=n(729),s=n(561),a=n(502),l=n(526),c=n(426);const u=[i.lineNumbers(),i.highlightActiveLineGutter(),i.highlightSpecialChars(),s.history(),o.foldGutter(),i.drawSelection(),i.dropCursor(),r.EditorState.allowMultipleSelections.of(!0),o.indentOnInput(),o.syntaxHighlighting(o.defaultHighlightStyle,{fallback:!0}),o.bracketMatching(),l.closeBrackets(),l.autocompletion(),i.rectangularSelection(),i.crosshairCursor(),i.highlightActiveLine(),a.highlightSelectionMatches(),i.keymap.of([...l.closeBracketsKeymap,...s.defaultKeymap,...a.searchKeymap,...s.historyKeymap,...o.foldKeymap,...l.completionKeymap,...c.lintKeymap])],h=[i.highlightSpecialChars(),s.history(),i.drawSelection(),o.syntaxHighlighting(o.defaultHighlightStyle,{fallback:!0}),i.keymap.of([...s.defaultKeymap,...s.historyKeymap])];Object.defineProperty(t,"EditorView",{enumerable:!0,get:function(){return i.EditorView}}),t.basicSetup=u,t.minimalSetup=h},513:function(e){"use strict";function t(e,n){if("string"==typeof n)e.appendChild(document.createTextNode(n));else if(null==n);else if(null!=n.nodeType)e.appendChild(n);else{if(!Array.isArray(n))throw new RangeError("Unsupported child node: "+n);for(var i=0;i<n.length;i++)t(e,n[i])}}e.exports=function(){var e=arguments[0];"string"==typeof e&&(e=document.createElement(e));var n=1,i=arguments[1];if(i&&"object"==typeof i&&null==i.nodeType&&!Array.isArray(i)){for(var r in i)if(Object.prototype.hasOwnProperty.call(i,r)){var o=i[r];"string"==typeof o?e.setAttribute(r,o):null!=o&&(e[r]=o)}n++}for(;n<arguments.length;n++)t(e,arguments[n]);return e}},223:function(e,t){var n="undefined"==typeof Symbol?"__ͼ":Symbol.for("ͼ"),i="undefined"==typeof Symbol?"__styleSet"+Math.floor(1e8*Math.random()):Symbol("styleSet"),r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:{},o=t.StyleModule=function(e,t){this.rules=[];var n=(t||{}).finish;function i(e){return/^@/.test(e)?[e]:e.split(/,\s*/)}function r(e,t,o,s){var a=[],l=/^@(\w+)\b/.exec(e[0]),c=l&&"keyframes"==l[1];if(l&&null==t)return o.push(e[0]+";");for(var u in t){var h=t[u];if(/&/.test(u))r(u.split(/,\s*/).map((function(t){return e.map((function(e){return t.replace(/&/,e)}))})).reduce((function(e,t){return e.concat(t)})),h,o);else if(h&&"object"==typeof h){if(!l)throw new RangeError("The value of a property ("+u+") should be a primitive value.");r(i(u),h,a,c)}else null!=h&&a.push(u.replace(/_.*/,"").replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()}))+": "+h+";")}(a.length||c)&&o.push((!n||l||s?e:e.map(n)).join(", ")+" {"+a.join(" ")+"}")}for(var o in e)r(i(o),e[o],this.rules)};o.prototype.getRules=function(){return this.rules.join("\n")},o.newName=function(){var e=r[n]||1;return r[n]=e+1,"ͼ"+e.toString(36)},o.mount=function(e,t){(e[i]||new a(e)).mount(Array.isArray(t)?t:[t])};var s=null,a=function(e){if(!e.head&&e.adoptedStyleSheets&&"undefined"!=typeof CSSStyleSheet){if(s)return e.adoptedStyleSheets=[s.sheet].concat(e.adoptedStyleSheets),e[i]=s;this.sheet=new CSSStyleSheet,e.adoptedStyleSheets=[this.sheet].concat(e.adoptedStyleSheets),s=this}else{this.styleTag=(e.ownerDocument||e).createElement("style");var t=e.head||e;t.insertBefore(this.styleTag,t.firstChild)}this.modules=[],e[i]=this};a.prototype.mount=function(e){for(var t=this.sheet,n=0,i=0,r=0;r<e.length;r++){var o=e[r],s=this.modules.indexOf(o);if(s<i&&s>-1&&(this.modules.splice(s,1),i--,s=-1),-1==s){if(this.modules.splice(i++,0,o),t)for(var a=0;a<o.rules.length;a++)t.insertRule(o.rules[a],n++)}else{for(;i<s;)n+=this.modules[i++].rules.length;n+=o.rules.length,i++}}if(!t){for(var l="",c=0;c<this.modules.length;c++)l+=this.modules[c].getRules()+"\n";this.styleTag.textContent=l}}},691:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});for(var n={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},i={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},r="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),o="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),s="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),a="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),l="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),c=r&&(a||+r[1]<57)||s&&a,u=0;u<10;u++)n[48+u]=n[96+u]=String(u);for(u=1;u<=24;u++)n[u+111]="F"+u;for(u=65;u<=90;u++)n[u]=String.fromCharCode(u+32),i[u]=String.fromCharCode(u);for(var h in n)i.hasOwnProperty(h)||(i[h]=n[h]);t.base=n,t.keyName=function(e){var t=!(c&&(e.ctrlKey||e.altKey||e.metaKey)||(o||l)&&e.shiftKey&&e.key&&1==e.key.length)&&e.key||(e.shiftKey?i:n)[e.keyCode]||e.key||"Unidentified";return"Esc"==t&&(t="Escape"),"Del"==t&&(t="Delete"),"Left"==t&&(t="ArrowLeft"),"Up"==t&&(t="ArrowUp"),"Right"==t&&(t="ArrowRight"),"Down"==t&&(t="ArrowDown"),t},t.shift=i}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(629)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,